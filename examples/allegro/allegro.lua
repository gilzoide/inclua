--[[
-- This file was automatically generated by Inclua 0.2.0 (https://github.com/gilzoide/inclua)
-- 
-- The Inclua team hopes this file was accurately generated, that it will be useful
-- and will never give SEGFAULTs, throw exceptions, or panic in a similar way.
-- This software is provided 'as-is', without any warranty.
-- Feel free to change and redistribute it.
--]]

local ffi = require 'ffi'

ffi.cdef[=[
struct ALLEGRO_TIMEOUT {
  uint64_t __pad1__;
  uint64_t __pad2__;
};
typedef struct ALLEGRO_TIMEOUT ALLEGRO_TIMEOUT;
struct ALLEGRO_COLOR {
  float r;
  float g;
  float b;
  float a;
};
typedef struct ALLEGRO_COLOR ALLEGRO_COLOR;
enum ALLEGRO_PIXEL_FORMAT {
  ALLEGRO_PIXEL_FORMAT_ANY = 0,
  ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA = 1,
  ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA = 2,
  ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA = 3,
  ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA = 4,
  ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA = 5,
  ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA = 6,
  ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA = 7,
  ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA = 8,
  ALLEGRO_PIXEL_FORMAT_ARGB_8888 = 9,
  ALLEGRO_PIXEL_FORMAT_RGBA_8888 = 10,
  ALLEGRO_PIXEL_FORMAT_ARGB_4444 = 11,
  ALLEGRO_PIXEL_FORMAT_RGB_888 = 12,
  ALLEGRO_PIXEL_FORMAT_RGB_565 = 13,
  ALLEGRO_PIXEL_FORMAT_RGB_555 = 14,
  ALLEGRO_PIXEL_FORMAT_RGBA_5551 = 15,
  ALLEGRO_PIXEL_FORMAT_ARGB_1555 = 16,
  ALLEGRO_PIXEL_FORMAT_ABGR_8888 = 17,
  ALLEGRO_PIXEL_FORMAT_XBGR_8888 = 18,
  ALLEGRO_PIXEL_FORMAT_BGR_888 = 19,
  ALLEGRO_PIXEL_FORMAT_BGR_565 = 20,
  ALLEGRO_PIXEL_FORMAT_BGR_555 = 21,
  ALLEGRO_PIXEL_FORMAT_RGBX_8888 = 22,
  ALLEGRO_PIXEL_FORMAT_XRGB_8888 = 23,
  ALLEGRO_PIXEL_FORMAT_ABGR_F32 = 24,
  ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE = 25,
  ALLEGRO_PIXEL_FORMAT_RGBA_4444 = 26,
  ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 = 27,
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 = 28,
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 = 29,
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 = 30,
  ALLEGRO_NUM_PIXEL_FORMATS = 31,
};
typedef enum ALLEGRO_PIXEL_FORMAT ALLEGRO_PIXEL_FORMAT;
struct ALLEGRO_BITMAP;
typedef struct ALLEGRO_BITMAP ALLEGRO_BITMAP;
enum _bitmap_h_18_1_ {
  ALLEGRO_MEMORY_BITMAP = 1,
  _ALLEGRO_KEEP_BITMAP_FORMAT = 2,
  ALLEGRO_FORCE_LOCKING = 4,
  ALLEGRO_NO_PRESERVE_TEXTURE = 8,
  _ALLEGRO_ALPHA_TEST = 16,
  _ALLEGRO_INTERNAL_OPENGL = 32,
  ALLEGRO_MIN_LINEAR = 64,
  ALLEGRO_MAG_LINEAR = 128,
  ALLEGRO_MIPMAP = 256,
  _ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512,
  ALLEGRO_VIDEO_BITMAP = 1024,
  ALLEGRO_CONVERT_BITMAP = 4096,
};
enum _bitmap_draw_h_12_1_ {
  ALLEGRO_FLIP_HORIZONTAL = 1,
  ALLEGRO_FLIP_VERTICAL = 2,
};
struct _al_tagbstring {
  int mlen;
  int slen;
  unsigned char * data;
};
typedef struct _al_tagbstring ALLEGRO_USTR;
typedef struct _al_tagbstring ALLEGRO_USTR_INFO;
typedef unsigned short __uint16_t;
typedef __uint16_t uint16_t;
struct ALLEGRO_PATH;
typedef struct ALLEGRO_PATH ALLEGRO_PATH;
struct ALLEGRO_FILE;
typedef struct ALLEGRO_FILE ALLEGRO_FILE;
typedef long __off_t;
typedef __off_t off_t;
struct ALLEGRO_FILE_INTERFACE {
  void *(*fi_fopen)(const char *, const char *);
  _Bool (*fi_fclose)(ALLEGRO_FILE *);
  size_t (*fi_fread)(ALLEGRO_FILE *, void *, size_t);
  size_t (*fi_fwrite)(ALLEGRO_FILE *, const void *, size_t);
  _Bool (*fi_fflush)(ALLEGRO_FILE *);
  int64_t (*fi_ftell)(ALLEGRO_FILE *);
  _Bool (*fi_fseek)(ALLEGRO_FILE *, int64_t, int);
  _Bool (*fi_feof)(ALLEGRO_FILE *);
  int (*fi_ferror)(ALLEGRO_FILE *);
  const char *(*fi_ferrmsg)(ALLEGRO_FILE *);
  void (*fi_fclearerr)(ALLEGRO_FILE *);
  int (*fi_fungetc)(ALLEGRO_FILE *, int);
  off_t (*fi_fsize)(ALLEGRO_FILE *);
};
typedef struct ALLEGRO_FILE_INTERFACE ALLEGRO_FILE_INTERFACE;
enum ALLEGRO_SEEK {
  ALLEGRO_SEEK_SET = 0,
  ALLEGRO_SEEK_CUR = 1,
  ALLEGRO_SEEK_END = 2,
};
typedef enum ALLEGRO_SEEK ALLEGRO_SEEK;
enum _bitmap_io_h_14_1_ {
  ALLEGRO_KEEP_BITMAP_FORMAT = 2,
  ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512,
  ALLEGRO_KEEP_INDEX = 2048,
};
typedef ALLEGRO_BITMAP *(*ALLEGRO_IIO_LOADER_FUNCTION)(const char *, int);
typedef ALLEGRO_BITMAP *(*ALLEGRO_IIO_FS_LOADER_FUNCTION)(ALLEGRO_FILE *, int);
typedef _Bool (*ALLEGRO_IIO_SAVER_FUNCTION)(const char *, ALLEGRO_BITMAP *);
typedef _Bool (*ALLEGRO_IIO_FS_SAVER_FUNCTION)(ALLEGRO_FILE *, ALLEGRO_BITMAP *);
typedef _Bool (*ALLEGRO_IIO_IDENTIFIER_FUNCTION)(ALLEGRO_FILE *);
enum _bitmap_lock_h_14_1_ {
  ALLEGRO_LOCK_READWRITE = 0,
  ALLEGRO_LOCK_READONLY = 1,
  ALLEGRO_LOCK_WRITEONLY = 2,
};
struct ALLEGRO_LOCKED_REGION {
  void * data;
  int format;
  int pitch;
  int pixel_size;
};
typedef struct ALLEGRO_LOCKED_REGION ALLEGRO_LOCKED_REGION;
enum ALLEGRO_BLEND_MODE {
  ALLEGRO_ZERO = 0,
  ALLEGRO_ONE = 1,
  ALLEGRO_ALPHA = 2,
  ALLEGRO_INVERSE_ALPHA = 3,
  ALLEGRO_SRC_COLOR = 4,
  ALLEGRO_DEST_COLOR = 5,
  ALLEGRO_INVERSE_SRC_COLOR = 6,
  ALLEGRO_INVERSE_DEST_COLOR = 7,
  ALLEGRO_CONST_COLOR = 8,
  ALLEGRO_INVERSE_CONST_COLOR = 9,
  ALLEGRO_NUM_BLEND_MODES = 10,
};
enum ALLEGRO_BLEND_OPERATIONS {
  ALLEGRO_ADD = 0,
  ALLEGRO_SRC_MINUS_DEST = 1,
  ALLEGRO_DEST_MINUS_SRC = 2,
  ALLEGRO_NUM_BLEND_OPERATIONS = 3,
};
typedef unsigned int ALLEGRO_EVENT_TYPE;
enum _events_h_15_1_ {
  ALLEGRO_EVENT_JOYSTICK_AXIS = 1,
  ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN = 2,
  ALLEGRO_EVENT_JOYSTICK_BUTTON_UP = 3,
  ALLEGRO_EVENT_JOYSTICK_CONFIGURATION = 4,
  ALLEGRO_EVENT_KEY_DOWN = 10,
  ALLEGRO_EVENT_KEY_CHAR = 11,
  ALLEGRO_EVENT_KEY_UP = 12,
  ALLEGRO_EVENT_MOUSE_AXES = 20,
  ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = 21,
  ALLEGRO_EVENT_MOUSE_BUTTON_UP = 22,
  ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY = 23,
  ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY = 24,
  ALLEGRO_EVENT_MOUSE_WARPED = 25,
  ALLEGRO_EVENT_TIMER = 30,
  ALLEGRO_EVENT_DISPLAY_EXPOSE = 40,
  ALLEGRO_EVENT_DISPLAY_RESIZE = 41,
  ALLEGRO_EVENT_DISPLAY_CLOSE = 42,
  ALLEGRO_EVENT_DISPLAY_LOST = 43,
  ALLEGRO_EVENT_DISPLAY_FOUND = 44,
  ALLEGRO_EVENT_DISPLAY_SWITCH_IN = 45,
  ALLEGRO_EVENT_DISPLAY_SWITCH_OUT = 46,
  ALLEGRO_EVENT_DISPLAY_ORIENTATION = 47,
  ALLEGRO_EVENT_DISPLAY_HALT_DRAWING = 48,
  ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING = 49,
  ALLEGRO_EVENT_TOUCH_BEGIN = 50,
  ALLEGRO_EVENT_TOUCH_END = 51,
  ALLEGRO_EVENT_TOUCH_MOVE = 52,
  ALLEGRO_EVENT_TOUCH_CANCEL = 53,
  ALLEGRO_EVENT_DISPLAY_CONNECTED = 60,
  ALLEGRO_EVENT_DISPLAY_DISCONNECTED = 61,
};
struct ALLEGRO_EVENT_SOURCE {
  int __pad[32];
};
typedef struct ALLEGRO_EVENT_SOURCE ALLEGRO_EVENT_SOURCE;
struct ALLEGRO_ANY_EVENT {
  ALLEGRO_EVENT_TYPE type;
  ALLEGRO_EVENT_SOURCE * source;
  double timestamp;
};
typedef struct ALLEGRO_ANY_EVENT ALLEGRO_ANY_EVENT;
struct ALLEGRO_DISPLAY;
struct ALLEGRO_DISPLAY_EVENT {
  ALLEGRO_EVENT_TYPE type;
  struct ALLEGRO_DISPLAY * source;
  double timestamp;
  int x;
  int y;
  int width;
  int height;
  int orientation;
};
typedef struct ALLEGRO_DISPLAY_EVENT ALLEGRO_DISPLAY_EVENT;
struct ALLEGRO_JOYSTICK;
struct ALLEGRO_JOYSTICK_EVENT {
  ALLEGRO_EVENT_TYPE type;
  struct ALLEGRO_JOYSTICK * source;
  double timestamp;
  struct ALLEGRO_JOYSTICK * id;
  int stick;
  int axis;
  float pos;
  int button;
};
typedef struct ALLEGRO_JOYSTICK_EVENT ALLEGRO_JOYSTICK_EVENT;
struct ALLEGRO_KEYBOARD;
struct ALLEGRO_KEYBOARD_EVENT {
  ALLEGRO_EVENT_TYPE type;
  struct ALLEGRO_KEYBOARD * source;
  double timestamp;
  struct ALLEGRO_DISPLAY * display;
  int keycode;
  int unichar;
  unsigned int modifiers;
  _Bool repeat;
};
typedef struct ALLEGRO_KEYBOARD_EVENT ALLEGRO_KEYBOARD_EVENT;
struct ALLEGRO_MOUSE;
struct ALLEGRO_MOUSE_EVENT {
  ALLEGRO_EVENT_TYPE type;
  struct ALLEGRO_MOUSE * source;
  double timestamp;
  struct ALLEGRO_DISPLAY * display;
  int x;
  int y;
  int z;
  int w;
  int dx;
  int dy;
  int dz;
  int dw;
  unsigned int button;
  float pressure;
};
typedef struct ALLEGRO_MOUSE_EVENT ALLEGRO_MOUSE_EVENT;
struct ALLEGRO_TIMER;
struct ALLEGRO_TIMER_EVENT {
  ALLEGRO_EVENT_TYPE type;
  struct ALLEGRO_TIMER * source;
  double timestamp;
  int64_t count;
  double error;
};
typedef struct ALLEGRO_TIMER_EVENT ALLEGRO_TIMER_EVENT;
struct ALLEGRO_TOUCH_INPUT;
struct ALLEGRO_TOUCH_EVENT {
  ALLEGRO_EVENT_TYPE type;
  struct ALLEGRO_TOUCH_INPUT * source;
  double timestamp;
  struct ALLEGRO_DISPLAY * display;
  int id;
  float x;
  float y;
  float dx;
  float dy;
  _Bool primary;
};
typedef struct ALLEGRO_TOUCH_EVENT ALLEGRO_TOUCH_EVENT;
struct ALLEGRO_USER_EVENT_DESCRIPTOR;
struct ALLEGRO_USER_EVENT {
  ALLEGRO_EVENT_TYPE type;
  struct ALLEGRO_EVENT_SOURCE * source;
  double timestamp;
  struct ALLEGRO_USER_EVENT_DESCRIPTOR * __internal__descr;
  intptr_t data1;
  intptr_t data2;
  intptr_t data3;
  intptr_t data4;
};
typedef struct ALLEGRO_USER_EVENT ALLEGRO_USER_EVENT;
union ALLEGRO_EVENT {
  ALLEGRO_EVENT_TYPE type;
  ALLEGRO_ANY_EVENT any;
  ALLEGRO_DISPLAY_EVENT display;
  ALLEGRO_JOYSTICK_EVENT joystick;
  ALLEGRO_KEYBOARD_EVENT keyboard;
  ALLEGRO_MOUSE_EVENT mouse;
  ALLEGRO_TIMER_EVENT timer;
  ALLEGRO_TOUCH_EVENT touch;
  ALLEGRO_USER_EVENT user;
};
typedef union ALLEGRO_EVENT ALLEGRO_EVENT;
struct ALLEGRO_EVENT_QUEUE;
typedef struct ALLEGRO_EVENT_QUEUE ALLEGRO_EVENT_QUEUE;
enum _display_h_13_1_ {
  ALLEGRO_WINDOWED = 1,
  ALLEGRO_FULLSCREEN = 2,
  ALLEGRO_OPENGL = 4,
  ALLEGRO_DIRECT3D_INTERNAL = 8,
  ALLEGRO_RESIZABLE = 16,
  ALLEGRO_FRAMELESS = 32,
  ALLEGRO_NOFRAME = 32,
  ALLEGRO_GENERATE_EXPOSE_EVENTS = 64,
  ALLEGRO_OPENGL_3_0 = 128,
  ALLEGRO_OPENGL_FORWARD_COMPATIBLE = 256,
  ALLEGRO_FULLSCREEN_WINDOW = 512,
  ALLEGRO_MINIMIZED = 1024,
  ALLEGRO_PROGRAMMABLE_PIPELINE = 2048,
  ALLEGRO_GTK_TOPLEVEL_INTERNAL = 4096,
  ALLEGRO_MAXIMIZED = 8192,
  ALLEGRO_OPENGL_ES_PROFILE = 16384,
};
enum ALLEGRO_DISPLAY_OPTIONS {
  ALLEGRO_RED_SIZE = 0,
  ALLEGRO_GREEN_SIZE = 1,
  ALLEGRO_BLUE_SIZE = 2,
  ALLEGRO_ALPHA_SIZE = 3,
  ALLEGRO_RED_SHIFT = 4,
  ALLEGRO_GREEN_SHIFT = 5,
  ALLEGRO_BLUE_SHIFT = 6,
  ALLEGRO_ALPHA_SHIFT = 7,
  ALLEGRO_ACC_RED_SIZE = 8,
  ALLEGRO_ACC_GREEN_SIZE = 9,
  ALLEGRO_ACC_BLUE_SIZE = 10,
  ALLEGRO_ACC_ALPHA_SIZE = 11,
  ALLEGRO_STEREO = 12,
  ALLEGRO_AUX_BUFFERS = 13,
  ALLEGRO_COLOR_SIZE = 14,
  ALLEGRO_DEPTH_SIZE = 15,
  ALLEGRO_STENCIL_SIZE = 16,
  ALLEGRO_SAMPLE_BUFFERS = 17,
  ALLEGRO_SAMPLES = 18,
  ALLEGRO_RENDER_METHOD = 19,
  ALLEGRO_FLOAT_COLOR = 20,
  ALLEGRO_FLOAT_DEPTH = 21,
  ALLEGRO_SINGLE_BUFFER = 22,
  ALLEGRO_SWAP_METHOD = 23,
  ALLEGRO_COMPATIBLE_DISPLAY = 24,
  ALLEGRO_UPDATE_DISPLAY_REGION = 25,
  ALLEGRO_VSYNC = 26,
  ALLEGRO_MAX_BITMAP_SIZE = 27,
  ALLEGRO_SUPPORT_NPOT_BITMAP = 28,
  ALLEGRO_CAN_DRAW_INTO_BITMAP = 29,
  ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30,
  ALLEGRO_AUTO_CONVERT_BITMAPS = 31,
  ALLEGRO_SUPPORTED_ORIENTATIONS = 32,
  ALLEGRO_OPENGL_MAJOR_VERSION = 33,
  ALLEGRO_OPENGL_MINOR_VERSION = 34,
  ALLEGRO_DISPLAY_OPTIONS_COUNT = 35,
};
enum _display_h_78_1_ {
  ALLEGRO_DONTCARE = 0,
  ALLEGRO_REQUIRE = 1,
  ALLEGRO_SUGGEST = 2,
};
enum ALLEGRO_DISPLAY_ORIENTATION {
  ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN = 0,
  ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES = 1,
  ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES = 2,
  ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES = 4,
  ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES = 8,
  ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT = 5,
  ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE = 10,
  ALLEGRO_DISPLAY_ORIENTATION_ALL = 15,
  ALLEGRO_DISPLAY_ORIENTATION_FACE_UP = 16,
  ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN = 32,
};
enum _display_h_103_1_ {
  _ALLEGRO_PRIM_MAX_USER_ATTR = 10,
};
typedef struct ALLEGRO_DISPLAY ALLEGRO_DISPLAY;
struct ALLEGRO_CONFIG;
typedef struct ALLEGRO_CONFIG ALLEGRO_CONFIG;
struct ALLEGRO_CONFIG_SECTION;
typedef struct ALLEGRO_CONFIG_SECTION ALLEGRO_CONFIG_SECTION;
struct ALLEGRO_CONFIG_ENTRY;
typedef struct ALLEGRO_CONFIG_ENTRY ALLEGRO_CONFIG_ENTRY;
typedef int32_t al_fixed;
typedef struct ALLEGRO_FS_ENTRY ALLEGRO_FS_ENTRY;
struct ALLEGRO_FS_INTERFACE {
  ALLEGRO_FS_ENTRY *(*fs_create_entry)(const char *);
  void (*fs_destroy_entry)(ALLEGRO_FS_ENTRY *);
  const char *(*fs_entry_name)(ALLEGRO_FS_ENTRY *);
  _Bool (*fs_update_entry)(ALLEGRO_FS_ENTRY *);
  uint32_t (*fs_entry_mode)(ALLEGRO_FS_ENTRY *);
  unsigned long (*fs_entry_atime)(ALLEGRO_FS_ENTRY *);
  unsigned long (*fs_entry_mtime)(ALLEGRO_FS_ENTRY *);
  unsigned long (*fs_entry_ctime)(ALLEGRO_FS_ENTRY *);
  off_t (*fs_entry_size)(ALLEGRO_FS_ENTRY *);
  _Bool (*fs_entry_exists)(ALLEGRO_FS_ENTRY *);
  _Bool (*fs_remove_entry)(ALLEGRO_FS_ENTRY *);
  _Bool (*fs_open_directory)(ALLEGRO_FS_ENTRY *);
  ALLEGRO_FS_ENTRY *(*fs_read_directory)(ALLEGRO_FS_ENTRY *);
  _Bool (*fs_close_directory)(ALLEGRO_FS_ENTRY *);
  _Bool (*fs_filename_exists)(const char *);
  _Bool (*fs_remove_filename)(const char *);
  char *(*fs_get_current_directory)(void);
  _Bool (*fs_change_directory)(const char *);
  _Bool (*fs_make_directory)(const char *);
  ALLEGRO_FILE *(*fs_open_file)(ALLEGRO_FS_ENTRY *, const char *);
};
struct ALLEGRO_FS_ENTRY {
  struct ALLEGRO_FS_INTERFACE * vtable;
};
enum ALLEGRO_FILE_MODE {
  ALLEGRO_FILEMODE_READ = 1,
  ALLEGRO_FILEMODE_WRITE = 2,
  ALLEGRO_FILEMODE_EXECUTE = 4,
  ALLEGRO_FILEMODE_HIDDEN = 8,
  ALLEGRO_FILEMODE_ISFILE = 16,
  ALLEGRO_FILEMODE_ISDIR = 32,
};
typedef enum ALLEGRO_FILE_MODE ALLEGRO_FILE_MODE;
typedef struct ALLEGRO_FS_INTERFACE ALLEGRO_FS_INTERFACE;
enum ALLEGRO_FOR_EACH_FS_ENTRY_RESULT {
  ALLEGRO_FOR_EACH_FS_ENTRY_ERROR = -1,
  ALLEGRO_FOR_EACH_FS_ENTRY_OK = 0,
  ALLEGRO_FOR_EACH_FS_ENTRY_SKIP = 1,
  ALLEGRO_FOR_EACH_FS_ENTRY_STOP = 2,
};
typedef enum ALLEGRO_FOR_EACH_FS_ENTRY_RESULT ALLEGRO_FOR_EACH_FS_ENTRY_RESULT;
struct ALLEGRO_DISPLAY_MODE {
  int width;
  int height;
  int format;
  int refresh_rate;
};
typedef struct ALLEGRO_DISPLAY_MODE ALLEGRO_DISPLAY_MODE;
typedef struct ALLEGRO_JOYSTICK ALLEGRO_JOYSTICK;
struct _joystick_h_45_4_ {
  float axis[3];
};
struct ALLEGRO_JOYSTICK_STATE {
  struct _joystick_h_45_4_ stick[16];
  int button[32];
};
typedef struct ALLEGRO_JOYSTICK_STATE ALLEGRO_JOYSTICK_STATE;
enum ALLEGRO_JOYFLAGS {
  ALLEGRO_JOYFLAG_DIGITAL = 1,
  ALLEGRO_JOYFLAG_ANALOGUE = 2,
};
enum _keycodes_h_23_1_ {
  ALLEGRO_KEY_A = 1,
  ALLEGRO_KEY_B = 2,
  ALLEGRO_KEY_C = 3,
  ALLEGRO_KEY_D = 4,
  ALLEGRO_KEY_E = 5,
  ALLEGRO_KEY_F = 6,
  ALLEGRO_KEY_G = 7,
  ALLEGRO_KEY_H = 8,
  ALLEGRO_KEY_I = 9,
  ALLEGRO_KEY_J = 10,
  ALLEGRO_KEY_K = 11,
  ALLEGRO_KEY_L = 12,
  ALLEGRO_KEY_M = 13,
  ALLEGRO_KEY_N = 14,
  ALLEGRO_KEY_O = 15,
  ALLEGRO_KEY_P = 16,
  ALLEGRO_KEY_Q = 17,
  ALLEGRO_KEY_R = 18,
  ALLEGRO_KEY_S = 19,
  ALLEGRO_KEY_T = 20,
  ALLEGRO_KEY_U = 21,
  ALLEGRO_KEY_V = 22,
  ALLEGRO_KEY_W = 23,
  ALLEGRO_KEY_X = 24,
  ALLEGRO_KEY_Y = 25,
  ALLEGRO_KEY_Z = 26,
  ALLEGRO_KEY_0 = 27,
  ALLEGRO_KEY_1 = 28,
  ALLEGRO_KEY_2 = 29,
  ALLEGRO_KEY_3 = 30,
  ALLEGRO_KEY_4 = 31,
  ALLEGRO_KEY_5 = 32,
  ALLEGRO_KEY_6 = 33,
  ALLEGRO_KEY_7 = 34,
  ALLEGRO_KEY_8 = 35,
  ALLEGRO_KEY_9 = 36,
  ALLEGRO_KEY_PAD_0 = 37,
  ALLEGRO_KEY_PAD_1 = 38,
  ALLEGRO_KEY_PAD_2 = 39,
  ALLEGRO_KEY_PAD_3 = 40,
  ALLEGRO_KEY_PAD_4 = 41,
  ALLEGRO_KEY_PAD_5 = 42,
  ALLEGRO_KEY_PAD_6 = 43,
  ALLEGRO_KEY_PAD_7 = 44,
  ALLEGRO_KEY_PAD_8 = 45,
  ALLEGRO_KEY_PAD_9 = 46,
  ALLEGRO_KEY_F1 = 47,
  ALLEGRO_KEY_F2 = 48,
  ALLEGRO_KEY_F3 = 49,
  ALLEGRO_KEY_F4 = 50,
  ALLEGRO_KEY_F5 = 51,
  ALLEGRO_KEY_F6 = 52,
  ALLEGRO_KEY_F7 = 53,
  ALLEGRO_KEY_F8 = 54,
  ALLEGRO_KEY_F9 = 55,
  ALLEGRO_KEY_F10 = 56,
  ALLEGRO_KEY_F11 = 57,
  ALLEGRO_KEY_F12 = 58,
  ALLEGRO_KEY_ESCAPE = 59,
  ALLEGRO_KEY_TILDE = 60,
  ALLEGRO_KEY_MINUS = 61,
  ALLEGRO_KEY_EQUALS = 62,
  ALLEGRO_KEY_BACKSPACE = 63,
  ALLEGRO_KEY_TAB = 64,
  ALLEGRO_KEY_OPENBRACE = 65,
  ALLEGRO_KEY_CLOSEBRACE = 66,
  ALLEGRO_KEY_ENTER = 67,
  ALLEGRO_KEY_SEMICOLON = 68,
  ALLEGRO_KEY_QUOTE = 69,
  ALLEGRO_KEY_BACKSLASH = 70,
  ALLEGRO_KEY_BACKSLASH2 = 71,
  ALLEGRO_KEY_COMMA = 72,
  ALLEGRO_KEY_FULLSTOP = 73,
  ALLEGRO_KEY_SLASH = 74,
  ALLEGRO_KEY_SPACE = 75,
  ALLEGRO_KEY_INSERT = 76,
  ALLEGRO_KEY_DELETE = 77,
  ALLEGRO_KEY_HOME = 78,
  ALLEGRO_KEY_END = 79,
  ALLEGRO_KEY_PGUP = 80,
  ALLEGRO_KEY_PGDN = 81,
  ALLEGRO_KEY_LEFT = 82,
  ALLEGRO_KEY_RIGHT = 83,
  ALLEGRO_KEY_UP = 84,
  ALLEGRO_KEY_DOWN = 85,
  ALLEGRO_KEY_PAD_SLASH = 86,
  ALLEGRO_KEY_PAD_ASTERISK = 87,
  ALLEGRO_KEY_PAD_MINUS = 88,
  ALLEGRO_KEY_PAD_PLUS = 89,
  ALLEGRO_KEY_PAD_DELETE = 90,
  ALLEGRO_KEY_PAD_ENTER = 91,
  ALLEGRO_KEY_PRINTSCREEN = 92,
  ALLEGRO_KEY_PAUSE = 93,
  ALLEGRO_KEY_ABNT_C1 = 94,
  ALLEGRO_KEY_YEN = 95,
  ALLEGRO_KEY_KANA = 96,
  ALLEGRO_KEY_CONVERT = 97,
  ALLEGRO_KEY_NOCONVERT = 98,
  ALLEGRO_KEY_AT = 99,
  ALLEGRO_KEY_CIRCUMFLEX = 100,
  ALLEGRO_KEY_COLON2 = 101,
  ALLEGRO_KEY_KANJI = 102,
  ALLEGRO_KEY_PAD_EQUALS = 103,
  ALLEGRO_KEY_BACKQUOTE = 104,
  ALLEGRO_KEY_SEMICOLON2 = 105,
  ALLEGRO_KEY_COMMAND = 106,
  ALLEGRO_KEY_BACK = 107,
  ALLEGRO_KEY_VOLUME_UP = 108,
  ALLEGRO_KEY_VOLUME_DOWN = 109,
  ALLEGRO_KEY_SEARCH = 110,
  ALLEGRO_KEY_DPAD_CENTER = 111,
  ALLEGRO_KEY_BUTTON_X = 112,
  ALLEGRO_KEY_BUTTON_Y = 113,
  ALLEGRO_KEY_DPAD_UP = 114,
  ALLEGRO_KEY_DPAD_DOWN = 115,
  ALLEGRO_KEY_DPAD_LEFT = 116,
  ALLEGRO_KEY_DPAD_RIGHT = 117,
  ALLEGRO_KEY_SELECT = 118,
  ALLEGRO_KEY_START = 119,
  ALLEGRO_KEY_BUTTON_L1 = 120,
  ALLEGRO_KEY_BUTTON_R1 = 121,
  ALLEGRO_KEY_BUTTON_L2 = 122,
  ALLEGRO_KEY_BUTTON_R2 = 123,
  ALLEGRO_KEY_BUTTON_A = 124,
  ALLEGRO_KEY_BUTTON_B = 125,
  ALLEGRO_KEY_THUMBL = 126,
  ALLEGRO_KEY_THUMBR = 127,
  ALLEGRO_KEY_UNKNOWN = 128,
  ALLEGRO_KEY_MODIFIERS = 215,
  ALLEGRO_KEY_LSHIFT = 215,
  ALLEGRO_KEY_RSHIFT = 216,
  ALLEGRO_KEY_LCTRL = 217,
  ALLEGRO_KEY_RCTRL = 218,
  ALLEGRO_KEY_ALT = 219,
  ALLEGRO_KEY_ALTGR = 220,
  ALLEGRO_KEY_LWIN = 221,
  ALLEGRO_KEY_RWIN = 222,
  ALLEGRO_KEY_MENU = 223,
  ALLEGRO_KEY_SCROLLLOCK = 224,
  ALLEGRO_KEY_NUMLOCK = 225,
  ALLEGRO_KEY_CAPSLOCK = 226,
  ALLEGRO_KEY_MAX = 227,
};
enum _keycodes_h_192_1_ {
  ALLEGRO_KEYMOD_SHIFT = 1,
  ALLEGRO_KEYMOD_CTRL = 2,
  ALLEGRO_KEYMOD_ALT = 4,
  ALLEGRO_KEYMOD_LWIN = 8,
  ALLEGRO_KEYMOD_RWIN = 16,
  ALLEGRO_KEYMOD_MENU = 32,
  ALLEGRO_KEYMOD_ALTGR = 64,
  ALLEGRO_KEYMOD_COMMAND = 128,
  ALLEGRO_KEYMOD_SCROLLLOCK = 256,
  ALLEGRO_KEYMOD_NUMLOCK = 512,
  ALLEGRO_KEYMOD_CAPSLOCK = 1024,
  ALLEGRO_KEYMOD_INALTSEQ = 2048,
  ALLEGRO_KEYMOD_ACCENT1 = 4096,
  ALLEGRO_KEYMOD_ACCENT2 = 8192,
  ALLEGRO_KEYMOD_ACCENT3 = 16384,
  ALLEGRO_KEYMOD_ACCENT4 = 32768,
};
typedef struct ALLEGRO_KEYBOARD ALLEGRO_KEYBOARD;
struct ALLEGRO_KEYBOARD_STATE {
  struct ALLEGRO_DISPLAY * display;
  unsigned int __key_down__internal__[8];
};
typedef struct ALLEGRO_KEYBOARD_STATE ALLEGRO_KEYBOARD_STATE;
typedef struct ALLEGRO_MOUSE ALLEGRO_MOUSE;
struct ALLEGRO_MOUSE_STATE {
  int x;
  int y;
  int z;
  int w;
  int more_axes[4];
  int buttons;
  float pressure;
  struct ALLEGRO_DISPLAY * display;
};
typedef struct ALLEGRO_MOUSE_STATE ALLEGRO_MOUSE_STATE;
typedef struct ALLEGRO_TOUCH_INPUT ALLEGRO_TOUCH_INPUT;
struct ALLEGRO_TOUCH_STATE {
  int id;
  float x;
  float y;
  float dx;
  float dy;
  _Bool primary;
  struct ALLEGRO_DISPLAY * display;
};
typedef struct ALLEGRO_TOUCH_STATE ALLEGRO_TOUCH_STATE;
struct ALLEGRO_TOUCH_INPUT_STATE {
  ALLEGRO_TOUCH_STATE touches[16];
};
typedef struct ALLEGRO_TOUCH_INPUT_STATE ALLEGRO_TOUCH_INPUT_STATE;
struct ALLEGRO_MEMORY_INTERFACE {
  void *(*mi_malloc)(size_t, int, const char *, const char *);
  void (*mi_free)(void *, int, const char *, const char *);
  void *(*mi_realloc)(void *, size_t, int, const char *, const char *);
  void *(*mi_calloc)(size_t, size_t, int, const char *, const char *);
};
typedef struct ALLEGRO_MEMORY_INTERFACE ALLEGRO_MEMORY_INTERFACE;
struct ALLEGRO_MONITOR_INFO {
  int x1;
  int y1;
  int x2;
  int y2;
};
typedef struct ALLEGRO_MONITOR_INFO ALLEGRO_MONITOR_INFO;
enum _monitor_h_21_1_ {
  ALLEGRO_DEFAULT_DISPLAY_ADAPTER = -1,
};
struct ALLEGRO_MOUSE_CURSOR;
typedef struct ALLEGRO_MOUSE_CURSOR ALLEGRO_MOUSE_CURSOR;
enum ALLEGRO_SYSTEM_MOUSE_CURSOR {
  ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE = 0,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT = 1,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW = 2,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY = 3,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION = 4,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT = 5,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE = 6,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N = 7,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W = 8,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S = 9,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E = 10,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW = 11,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW = 12,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE = 13,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE = 14,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS = 15,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION = 16,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK = 17,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT = 18,
  ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE = 19,
  ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS = 20,
};
typedef enum ALLEGRO_SYSTEM_MOUSE_CURSOR ALLEGRO_SYSTEM_MOUSE_CURSOR;
enum ALLEGRO_RENDER_STATE {
  ALLEGRO_ALPHA_TEST = 16,
  ALLEGRO_WRITE_MASK = 17,
  ALLEGRO_DEPTH_TEST = 18,
  ALLEGRO_DEPTH_FUNCTION = 19,
  ALLEGRO_ALPHA_FUNCTION = 20,
  ALLEGRO_ALPHA_TEST_VALUE = 21,
};
typedef enum ALLEGRO_RENDER_STATE ALLEGRO_RENDER_STATE;
enum ALLEGRO_RENDER_FUNCTION {
  ALLEGRO_RENDER_NEVER = 0,
  ALLEGRO_RENDER_ALWAYS = 1,
  ALLEGRO_RENDER_LESS = 2,
  ALLEGRO_RENDER_EQUAL = 3,
  ALLEGRO_RENDER_LESS_EQUAL = 4,
  ALLEGRO_RENDER_GREATER = 5,
  ALLEGRO_RENDER_NOT_EQUAL = 6,
  ALLEGRO_RENDER_GREATER_EQUAL = 7,
};
typedef enum ALLEGRO_RENDER_FUNCTION ALLEGRO_RENDER_FUNCTION;
enum ALLEGRO_WRITE_MASK_FLAGS {
  ALLEGRO_MASK_RED = 1,
  ALLEGRO_MASK_GREEN = 2,
  ALLEGRO_MASK_BLUE = 4,
  ALLEGRO_MASK_ALPHA = 8,
  ALLEGRO_MASK_DEPTH = 16,
  ALLEGRO_MASK_RGB = 7,
  ALLEGRO_MASK_RGBA = 15,
};
typedef enum ALLEGRO_WRITE_MASK_FLAGS ALLEGRO_WRITE_MASK_FLAGS;
struct ALLEGRO_TRANSFORM {
  float m[4][4];
};
typedef struct ALLEGRO_TRANSFORM ALLEGRO_TRANSFORM;
struct ALLEGRO_SHADER;
typedef struct ALLEGRO_SHADER ALLEGRO_SHADER;
enum ALLEGRO_SHADER_TYPE {
  ALLEGRO_VERTEX_SHADER = 1,
  ALLEGRO_PIXEL_SHADER = 2,
};
typedef enum ALLEGRO_SHADER_TYPE ALLEGRO_SHADER_TYPE;
enum ALLEGRO_SHADER_PLATFORM {
  ALLEGRO_SHADER_AUTO = 0,
  ALLEGRO_SHADER_GLSL = 1,
  ALLEGRO_SHADER_HLSL = 2,
};
typedef enum ALLEGRO_SHADER_PLATFORM ALLEGRO_SHADER_PLATFORM;
struct ALLEGRO_SYSTEM;
typedef struct ALLEGRO_SYSTEM ALLEGRO_SYSTEM;
enum ALLEGRO_SYSTEM_ID {
  ALLEGRO_SYSTEM_ID_UNKNOWN = 0,
  ALLEGRO_SYSTEM_ID_XGLX = 1481067608,
  ALLEGRO_SYSTEM_ID_WINDOWS = 1464421956,
  ALLEGRO_SYSTEM_ID_MACOSX = 1330862112,
  ALLEGRO_SYSTEM_ID_ANDROID = 1095648338,
  ALLEGRO_SYSTEM_ID_IPHONE = 1229998159,
  ALLEGRO_SYSTEM_ID_GP2XWIZ = 1464424992,
  ALLEGRO_SYSTEM_ID_RASPBERRYPI = 1380012880,
  ALLEGRO_SYSTEM_ID_SDL = 1396984882,
};
typedef enum ALLEGRO_SYSTEM_ID ALLEGRO_SYSTEM_ID;
enum _system_h_39_1_ {
  ALLEGRO_RESOURCES_PATH = 0,
  ALLEGRO_TEMP_PATH = 1,
  ALLEGRO_USER_DATA_PATH = 2,
  ALLEGRO_USER_HOME_PATH = 3,
  ALLEGRO_USER_SETTINGS_PATH = 4,
  ALLEGRO_USER_DOCUMENTS_PATH = 5,
  ALLEGRO_EXENAME_PATH = 6,
  ALLEGRO_LAST_PATH = 7,
};
struct ALLEGRO_THREAD;
typedef struct ALLEGRO_THREAD ALLEGRO_THREAD;
struct ALLEGRO_MUTEX;
typedef struct ALLEGRO_MUTEX ALLEGRO_MUTEX;
struct ALLEGRO_COND;
typedef struct ALLEGRO_COND ALLEGRO_COND;
typedef struct ALLEGRO_TIMER ALLEGRO_TIMER;
enum ALLEGRO_STATE_FLAGS {
  ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS = 1,
  ALLEGRO_STATE_NEW_BITMAP_PARAMETERS = 2,
  ALLEGRO_STATE_DISPLAY = 4,
  ALLEGRO_STATE_TARGET_BITMAP = 8,
  ALLEGRO_STATE_BLENDER = 16,
  ALLEGRO_STATE_NEW_FILE_INTERFACE = 32,
  ALLEGRO_STATE_TRANSFORM = 64,
  ALLEGRO_STATE_PROJECTION_TRANSFORM = 256,
  ALLEGRO_STATE_BITMAP = 10,
  ALLEGRO_STATE_ALL = 65535,
};
typedef enum ALLEGRO_STATE_FLAGS ALLEGRO_STATE_FLAGS;
struct ALLEGRO_STATE {
  char _tls[1024];
};
typedef struct ALLEGRO_STATE ALLEGRO_STATE;
uint32_t al_get_allegro_version();
int al_run_main(int argc, char ** argv, int (*)(int, char **));
double al_get_time();
void al_rest(double seconds);
void al_init_timeout(ALLEGRO_TIMEOUT * timeout, double seconds);
ALLEGRO_COLOR al_map_rgb(unsigned char r, unsigned char g, unsigned char b);
ALLEGRO_COLOR al_map_rgba(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
ALLEGRO_COLOR al_map_rgb_f(float r, float g, float b);
ALLEGRO_COLOR al_map_rgba_f(float r, float g, float b, float a);
ALLEGRO_COLOR al_premul_rgba(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
ALLEGRO_COLOR al_premul_rgba_f(float r, float g, float b, float a);
void al_unmap_rgb(ALLEGRO_COLOR color, unsigned char * r, unsigned char * g, unsigned char * b);
void al_unmap_rgba(ALLEGRO_COLOR color, unsigned char * r, unsigned char * g, unsigned char * b, unsigned char * a);
void al_unmap_rgb_f(ALLEGRO_COLOR color, float * r, float * g, float * b);
void al_unmap_rgba_f(ALLEGRO_COLOR color, float * r, float * g, float * b, float * a);
int al_get_pixel_size(int format);
int al_get_pixel_format_bits(int format);
int al_get_pixel_block_size(int format);
int al_get_pixel_block_width(int format);
int al_get_pixel_block_height(int format);
void al_set_new_bitmap_format(int format);
void al_set_new_bitmap_flags(int flags);
int al_get_new_bitmap_format();
int al_get_new_bitmap_flags();
void al_add_new_bitmap_flag(int flag);
int al_get_bitmap_width(ALLEGRO_BITMAP * bitmap);
int al_get_bitmap_height(ALLEGRO_BITMAP * bitmap);
int al_get_bitmap_format(ALLEGRO_BITMAP * bitmap);
int al_get_bitmap_flags(ALLEGRO_BITMAP * bitmap);
ALLEGRO_BITMAP * al_create_bitmap(int w, int h);
void al_destroy_bitmap(ALLEGRO_BITMAP * bitmap);
void al_put_pixel(int x, int y, ALLEGRO_COLOR color);
void al_put_blended_pixel(int x, int y, ALLEGRO_COLOR color);
ALLEGRO_COLOR al_get_pixel(ALLEGRO_BITMAP * bitmap, int x, int y);
void al_convert_mask_to_alpha(ALLEGRO_BITMAP * bitmap, ALLEGRO_COLOR mask_color);
void al_set_clipping_rectangle(int x, int y, int width, int height);
void al_reset_clipping_rectangle();
void al_get_clipping_rectangle(int * x, int * y, int * w, int * h);
ALLEGRO_BITMAP * al_create_sub_bitmap(ALLEGRO_BITMAP * parent, int x, int y, int w, int h);
_Bool al_is_sub_bitmap(ALLEGRO_BITMAP * bitmap);
ALLEGRO_BITMAP * al_get_parent_bitmap(ALLEGRO_BITMAP * bitmap);
int al_get_bitmap_x(ALLEGRO_BITMAP * bitmap);
int al_get_bitmap_y(ALLEGRO_BITMAP * bitmap);
void al_reparent_bitmap(ALLEGRO_BITMAP * bitmap, ALLEGRO_BITMAP * parent, int x, int y, int w, int h);
ALLEGRO_BITMAP * al_clone_bitmap(ALLEGRO_BITMAP * bitmap);
void al_convert_bitmap(ALLEGRO_BITMAP * bitmap);
void al_convert_memory_bitmaps();
void al_draw_bitmap(ALLEGRO_BITMAP * bitmap, float dx, float dy, int flags);
void al_draw_bitmap_region(ALLEGRO_BITMAP * bitmap, float sx, float sy, float sw, float sh, float dx, float dy, int flags);
void al_draw_scaled_bitmap(ALLEGRO_BITMAP * bitmap, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);
void al_draw_rotated_bitmap(ALLEGRO_BITMAP * bitmap, float cx, float cy, float dx, float dy, float angle, int flags);
void al_draw_scaled_rotated_bitmap(ALLEGRO_BITMAP * bitmap, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
void al_draw_tinted_bitmap(ALLEGRO_BITMAP * bitmap, ALLEGRO_COLOR tint, float dx, float dy, int flags);
void al_draw_tinted_bitmap_region(ALLEGRO_BITMAP * bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, int flags);
void al_draw_tinted_scaled_bitmap(ALLEGRO_BITMAP * bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);
void al_draw_tinted_rotated_bitmap(ALLEGRO_BITMAP * bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float angle, int flags);
void al_draw_tinted_scaled_rotated_bitmap(ALLEGRO_BITMAP * bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
void al_draw_tinted_scaled_rotated_bitmap_region(ALLEGRO_BITMAP * bitmap, float sx, float sy, float sw, float sh, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
ALLEGRO_USTR * al_ustr_new(const char * s);
ALLEGRO_USTR * al_ustr_new_from_buffer(const char * s, size_t size);
ALLEGRO_USTR * al_ustr_newf(const char * fmt);
void al_ustr_free(ALLEGRO_USTR * us);
const char * al_cstr(ALLEGRO_USTR * us);
void al_ustr_to_buffer(ALLEGRO_USTR * us, char * buffer, int size);
char * al_cstr_dup(ALLEGRO_USTR * us);
ALLEGRO_USTR * al_ustr_dup(ALLEGRO_USTR * us);
ALLEGRO_USTR * al_ustr_dup_substr(ALLEGRO_USTR * us, int start_pos, int end_pos);
ALLEGRO_USTR * al_ustr_empty_string();
ALLEGRO_USTR * al_ref_cstr(ALLEGRO_USTR_INFO * info, const char * s);
ALLEGRO_USTR * al_ref_buffer(ALLEGRO_USTR_INFO * info, const char * s, size_t size);
ALLEGRO_USTR * al_ref_ustr(ALLEGRO_USTR_INFO * info, ALLEGRO_USTR * us, int start_pos, int end_pos);
size_t al_ustr_size(ALLEGRO_USTR * us);
size_t al_ustr_length(ALLEGRO_USTR * us);
int al_ustr_offset(ALLEGRO_USTR * us, int index);
_Bool al_ustr_next(ALLEGRO_USTR * us, int * pos);
_Bool al_ustr_prev(ALLEGRO_USTR * us, int * pos);
int32_t al_ustr_get(ALLEGRO_USTR * us, int pos);
int32_t al_ustr_get_next(ALLEGRO_USTR * us, int * pos);
int32_t al_ustr_prev_get(ALLEGRO_USTR * us, int * pos);
_Bool al_ustr_insert(ALLEGRO_USTR * us1, int pos, ALLEGRO_USTR * us2);
_Bool al_ustr_insert_cstr(ALLEGRO_USTR * us, int pos, const char * us2);
size_t al_ustr_insert_chr(ALLEGRO_USTR * us, int pos, int32_t c);
_Bool al_ustr_append(ALLEGRO_USTR * us1, ALLEGRO_USTR * us2);
_Bool al_ustr_append_cstr(ALLEGRO_USTR * us, const char * s);
size_t al_ustr_append_chr(ALLEGRO_USTR * us, int32_t c);
_Bool al_ustr_appendf(ALLEGRO_USTR * us, const char * fmt);
_Bool al_ustr_vappendf(ALLEGRO_USTR * us, const char * fmt, va_list ap);
_Bool al_ustr_remove_chr(ALLEGRO_USTR * us, int pos);
_Bool al_ustr_remove_range(ALLEGRO_USTR * us, int start_pos, int end_pos);
_Bool al_ustr_truncate(ALLEGRO_USTR * us, int start_pos);
_Bool al_ustr_ltrim_ws(ALLEGRO_USTR * us);
_Bool al_ustr_rtrim_ws(ALLEGRO_USTR * us);
_Bool al_ustr_trim_ws(ALLEGRO_USTR * us);
_Bool al_ustr_assign(ALLEGRO_USTR * us1, ALLEGRO_USTR * us2);
_Bool al_ustr_assign_substr(ALLEGRO_USTR * us1, ALLEGRO_USTR * us2, int start_pos, int end_pos);
_Bool al_ustr_assign_cstr(ALLEGRO_USTR * us1, const char * s);
size_t al_ustr_set_chr(ALLEGRO_USTR * us, int pos, int32_t c);
_Bool al_ustr_replace_range(ALLEGRO_USTR * us1, int start_pos1, int end_pos1, ALLEGRO_USTR * us2);
int al_ustr_find_chr(ALLEGRO_USTR * us, int start_pos, int32_t c);
int al_ustr_rfind_chr(ALLEGRO_USTR * us, int start_pos, int32_t c);
int al_ustr_find_set(ALLEGRO_USTR * us, int start_pos, ALLEGRO_USTR * accept);
int al_ustr_find_set_cstr(ALLEGRO_USTR * us, int start_pos, const char * accept);
int al_ustr_find_cset(ALLEGRO_USTR * us, int start_pos, ALLEGRO_USTR * reject);
int al_ustr_find_cset_cstr(ALLEGRO_USTR * us, int start_pos, const char * reject);
int al_ustr_find_str(ALLEGRO_USTR * haystack, int start_pos, ALLEGRO_USTR * needle);
int al_ustr_find_cstr(ALLEGRO_USTR * haystack, int start_pos, const char * needle);
int al_ustr_rfind_str(ALLEGRO_USTR * haystack, int start_pos, ALLEGRO_USTR * needle);
int al_ustr_rfind_cstr(ALLEGRO_USTR * haystack, int start_pos, const char * needle);
_Bool al_ustr_find_replace(ALLEGRO_USTR * us, int start_pos, ALLEGRO_USTR * find, ALLEGRO_USTR * replace);
_Bool al_ustr_find_replace_cstr(ALLEGRO_USTR * us, int start_pos, const char * find, const char * replace);
_Bool al_ustr_equal(ALLEGRO_USTR * us1, ALLEGRO_USTR * us2);
int al_ustr_compare(ALLEGRO_USTR * u, ALLEGRO_USTR * v);
int al_ustr_ncompare(ALLEGRO_USTR * us1, ALLEGRO_USTR * us2, int n);
_Bool al_ustr_has_prefix(ALLEGRO_USTR * u, ALLEGRO_USTR * v);
_Bool al_ustr_has_prefix_cstr(ALLEGRO_USTR * u, const char * s);
_Bool al_ustr_has_suffix(ALLEGRO_USTR * u, ALLEGRO_USTR * v);
_Bool al_ustr_has_suffix_cstr(ALLEGRO_USTR * us1, const char * s);
size_t al_utf8_width(int32_t c);
size_t al_utf8_encode(char s[], int32_t c);
ALLEGRO_USTR * al_ustr_new_from_utf16(const uint16_t * s);
size_t al_ustr_size_utf16(ALLEGRO_USTR * us);
size_t al_ustr_encode_utf16(ALLEGRO_USTR * us, const uint16_t * s, size_t n);
size_t al_utf16_width(int c);
size_t al_utf16_encode(const uint16_t s[], int32_t c);
ALLEGRO_PATH * al_create_path(const char * str);
ALLEGRO_PATH * al_create_path_for_directory(const char * str);
ALLEGRO_PATH * al_clone_path(ALLEGRO_PATH * path);
int al_get_path_num_components(ALLEGRO_PATH * path);
const char * al_get_path_component(ALLEGRO_PATH * path, int i);
void al_replace_path_component(ALLEGRO_PATH * path, int i, const char * s);
void al_remove_path_component(ALLEGRO_PATH * path, int i);
void al_insert_path_component(ALLEGRO_PATH * path, int i, const char * s);
const char * al_get_path_tail(ALLEGRO_PATH * path);
void al_drop_path_tail(ALLEGRO_PATH * path);
void al_append_path_component(ALLEGRO_PATH * path, const char * s);
_Bool al_join_paths(ALLEGRO_PATH * path, ALLEGRO_PATH * tail);
_Bool al_rebase_path(ALLEGRO_PATH * head, ALLEGRO_PATH * tail);
const char * al_path_cstr(ALLEGRO_PATH * path, char delim);
ALLEGRO_USTR * al_path_ustr(ALLEGRO_PATH * path, char delim);
void al_destroy_path(ALLEGRO_PATH * path);
void al_set_path_drive(ALLEGRO_PATH * path, const char * drive);
const char * al_get_path_drive(ALLEGRO_PATH * path);
void al_set_path_filename(ALLEGRO_PATH * path, const char * filename);
const char * al_get_path_filename(ALLEGRO_PATH * path);
const char * al_get_path_extension(ALLEGRO_PATH * path);
_Bool al_set_path_extension(ALLEGRO_PATH * path, const char * extension);
const char * al_get_path_basename(ALLEGRO_PATH * path);
_Bool al_make_path_canonical(ALLEGRO_PATH * path);
ALLEGRO_FILE * al_fopen(const char * path, const char * mode);
ALLEGRO_FILE * al_fopen_interface(ALLEGRO_FILE_INTERFACE * vt, const char * path, const char * mode);
ALLEGRO_FILE * al_create_file_handle(ALLEGRO_FILE_INTERFACE * vt, void * userdata);
_Bool al_fclose(ALLEGRO_FILE * f);
size_t al_fread(ALLEGRO_FILE * f, void * ptr, size_t size);
size_t al_fwrite(ALLEGRO_FILE * f, const void * ptr, size_t size);
_Bool al_fflush(ALLEGRO_FILE * f);
int64_t al_ftell(ALLEGRO_FILE * f);
_Bool al_fseek(ALLEGRO_FILE * f, int64_t offset, int whence);
_Bool al_feof(ALLEGRO_FILE * f);
int al_ferror(ALLEGRO_FILE * f);
const char * al_ferrmsg(ALLEGRO_FILE * f);
void al_fclearerr(ALLEGRO_FILE * f);
int al_fungetc(ALLEGRO_FILE * f, int c);
int64_t al_fsize(ALLEGRO_FILE * f);
int al_fgetc(ALLEGRO_FILE * f);
int al_fputc(ALLEGRO_FILE * f, int c);
int16_t al_fread16le(ALLEGRO_FILE * f);
int16_t al_fread16be(ALLEGRO_FILE * f);
size_t al_fwrite16le(ALLEGRO_FILE * f, int16_t w);
size_t al_fwrite16be(ALLEGRO_FILE * f, int16_t w);
int32_t al_fread32le(ALLEGRO_FILE * f);
int32_t al_fread32be(ALLEGRO_FILE * f);
size_t al_fwrite32le(ALLEGRO_FILE * f, int32_t l);
size_t al_fwrite32be(ALLEGRO_FILE * f, int32_t l);
char * al_fgets(ALLEGRO_FILE * f, char *const p, size_t max);
ALLEGRO_USTR * al_fget_ustr(ALLEGRO_FILE * f);
int al_fputs(ALLEGRO_FILE * f, const char * p);
int al_fprintf(ALLEGRO_FILE * f, const char * format);
int al_vfprintf(ALLEGRO_FILE * f, const char * format, va_list args);
ALLEGRO_FILE * al_fopen_fd(int fd, const char * mode);
ALLEGRO_FILE * al_make_temp_file(const char * tmpl, ALLEGRO_PATH ** ret_path);
ALLEGRO_FILE * al_fopen_slice(ALLEGRO_FILE * fp, size_t initial_size, const char * mode);
ALLEGRO_FILE_INTERFACE * al_get_new_file_interface();
void al_set_new_file_interface(ALLEGRO_FILE_INTERFACE * file_interface);
void al_set_standard_file_interface();
void * al_get_file_userdata(ALLEGRO_FILE * f);
_Bool al_register_bitmap_loader(const char * ext, ALLEGRO_IIO_LOADER_FUNCTION loader);
_Bool al_register_bitmap_saver(const char * ext, ALLEGRO_IIO_SAVER_FUNCTION saver);
_Bool al_register_bitmap_loader_f(const char * ext, ALLEGRO_IIO_FS_LOADER_FUNCTION fs_loader);
_Bool al_register_bitmap_saver_f(const char * ext, ALLEGRO_IIO_FS_SAVER_FUNCTION fs_saver);
_Bool al_register_bitmap_identifier(const char * ext, ALLEGRO_IIO_IDENTIFIER_FUNCTION identifier);
ALLEGRO_BITMAP * al_load_bitmap(const char * filename);
ALLEGRO_BITMAP * al_load_bitmap_flags(const char * filename, int flags);
ALLEGRO_BITMAP * al_load_bitmap_f(ALLEGRO_FILE * fp, const char * ident);
ALLEGRO_BITMAP * al_load_bitmap_flags_f(ALLEGRO_FILE * fp, const char * ident, int flags);
_Bool al_save_bitmap(const char * filename, ALLEGRO_BITMAP * bitmap);
_Bool al_save_bitmap_f(ALLEGRO_FILE * fp, const char * ident, ALLEGRO_BITMAP * bitmap);
const char * al_identify_bitmap_f(ALLEGRO_FILE * fp);
const char * al_identify_bitmap(const char * filename);
ALLEGRO_LOCKED_REGION * al_lock_bitmap(ALLEGRO_BITMAP * bitmap, int format, int flags);
ALLEGRO_LOCKED_REGION * al_lock_bitmap_region(ALLEGRO_BITMAP * bitmap, int x, int y, int width, int height, int format, int flags);
ALLEGRO_LOCKED_REGION * al_lock_bitmap_blocked(ALLEGRO_BITMAP * bitmap, int flags);
ALLEGRO_LOCKED_REGION * al_lock_bitmap_region_blocked(ALLEGRO_BITMAP * bitmap, int x_block, int y_block, int width_block, int height_block, int flags);
void al_unlock_bitmap(ALLEGRO_BITMAP * bitmap);
_Bool al_is_bitmap_locked(ALLEGRO_BITMAP * bitmap);
void al_set_blender(int op, int source, int dest);
void al_set_blend_color(ALLEGRO_COLOR color);
void al_get_blender(int * op, int * source, int * dest);
ALLEGRO_COLOR al_get_blend_color();
void al_set_separate_blender(int op, int source, int dest, int alpha_op, int alpha_source, int alpha_dest);
void al_get_separate_blender(int * op, int * source, int * dest, int * alpha_op, int * alpha_src, int * alpha_dest);
void al_init_user_event_source(ALLEGRO_EVENT_SOURCE * );
void al_destroy_user_event_source(ALLEGRO_EVENT_SOURCE * );
_Bool al_emit_user_event(ALLEGRO_EVENT_SOURCE * , ALLEGRO_EVENT * , void (*dtor)(ALLEGRO_USER_EVENT *));
void al_unref_user_event(ALLEGRO_USER_EVENT * );
void al_set_event_source_data(ALLEGRO_EVENT_SOURCE * , intptr_t data);
intptr_t al_get_event_source_data(ALLEGRO_EVENT_SOURCE * );
ALLEGRO_EVENT_QUEUE * al_create_event_queue();
void al_destroy_event_queue(ALLEGRO_EVENT_QUEUE * );
_Bool al_is_event_source_registered(ALLEGRO_EVENT_QUEUE * , ALLEGRO_EVENT_SOURCE * );
void al_register_event_source(ALLEGRO_EVENT_QUEUE * , ALLEGRO_EVENT_SOURCE * );
void al_unregister_event_source(ALLEGRO_EVENT_QUEUE * , ALLEGRO_EVENT_SOURCE * );
void al_pause_event_queue(ALLEGRO_EVENT_QUEUE * , _Bool );
_Bool al_is_event_queue_paused(ALLEGRO_EVENT_QUEUE * );
_Bool al_is_event_queue_empty(ALLEGRO_EVENT_QUEUE * );
_Bool al_get_next_event(ALLEGRO_EVENT_QUEUE * , ALLEGRO_EVENT * ret_event);
_Bool al_peek_next_event(ALLEGRO_EVENT_QUEUE * , ALLEGRO_EVENT * ret_event);
_Bool al_drop_next_event(ALLEGRO_EVENT_QUEUE * );
void al_flush_event_queue(ALLEGRO_EVENT_QUEUE * );
void al_wait_for_event(ALLEGRO_EVENT_QUEUE * , ALLEGRO_EVENT * ret_event);
_Bool al_wait_for_event_timed(ALLEGRO_EVENT_QUEUE * , ALLEGRO_EVENT * ret_event, float secs);
_Bool al_wait_for_event_until(ALLEGRO_EVENT_QUEUE * queue, ALLEGRO_EVENT * ret_event, ALLEGRO_TIMEOUT * timeout);
void al_set_new_display_refresh_rate(int refresh_rate);
void al_set_new_display_flags(int flags);
int al_get_new_display_refresh_rate();
int al_get_new_display_flags();
void al_set_new_window_title(const char * title);
const char * al_get_new_window_title();
int al_get_display_width(ALLEGRO_DISPLAY * display);
int al_get_display_height(ALLEGRO_DISPLAY * display);
int al_get_display_format(ALLEGRO_DISPLAY * display);
int al_get_display_refresh_rate(ALLEGRO_DISPLAY * display);
int al_get_display_flags(ALLEGRO_DISPLAY * display);
int al_get_display_orientation(ALLEGRO_DISPLAY * display);
_Bool al_set_display_flag(ALLEGRO_DISPLAY * display, int flag, _Bool onoff);
ALLEGRO_DISPLAY * al_create_display(int w, int h);
void al_destroy_display(ALLEGRO_DISPLAY * display);
ALLEGRO_DISPLAY * al_get_current_display();
void al_set_target_bitmap(ALLEGRO_BITMAP * bitmap);
void al_set_target_backbuffer(ALLEGRO_DISPLAY * display);
ALLEGRO_BITMAP * al_get_backbuffer(ALLEGRO_DISPLAY * display);
ALLEGRO_BITMAP * al_get_target_bitmap();
_Bool al_acknowledge_resize(ALLEGRO_DISPLAY * display);
_Bool al_resize_display(ALLEGRO_DISPLAY * display, int width, int height);
void al_flip_display();
void al_update_display_region(int x, int y, int width, int height);
_Bool al_is_compatible_bitmap(ALLEGRO_BITMAP * bitmap);
_Bool al_wait_for_vsync();
ALLEGRO_EVENT_SOURCE * al_get_display_event_source(ALLEGRO_DISPLAY * display);
void al_set_display_icon(ALLEGRO_DISPLAY * display, ALLEGRO_BITMAP * icon);
void al_set_display_icons(ALLEGRO_DISPLAY * display, int num_icons, ALLEGRO_BITMAP *icons[]);
int al_get_new_display_adapter();
void al_set_new_display_adapter(int adapter);
void al_set_new_window_position(int x, int y);
void al_get_new_window_position(int * x, int * y);
void al_set_window_position(ALLEGRO_DISPLAY * display, int x, int y);
void al_get_window_position(ALLEGRO_DISPLAY * display, int * x, int * y);
_Bool al_set_window_constraints(ALLEGRO_DISPLAY * display, int min_w, int min_h, int max_w, int max_h);
_Bool al_get_window_constraints(ALLEGRO_DISPLAY * display, int * min_w, int * min_h, int * max_w, int * max_h);
void al_apply_window_constraints(ALLEGRO_DISPLAY * display, _Bool onoff);
void al_set_window_title(ALLEGRO_DISPLAY * display, const char * title);
void al_set_new_display_option(int option, int value, int importance);
int al_get_new_display_option(int option, int * importance);
void al_reset_new_display_options();
void al_set_display_option(ALLEGRO_DISPLAY * display, int option, int value);
int al_get_display_option(ALLEGRO_DISPLAY * display, int option);
void al_hold_bitmap_drawing(_Bool hold);
_Bool al_is_bitmap_drawing_held();
void al_acknowledge_drawing_halt(ALLEGRO_DISPLAY * display);
void al_acknowledge_drawing_resume(ALLEGRO_DISPLAY * display);
char * al_get_clipboard_text(ALLEGRO_DISPLAY * display);
_Bool al_set_clipboard_text(ALLEGRO_DISPLAY * display, const char * text);
_Bool al_clipboard_has_text(ALLEGRO_DISPLAY * display);
ALLEGRO_CONFIG * al_create_config();
void al_add_config_section(ALLEGRO_CONFIG * config, const char * name);
void al_set_config_value(ALLEGRO_CONFIG * config, const char * section, const char * key, const char * value);
void al_add_config_comment(ALLEGRO_CONFIG * config, const char * section, const char * comment);
const char * al_get_config_value(ALLEGRO_CONFIG * config, const char * section, const char * key);
ALLEGRO_CONFIG * al_load_config_file(const char * filename);
ALLEGRO_CONFIG * al_load_config_file_f(ALLEGRO_FILE * filename);
_Bool al_save_config_file(const char * filename, ALLEGRO_CONFIG * config);
_Bool al_save_config_file_f(ALLEGRO_FILE * file, ALLEGRO_CONFIG * config);
void al_merge_config_into(ALLEGRO_CONFIG * master, ALLEGRO_CONFIG * add);
ALLEGRO_CONFIG * al_merge_config(ALLEGRO_CONFIG * cfg1, ALLEGRO_CONFIG * cfg2);
void al_destroy_config(ALLEGRO_CONFIG * config);
_Bool al_remove_config_section(ALLEGRO_CONFIG * config, const char * section);
_Bool al_remove_config_key(ALLEGRO_CONFIG * config, const char * section, const char * key);
const char * al_get_first_config_section(ALLEGRO_CONFIG * config, ALLEGRO_CONFIG_SECTION ** iterator);
const char * al_get_next_config_section(ALLEGRO_CONFIG_SECTION ** iterator);
const char * al_get_first_config_entry(ALLEGRO_CONFIG * config, const char * section, ALLEGRO_CONFIG_ENTRY ** iterator);
const char * al_get_next_config_entry(ALLEGRO_CONFIG_ENTRY ** iterator);
int al_get_cpu_count();
int al_get_ram_size();
_Bool _al_trace_prefix(const char * channel, int level, const char * file, int line, const char * function);
void _al_trace_suffix(const char * msg);
void (*_al_user_assert_handler)(const char *, const char *, int, const char *);
void al_register_assert_handler(void (*handler)(const char *, const char *, int, const char *));
void al_register_trace_handler(void (*handler)(const char *));
void al_clear_to_color(ALLEGRO_COLOR color);
void al_clear_depth_buffer(float x);
void al_draw_pixel(float x, float y, ALLEGRO_COLOR color);
int al_get_errno();
void al_set_errno(int errnum);
al_fixed al_fixtorad_r;
al_fixed al_radtofix_r;
al_fixed al_fixsqrt(al_fixed x);
al_fixed al_fixhypot(al_fixed x, al_fixed y);
al_fixed al_fixatan(al_fixed x);
al_fixed al_fixatan2(al_fixed y, al_fixed x);
al_fixed _al_fix_cos_tbl[];
al_fixed _al_fix_tan_tbl[];
al_fixed _al_fix_acos_tbl[];
al_fixed al_ftofix(double x);
al_fixed al_ftofix(double x);
double al_fixtof(al_fixed x);
double al_fixtof(al_fixed x);
al_fixed al_fixadd(al_fixed x, al_fixed y);
al_fixed al_fixadd(al_fixed x, al_fixed y);
al_fixed al_fixsub(al_fixed x, al_fixed y);
al_fixed al_fixsub(al_fixed x, al_fixed y);
al_fixed al_fixmul(al_fixed x, al_fixed y);
al_fixed al_fixmul(al_fixed x, al_fixed y);
al_fixed al_fixdiv(al_fixed x, al_fixed y);
al_fixed al_fixdiv(al_fixed x, al_fixed y);
int al_fixfloor(al_fixed x);
int al_fixfloor(al_fixed x);
int al_fixceil(al_fixed x);
int al_fixceil(al_fixed x);
al_fixed al_itofix(int x);
al_fixed al_itofix(int x);
int al_fixtoi(al_fixed x);
int al_fixtoi(al_fixed x);
al_fixed al_fixcos(al_fixed x);
al_fixed al_fixcos(al_fixed x);
al_fixed al_fixsin(al_fixed x);
al_fixed al_fixsin(al_fixed x);
al_fixed al_fixtan(al_fixed x);
al_fixed al_fixtan(al_fixed x);
al_fixed al_fixacos(al_fixed x);
al_fixed al_fixacos(al_fixed x);
al_fixed al_fixasin(al_fixed x);
al_fixed al_fixasin(al_fixed x);
ALLEGRO_FS_ENTRY * al_create_fs_entry(const char * path);
void al_destroy_fs_entry(ALLEGRO_FS_ENTRY * e);
const char * al_get_fs_entry_name(ALLEGRO_FS_ENTRY * e);
_Bool al_update_fs_entry(ALLEGRO_FS_ENTRY * e);
uint32_t al_get_fs_entry_mode(ALLEGRO_FS_ENTRY * e);
unsigned long al_get_fs_entry_atime(ALLEGRO_FS_ENTRY * e);
unsigned long al_get_fs_entry_mtime(ALLEGRO_FS_ENTRY * e);
unsigned long al_get_fs_entry_ctime(ALLEGRO_FS_ENTRY * e);
off_t al_get_fs_entry_size(ALLEGRO_FS_ENTRY * e);
_Bool al_fs_entry_exists(ALLEGRO_FS_ENTRY * e);
_Bool al_remove_fs_entry(ALLEGRO_FS_ENTRY * e);
_Bool al_open_directory(ALLEGRO_FS_ENTRY * e);
ALLEGRO_FS_ENTRY * al_read_directory(ALLEGRO_FS_ENTRY * e);
_Bool al_close_directory(ALLEGRO_FS_ENTRY * e);
_Bool al_filename_exists(const char * path);
_Bool al_remove_filename(const char * path);
char * al_get_current_directory();
_Bool al_change_directory(const char * path);
_Bool al_make_directory(const char * path);
ALLEGRO_FILE * al_open_fs_entry(ALLEGRO_FS_ENTRY * e, const char * mode);
int al_for_each_fs_entry(ALLEGRO_FS_ENTRY * dir, int (*callback)(ALLEGRO_FS_ENTRY *, void *), void * extra);
ALLEGRO_FS_INTERFACE * al_get_fs_interface();
void al_set_fs_interface(ALLEGRO_FS_INTERFACE * vtable);
void al_set_standard_fs_interface();
int al_get_num_display_modes();
ALLEGRO_DISPLAY_MODE * al_get_display_mode(int index, ALLEGRO_DISPLAY_MODE * mode);
_Bool al_install_joystick();
void al_uninstall_joystick();
_Bool al_is_joystick_installed();
_Bool al_reconfigure_joysticks();
int al_get_num_joysticks();
ALLEGRO_JOYSTICK * al_get_joystick(int joyn);
void al_release_joystick(ALLEGRO_JOYSTICK * );
_Bool al_get_joystick_active(ALLEGRO_JOYSTICK * );
const char * al_get_joystick_name(ALLEGRO_JOYSTICK * );
int al_get_joystick_num_sticks(ALLEGRO_JOYSTICK * );
int al_get_joystick_stick_flags(ALLEGRO_JOYSTICK * , int stick);
const char * al_get_joystick_stick_name(ALLEGRO_JOYSTICK * , int stick);
int al_get_joystick_num_axes(ALLEGRO_JOYSTICK * , int stick);
const char * al_get_joystick_axis_name(ALLEGRO_JOYSTICK * , int stick, int axis);
int al_get_joystick_num_buttons(ALLEGRO_JOYSTICK * );
const char * al_get_joystick_button_name(ALLEGRO_JOYSTICK * , int buttonn);
void al_get_joystick_state(ALLEGRO_JOYSTICK * , ALLEGRO_JOYSTICK_STATE * ret_state);
ALLEGRO_EVENT_SOURCE * al_get_joystick_event_source();
_Bool al_is_keyboard_installed();
_Bool al_install_keyboard();
void al_uninstall_keyboard();
_Bool al_set_keyboard_leds(int leds);
const char * al_keycode_to_name(int keycode);
void al_get_keyboard_state(ALLEGRO_KEYBOARD_STATE * ret_state);
_Bool al_key_down(ALLEGRO_KEYBOARD_STATE * , int keycode);
ALLEGRO_EVENT_SOURCE * al_get_keyboard_event_source();
_Bool al_is_mouse_installed();
_Bool al_install_mouse();
void al_uninstall_mouse();
unsigned int al_get_mouse_num_buttons();
unsigned int al_get_mouse_num_axes();
_Bool al_set_mouse_xy(struct ALLEGRO_DISPLAY * display, int x, int y);
_Bool al_set_mouse_z(int z);
_Bool al_set_mouse_w(int w);
_Bool al_set_mouse_axis(int axis, int value);
void al_get_mouse_state(ALLEGRO_MOUSE_STATE * ret_state);
_Bool al_mouse_button_down(ALLEGRO_MOUSE_STATE * state, int button);
int al_get_mouse_state_axis(ALLEGRO_MOUSE_STATE * state, int axis);
_Bool al_get_mouse_cursor_position(int * ret_x, int * ret_y);
_Bool al_grab_mouse(struct ALLEGRO_DISPLAY * display);
_Bool al_ungrab_mouse();
void al_set_mouse_wheel_precision(int precision);
int al_get_mouse_wheel_precision();
ALLEGRO_EVENT_SOURCE * al_get_mouse_event_source();
_Bool al_is_touch_input_installed();
_Bool al_install_touch_input();
void al_uninstall_touch_input();
void al_get_touch_input_state(ALLEGRO_TOUCH_INPUT_STATE * ret_state);
ALLEGRO_EVENT_SOURCE * al_get_touch_input_event_source();
void al_set_memory_interface(ALLEGRO_MEMORY_INTERFACE * iface);
void * al_malloc_with_context(size_t n, int line, const char * file, const char * func);
void al_free_with_context(void * ptr, int line, const char * file, const char * func);
void * al_realloc_with_context(void * ptr, size_t n, int line, const char * file, const char * func);
void * al_calloc_with_context(size_t count, size_t n, int line, const char * file, const char * func);
int al_get_num_video_adapters();
_Bool al_get_monitor_info(int adapter, ALLEGRO_MONITOR_INFO * info);
int al_get_monitor_dpi(int adapter);
ALLEGRO_MOUSE_CURSOR * al_create_mouse_cursor(struct ALLEGRO_BITMAP * sprite, int xfocus, int yfocus);
void al_destroy_mouse_cursor(ALLEGRO_MOUSE_CURSOR * );
_Bool al_set_mouse_cursor(struct ALLEGRO_DISPLAY * display, ALLEGRO_MOUSE_CURSOR * cursor);
_Bool al_set_system_mouse_cursor(struct ALLEGRO_DISPLAY * display, ALLEGRO_SYSTEM_MOUSE_CURSOR cursor_id);
_Bool al_show_mouse_cursor(struct ALLEGRO_DISPLAY * display);
_Bool al_hide_mouse_cursor(struct ALLEGRO_DISPLAY * display);
void al_set_render_state(ALLEGRO_RENDER_STATE state, int value);
void al_use_transform(ALLEGRO_TRANSFORM * trans);
void al_use_projection_transform(ALLEGRO_TRANSFORM * trans);
void al_copy_transform(ALLEGRO_TRANSFORM * dest, ALLEGRO_TRANSFORM * src);
void al_identity_transform(ALLEGRO_TRANSFORM * trans);
void al_build_transform(ALLEGRO_TRANSFORM * trans, float x, float y, float sx, float sy, float theta);
void al_build_camera_transform(ALLEGRO_TRANSFORM * trans, float position_x, float position_y, float position_z, float look_x, float look_y, float look_z, float up_x, float up_y, float up_z);
void al_translate_transform(ALLEGRO_TRANSFORM * trans, float x, float y);
void al_translate_transform_3d(ALLEGRO_TRANSFORM * trans, float x, float y, float z);
void al_rotate_transform(ALLEGRO_TRANSFORM * trans, float theta);
void al_rotate_transform_3d(ALLEGRO_TRANSFORM * trans, float x, float y, float z, float angle);
void al_scale_transform(ALLEGRO_TRANSFORM * trans, float sx, float sy);
void al_scale_transform_3d(ALLEGRO_TRANSFORM * trans, float sx, float sy, float sz);
void al_transform_coordinates(ALLEGRO_TRANSFORM * trans, float * x, float * y);
void al_transform_coordinates_3d(ALLEGRO_TRANSFORM * trans, float * x, float * y, float * z);
void al_transform_coordinates_4d(ALLEGRO_TRANSFORM * trans, float * x, float * y, float * z, float * w);
void al_transform_coordinates_3d_projective(ALLEGRO_TRANSFORM * trans, float * x, float * y, float * z);
void al_compose_transform(ALLEGRO_TRANSFORM * trans, ALLEGRO_TRANSFORM * other);
ALLEGRO_TRANSFORM * al_get_current_transform();
ALLEGRO_TRANSFORM * al_get_current_inverse_transform();
ALLEGRO_TRANSFORM * al_get_current_projection_transform();
void al_invert_transform(ALLEGRO_TRANSFORM * trans);
void al_transpose_transform(ALLEGRO_TRANSFORM * trans);
int al_check_inverse(ALLEGRO_TRANSFORM * trans, float tol);
void al_orthographic_transform(ALLEGRO_TRANSFORM * trans, float left, float top, float n, float right, float bottom, float f);
void al_perspective_transform(ALLEGRO_TRANSFORM * trans, float left, float top, float n, float right, float bottom, float f);
void al_horizontal_shear_transform(ALLEGRO_TRANSFORM * trans, float theta);
void al_vertical_shear_transform(ALLEGRO_TRANSFORM * trans, float theta);
ALLEGRO_SHADER * al_create_shader(ALLEGRO_SHADER_PLATFORM platform);
_Bool al_attach_shader_source(ALLEGRO_SHADER * shader, ALLEGRO_SHADER_TYPE type, const char * source);
_Bool al_attach_shader_source_file(ALLEGRO_SHADER * shader, ALLEGRO_SHADER_TYPE type, const char * filename);
_Bool al_build_shader(ALLEGRO_SHADER * shader);
const char * al_get_shader_log(ALLEGRO_SHADER * shader);
ALLEGRO_SHADER_PLATFORM al_get_shader_platform(ALLEGRO_SHADER * shader);
_Bool al_use_shader(ALLEGRO_SHADER * shader);
void al_destroy_shader(ALLEGRO_SHADER * shader);
_Bool al_set_shader_sampler(const char * name, ALLEGRO_BITMAP * bitmap, int unit);
_Bool al_set_shader_matrix(const char * name, ALLEGRO_TRANSFORM * matrix);
_Bool al_set_shader_int(const char * name, int i);
_Bool al_set_shader_float(const char * name, float f);
_Bool al_set_shader_int_vector(const char * name, int num_components, const int * i, int num_elems);
_Bool al_set_shader_float_vector(const char * name, int num_components, const float * f, int num_elems);
_Bool al_set_shader_bool(const char * name, _Bool b);
const char * al_get_default_shader_source(ALLEGRO_SHADER_PLATFORM platform, ALLEGRO_SHADER_TYPE type);
_Bool al_install_system(int version, int (*atexit_ptr)(void (*)(void)));
void al_uninstall_system();
_Bool al_is_system_installed();
ALLEGRO_SYSTEM * al_get_system_driver();
ALLEGRO_CONFIG * al_get_system_config();
ALLEGRO_SYSTEM_ID al_get_system_id();
ALLEGRO_PATH * al_get_standard_path(int id);
void al_set_exe_name(const char * path);
void al_set_org_name(const char * org_name);
void al_set_app_name(const char * app_name);
const char * al_get_org_name();
const char * al_get_app_name();
_Bool al_inhibit_screensaver(_Bool inhibit);
ALLEGRO_THREAD * al_create_thread(void *(*proc)(ALLEGRO_THREAD *, void *), void * arg);
void al_start_thread(ALLEGRO_THREAD * outer);
void al_join_thread(ALLEGRO_THREAD * outer, void ** ret_value);
void al_set_thread_should_stop(ALLEGRO_THREAD * outer);
_Bool al_get_thread_should_stop(ALLEGRO_THREAD * outer);
void al_destroy_thread(ALLEGRO_THREAD * thread);
void al_run_detached_thread(void *(*proc)(void *), void * arg);
ALLEGRO_MUTEX * al_create_mutex();
ALLEGRO_MUTEX * al_create_mutex_recursive();
void al_lock_mutex(ALLEGRO_MUTEX * mutex);
void al_unlock_mutex(ALLEGRO_MUTEX * mutex);
void al_destroy_mutex(ALLEGRO_MUTEX * mutex);
ALLEGRO_COND * al_create_cond();
void al_destroy_cond(ALLEGRO_COND * cond);
void al_wait_cond(ALLEGRO_COND * cond, ALLEGRO_MUTEX * mutex);
int al_wait_cond_until(ALLEGRO_COND * cond, ALLEGRO_MUTEX * mutex, ALLEGRO_TIMEOUT * timeout);
void al_broadcast_cond(ALLEGRO_COND * cond);
void al_signal_cond(ALLEGRO_COND * cond);
ALLEGRO_TIMER * al_create_timer(double speed_secs);
void al_destroy_timer(ALLEGRO_TIMER * timer);
void al_start_timer(ALLEGRO_TIMER * timer);
void al_stop_timer(ALLEGRO_TIMER * timer);
void al_resume_timer(ALLEGRO_TIMER * timer);
_Bool al_get_timer_started(ALLEGRO_TIMER * timer);
double al_get_timer_speed(ALLEGRO_TIMER * timer);
void al_set_timer_speed(ALLEGRO_TIMER * timer, double speed_secs);
int64_t al_get_timer_count(ALLEGRO_TIMER * timer);
void al_set_timer_count(ALLEGRO_TIMER * timer, int64_t count);
void al_add_timer_count(ALLEGRO_TIMER * timer, int64_t diff);
ALLEGRO_EVENT_SOURCE * al_get_timer_event_source(ALLEGRO_TIMER * timer);
void al_store_state(ALLEGRO_STATE * state, int flags);
void al_restore_state(ALLEGRO_STATE * state);
]=]

local c_lib = ffi.load('allegro')

local lua_lib = setmetatable({ c_lib = c_lib }, { __index = c_lib })

lua_lib.ALLEGRO_TIMEOUT = ffi.metatype('struct ALLEGRO_TIMEOUT', {
  __name = 'ALLEGRO_TIMEOUT',
  __index = {
    init_timeout = c_lib.al_init_timeout,
  },
})

lua_lib.ALLEGRO_COLOR = ffi.metatype('struct ALLEGRO_COLOR', {
  __name = 'ALLEGRO_COLOR',
  __index = {
    unmap_rgb = c_lib.al_unmap_rgb,
    unmap_rgba = c_lib.al_unmap_rgba,
    unmap_rgb_f = c_lib.al_unmap_rgb_f,
    unmap_rgba_f = c_lib.al_unmap_rgba_f,
    set_blend_color = c_lib.al_set_blend_color,
    clear_to_color = c_lib.al_clear_to_color,
  },
})

lua_lib.ALLEGRO_BITMAP = ffi.metatype('struct ALLEGRO_BITMAP', {
  __name = 'ALLEGRO_BITMAP',
  __gc = c_lib.al_destroy_bitmap,
  __index = {
    get_bitmap_width = c_lib.al_get_bitmap_width,
    get_bitmap_height = c_lib.al_get_bitmap_height,
    get_bitmap_format = c_lib.al_get_bitmap_format,
    get_bitmap_flags = c_lib.al_get_bitmap_flags,
    get_pixel = c_lib.al_get_pixel,
    convert_mask_to_alpha = c_lib.al_convert_mask_to_alpha,
    create_sub_bitmap = c_lib.al_create_sub_bitmap,
    is_sub_bitmap = c_lib.al_is_sub_bitmap,
    get_parent_bitmap = c_lib.al_get_parent_bitmap,
    get_bitmap_x = c_lib.al_get_bitmap_x,
    get_bitmap_y = c_lib.al_get_bitmap_y,
    reparent_bitmap = c_lib.al_reparent_bitmap,
    clone_bitmap = c_lib.al_clone_bitmap,
    convert_bitmap = c_lib.al_convert_bitmap,
    draw_bitmap = c_lib.al_draw_bitmap,
    draw_bitmap_region = c_lib.al_draw_bitmap_region,
    draw_scaled_bitmap = c_lib.al_draw_scaled_bitmap,
    draw_rotated_bitmap = c_lib.al_draw_rotated_bitmap,
    draw_scaled_rotated_bitmap = c_lib.al_draw_scaled_rotated_bitmap,
    draw_tinted_bitmap = c_lib.al_draw_tinted_bitmap,
    draw_tinted_bitmap_region = c_lib.al_draw_tinted_bitmap_region,
    draw_tinted_scaled_bitmap = c_lib.al_draw_tinted_scaled_bitmap,
    draw_tinted_rotated_bitmap = c_lib.al_draw_tinted_rotated_bitmap,
    draw_tinted_scaled_rotated_bitmap = c_lib.al_draw_tinted_scaled_rotated_bitmap,
    draw_tinted_scaled_rotated_bitmap_region = c_lib.al_draw_tinted_scaled_rotated_bitmap_region,
    lock_bitmap = c_lib.al_lock_bitmap,
    lock_bitmap_region = c_lib.al_lock_bitmap_region,
    lock_bitmap_blocked = c_lib.al_lock_bitmap_blocked,
    lock_bitmap_region_blocked = c_lib.al_lock_bitmap_region_blocked,
    unlock_bitmap = c_lib.al_unlock_bitmap,
    is_bitmap_locked = c_lib.al_is_bitmap_locked,
    set_target_bitmap = c_lib.al_set_target_bitmap,
    is_compatible_bitmap = c_lib.al_is_compatible_bitmap,
    create_mouse_cursor = c_lib.al_create_mouse_cursor,
  },
})

lua_lib._al_tagbstring = ffi.metatype('struct _al_tagbstring', {
  __name = '_al_tagbstring',
  __index = {
    ustr_free = c_lib.al_ustr_free,
    cstr = c_lib.al_cstr,
    ustr_to_buffer = c_lib.al_ustr_to_buffer,
    cstr_dup = c_lib.al_cstr_dup,
    ustr_dup = c_lib.al_ustr_dup,
    ustr_dup_substr = c_lib.al_ustr_dup_substr,
    ref_cstr = c_lib.al_ref_cstr,
    ref_buffer = c_lib.al_ref_buffer,
    ref_ustr = c_lib.al_ref_ustr,
    ustr_size = c_lib.al_ustr_size,
    ustr_length = c_lib.al_ustr_length,
    ustr_offset = c_lib.al_ustr_offset,
    ustr_next = c_lib.al_ustr_next,
    ustr_prev = c_lib.al_ustr_prev,
    ustr_get = c_lib.al_ustr_get,
    ustr_get_next = c_lib.al_ustr_get_next,
    ustr_prev_get = c_lib.al_ustr_prev_get,
    ustr_insert = c_lib.al_ustr_insert,
    ustr_insert_cstr = c_lib.al_ustr_insert_cstr,
    ustr_insert_chr = c_lib.al_ustr_insert_chr,
    ustr_append = c_lib.al_ustr_append,
    ustr_append_cstr = c_lib.al_ustr_append_cstr,
    ustr_append_chr = c_lib.al_ustr_append_chr,
    ustr_appendf = c_lib.al_ustr_appendf,
    ustr_vappendf = c_lib.al_ustr_vappendf,
    ustr_remove_chr = c_lib.al_ustr_remove_chr,
    ustr_remove_range = c_lib.al_ustr_remove_range,
    ustr_truncate = c_lib.al_ustr_truncate,
    ustr_ltrim_ws = c_lib.al_ustr_ltrim_ws,
    ustr_rtrim_ws = c_lib.al_ustr_rtrim_ws,
    ustr_trim_ws = c_lib.al_ustr_trim_ws,
    ustr_assign = c_lib.al_ustr_assign,
    ustr_assign_substr = c_lib.al_ustr_assign_substr,
    ustr_assign_cstr = c_lib.al_ustr_assign_cstr,
    ustr_set_chr = c_lib.al_ustr_set_chr,
    ustr_replace_range = c_lib.al_ustr_replace_range,
    ustr_find_chr = c_lib.al_ustr_find_chr,
    ustr_rfind_chr = c_lib.al_ustr_rfind_chr,
    ustr_find_set = c_lib.al_ustr_find_set,
    ustr_find_set_cstr = c_lib.al_ustr_find_set_cstr,
    ustr_find_cset = c_lib.al_ustr_find_cset,
    ustr_find_cset_cstr = c_lib.al_ustr_find_cset_cstr,
    ustr_find_str = c_lib.al_ustr_find_str,
    ustr_find_cstr = c_lib.al_ustr_find_cstr,
    ustr_rfind_str = c_lib.al_ustr_rfind_str,
    ustr_rfind_cstr = c_lib.al_ustr_rfind_cstr,
    ustr_find_replace = c_lib.al_ustr_find_replace,
    ustr_find_replace_cstr = c_lib.al_ustr_find_replace_cstr,
    ustr_equal = c_lib.al_ustr_equal,
    ustr_compare = c_lib.al_ustr_compare,
    ustr_ncompare = c_lib.al_ustr_ncompare,
    ustr_has_prefix = c_lib.al_ustr_has_prefix,
    ustr_has_prefix_cstr = c_lib.al_ustr_has_prefix_cstr,
    ustr_has_suffix = c_lib.al_ustr_has_suffix,
    ustr_has_suffix_cstr = c_lib.al_ustr_has_suffix_cstr,
    ustr_size_utf16 = c_lib.al_ustr_size_utf16,
    ustr_encode_utf16 = c_lib.al_ustr_encode_utf16,
  },
})

lua_lib.ALLEGRO_PATH = ffi.metatype('struct ALLEGRO_PATH', {
  __name = 'ALLEGRO_PATH',
  __gc = c_lib.al_destroy_path,
  __index = {
    clone_path = c_lib.al_clone_path,
    get_path_num_components = c_lib.al_get_path_num_components,
    get_path_component = c_lib.al_get_path_component,
    replace_path_component = c_lib.al_replace_path_component,
    remove_path_component = c_lib.al_remove_path_component,
    insert_path_component = c_lib.al_insert_path_component,
    get_path_tail = c_lib.al_get_path_tail,
    drop_path_tail = c_lib.al_drop_path_tail,
    append_path_component = c_lib.al_append_path_component,
    join_paths = c_lib.al_join_paths,
    rebase_path = c_lib.al_rebase_path,
    path_cstr = c_lib.al_path_cstr,
    path_ustr = c_lib.al_path_ustr,
    set_path_drive = c_lib.al_set_path_drive,
    get_path_drive = c_lib.al_get_path_drive,
    set_path_filename = c_lib.al_set_path_filename,
    get_path_filename = c_lib.al_get_path_filename,
    get_path_extension = c_lib.al_get_path_extension,
    set_path_extension = c_lib.al_set_path_extension,
    get_path_basename = c_lib.al_get_path_basename,
    make_path_canonical = c_lib.al_make_path_canonical,
  },
})

lua_lib.ALLEGRO_FILE = ffi.metatype('struct ALLEGRO_FILE', {
  __name = 'ALLEGRO_FILE',
  __gc = c_lib.al_fclose,
  __index = {
    fread = c_lib.al_fread,
    fwrite = c_lib.al_fwrite,
    fflush = c_lib.al_fflush,
    ftell = c_lib.al_ftell,
    fseek = c_lib.al_fseek,
    feof = c_lib.al_feof,
    ferror = c_lib.al_ferror,
    ferrmsg = c_lib.al_ferrmsg,
    fclearerr = c_lib.al_fclearerr,
    fungetc = c_lib.al_fungetc,
    fsize = c_lib.al_fsize,
    fgetc = c_lib.al_fgetc,
    fputc = c_lib.al_fputc,
    fread16le = c_lib.al_fread16le,
    fread16be = c_lib.al_fread16be,
    fwrite16le = c_lib.al_fwrite16le,
    fwrite16be = c_lib.al_fwrite16be,
    fread32le = c_lib.al_fread32le,
    fread32be = c_lib.al_fread32be,
    fwrite32le = c_lib.al_fwrite32le,
    fwrite32be = c_lib.al_fwrite32be,
    fgets = c_lib.al_fgets,
    fget_ustr = c_lib.al_fget_ustr,
    fputs = c_lib.al_fputs,
    fprintf = c_lib.al_fprintf,
    vfprintf = c_lib.al_vfprintf,
    fopen_slice = c_lib.al_fopen_slice,
    get_file_userdata = c_lib.al_get_file_userdata,
    load_bitmap_f = c_lib.al_load_bitmap_f,
    load_bitmap_flags_f = c_lib.al_load_bitmap_flags_f,
    save_bitmap_f = c_lib.al_save_bitmap_f,
    identify_bitmap_f = c_lib.al_identify_bitmap_f,
    load_config_file_f = c_lib.al_load_config_file_f,
    save_config_file_f = c_lib.al_save_config_file_f,
  },
})

lua_lib.ALLEGRO_FILE_INTERFACE = ffi.metatype('struct ALLEGRO_FILE_INTERFACE', {
  __name = 'ALLEGRO_FILE_INTERFACE',
  __index = {
    fopen_interface = c_lib.al_fopen_interface,
    create_file_handle = c_lib.al_create_file_handle,
    set_new_file_interface = c_lib.al_set_new_file_interface,
  },
})

lua_lib.ALLEGRO_LOCKED_REGION = ffi.metatype('struct ALLEGRO_LOCKED_REGION', {
  __name = 'ALLEGRO_LOCKED_REGION',
})

lua_lib.ALLEGRO_EVENT_SOURCE = ffi.metatype('struct ALLEGRO_EVENT_SOURCE', {
  __name = 'ALLEGRO_EVENT_SOURCE',
  __gc = c_lib.al_destroy_user_event_source,
  __index = {
    init_user_event_source = c_lib.al_init_user_event_source,
    emit_user_event = c_lib.al_emit_user_event,
    set_event_source_data = c_lib.al_set_event_source_data,
    get_event_source_data = c_lib.al_get_event_source_data,
  },
})

lua_lib.ALLEGRO_ANY_EVENT = ffi.metatype('struct ALLEGRO_ANY_EVENT', {
  __name = 'ALLEGRO_ANY_EVENT',
})

lua_lib.ALLEGRO_DISPLAY = ffi.metatype('struct ALLEGRO_DISPLAY', {
  __name = 'ALLEGRO_DISPLAY',
  __gc = c_lib.al_destroy_display,
  __index = {
    get_display_width = c_lib.al_get_display_width,
    get_display_height = c_lib.al_get_display_height,
    get_display_format = c_lib.al_get_display_format,
    get_display_refresh_rate = c_lib.al_get_display_refresh_rate,
    get_display_flags = c_lib.al_get_display_flags,
    get_display_orientation = c_lib.al_get_display_orientation,
    set_display_flag = c_lib.al_set_display_flag,
    set_target_backbuffer = c_lib.al_set_target_backbuffer,
    get_backbuffer = c_lib.al_get_backbuffer,
    acknowledge_resize = c_lib.al_acknowledge_resize,
    resize_display = c_lib.al_resize_display,
    get_display_event_source = c_lib.al_get_display_event_source,
    set_display_icon = c_lib.al_set_display_icon,
    set_display_icons = c_lib.al_set_display_icons,
    set_window_position = c_lib.al_set_window_position,
    get_window_position = c_lib.al_get_window_position,
    set_window_constraints = c_lib.al_set_window_constraints,
    get_window_constraints = c_lib.al_get_window_constraints,
    apply_window_constraints = c_lib.al_apply_window_constraints,
    set_window_title = c_lib.al_set_window_title,
    set_display_option = c_lib.al_set_display_option,
    get_display_option = c_lib.al_get_display_option,
    acknowledge_drawing_halt = c_lib.al_acknowledge_drawing_halt,
    acknowledge_drawing_resume = c_lib.al_acknowledge_drawing_resume,
    get_clipboard_text = c_lib.al_get_clipboard_text,
    set_clipboard_text = c_lib.al_set_clipboard_text,
    clipboard_has_text = c_lib.al_clipboard_has_text,
    set_mouse_xy = c_lib.al_set_mouse_xy,
    grab_mouse = c_lib.al_grab_mouse,
    set_mouse_cursor = c_lib.al_set_mouse_cursor,
    set_system_mouse_cursor = c_lib.al_set_system_mouse_cursor,
    show_mouse_cursor = c_lib.al_show_mouse_cursor,
    hide_mouse_cursor = c_lib.al_hide_mouse_cursor,
  },
})

lua_lib.ALLEGRO_DISPLAY_EVENT = ffi.metatype('struct ALLEGRO_DISPLAY_EVENT', {
  __name = 'ALLEGRO_DISPLAY_EVENT',
})

lua_lib.ALLEGRO_JOYSTICK = ffi.metatype('struct ALLEGRO_JOYSTICK', {
  __name = 'ALLEGRO_JOYSTICK',
  __gc = c_lib.al_release_joystick,
  __index = {
    get_joystick_active = c_lib.al_get_joystick_active,
    get_joystick_name = c_lib.al_get_joystick_name,
    get_joystick_num_sticks = c_lib.al_get_joystick_num_sticks,
    get_joystick_stick_flags = c_lib.al_get_joystick_stick_flags,
    get_joystick_stick_name = c_lib.al_get_joystick_stick_name,
    get_joystick_num_axes = c_lib.al_get_joystick_num_axes,
    get_joystick_axis_name = c_lib.al_get_joystick_axis_name,
    get_joystick_num_buttons = c_lib.al_get_joystick_num_buttons,
    get_joystick_button_name = c_lib.al_get_joystick_button_name,
    get_joystick_state = c_lib.al_get_joystick_state,
  },
})

lua_lib.ALLEGRO_JOYSTICK_EVENT = ffi.metatype('struct ALLEGRO_JOYSTICK_EVENT', {
  __name = 'ALLEGRO_JOYSTICK_EVENT',
})

lua_lib.ALLEGRO_KEYBOARD = ffi.metatype('struct ALLEGRO_KEYBOARD', {
  __name = 'ALLEGRO_KEYBOARD',
})

lua_lib.ALLEGRO_KEYBOARD_EVENT = ffi.metatype('struct ALLEGRO_KEYBOARD_EVENT', {
  __name = 'ALLEGRO_KEYBOARD_EVENT',
})

lua_lib.ALLEGRO_MOUSE = ffi.metatype('struct ALLEGRO_MOUSE', {
  __name = 'ALLEGRO_MOUSE',
})

lua_lib.ALLEGRO_MOUSE_EVENT = ffi.metatype('struct ALLEGRO_MOUSE_EVENT', {
  __name = 'ALLEGRO_MOUSE_EVENT',
})

lua_lib.ALLEGRO_TIMER = ffi.metatype('struct ALLEGRO_TIMER', {
  __name = 'ALLEGRO_TIMER',
  __gc = c_lib.al_destroy_timer,
  __index = {
    start_timer = c_lib.al_start_timer,
    stop_timer = c_lib.al_stop_timer,
    resume_timer = c_lib.al_resume_timer,
    get_timer_started = c_lib.al_get_timer_started,
    get_timer_speed = c_lib.al_get_timer_speed,
    set_timer_speed = c_lib.al_set_timer_speed,
    get_timer_count = c_lib.al_get_timer_count,
    set_timer_count = c_lib.al_set_timer_count,
    add_timer_count = c_lib.al_add_timer_count,
    get_timer_event_source = c_lib.al_get_timer_event_source,
  },
})

lua_lib.ALLEGRO_TIMER_EVENT = ffi.metatype('struct ALLEGRO_TIMER_EVENT', {
  __name = 'ALLEGRO_TIMER_EVENT',
})

lua_lib.ALLEGRO_TOUCH_INPUT = ffi.metatype('struct ALLEGRO_TOUCH_INPUT', {
  __name = 'ALLEGRO_TOUCH_INPUT',
})

lua_lib.ALLEGRO_TOUCH_EVENT = ffi.metatype('struct ALLEGRO_TOUCH_EVENT', {
  __name = 'ALLEGRO_TOUCH_EVENT',
})

lua_lib.ALLEGRO_USER_EVENT_DESCRIPTOR = ffi.metatype('struct ALLEGRO_USER_EVENT_DESCRIPTOR', {
  __name = 'ALLEGRO_USER_EVENT_DESCRIPTOR',
})

lua_lib.ALLEGRO_USER_EVENT = ffi.metatype('struct ALLEGRO_USER_EVENT', {
  __name = 'ALLEGRO_USER_EVENT',
  __index = {
    unref_user_event = c_lib.al_unref_user_event,
  },
})

lua_lib.ALLEGRO_EVENT = ffi.metatype('union ALLEGRO_EVENT', {
  __name = 'ALLEGRO_EVENT',
})

lua_lib.ALLEGRO_EVENT_QUEUE = ffi.metatype('struct ALLEGRO_EVENT_QUEUE', {
  __name = 'ALLEGRO_EVENT_QUEUE',
  __gc = c_lib.al_destroy_event_queue,
  __index = {
    is_event_source_registered = c_lib.al_is_event_source_registered,
    register_event_source = c_lib.al_register_event_source,
    unregister_event_source = c_lib.al_unregister_event_source,
    pause_event_queue = c_lib.al_pause_event_queue,
    is_event_queue_paused = c_lib.al_is_event_queue_paused,
    is_event_queue_empty = c_lib.al_is_event_queue_empty,
    get_next_event = c_lib.al_get_next_event,
    peek_next_event = c_lib.al_peek_next_event,
    drop_next_event = c_lib.al_drop_next_event,
    flush_event_queue = c_lib.al_flush_event_queue,
    wait_for_event = c_lib.al_wait_for_event,
    wait_for_event_timed = c_lib.al_wait_for_event_timed,
    wait_for_event_until = c_lib.al_wait_for_event_until,
  },
})

lua_lib.ALLEGRO_CONFIG = ffi.metatype('struct ALLEGRO_CONFIG', {
  __name = 'ALLEGRO_CONFIG',
  __gc = c_lib.al_destroy_config,
  __index = {
    add_config_section = c_lib.al_add_config_section,
    set_config_value = c_lib.al_set_config_value,
    add_config_comment = c_lib.al_add_config_comment,
    get_config_value = c_lib.al_get_config_value,
    merge_config_into = c_lib.al_merge_config_into,
    merge_config = c_lib.al_merge_config,
    remove_config_section = c_lib.al_remove_config_section,
    remove_config_key = c_lib.al_remove_config_key,
    get_first_config_section = c_lib.al_get_first_config_section,
    get_first_config_entry = c_lib.al_get_first_config_entry,
  },
})

lua_lib.ALLEGRO_CONFIG_SECTION = ffi.metatype('struct ALLEGRO_CONFIG_SECTION', {
  __name = 'ALLEGRO_CONFIG_SECTION',
  __index = {
    get_next_config_section = c_lib.al_get_next_config_section,
  },
})

lua_lib.ALLEGRO_CONFIG_ENTRY = ffi.metatype('struct ALLEGRO_CONFIG_ENTRY', {
  __name = 'ALLEGRO_CONFIG_ENTRY',
  __index = {
    get_next_config_entry = c_lib.al_get_next_config_entry,
  },
})

lua_lib.ALLEGRO_FS_INTERFACE = ffi.metatype('struct ALLEGRO_FS_INTERFACE', {
  __name = 'ALLEGRO_FS_INTERFACE',
  __index = {
    set_fs_interface = c_lib.al_set_fs_interface,
  },
})

lua_lib.ALLEGRO_FS_ENTRY = ffi.metatype('struct ALLEGRO_FS_ENTRY', {
  __name = 'ALLEGRO_FS_ENTRY',
  __gc = c_lib.al_close_directory,
  __index = {
    get_fs_entry_name = c_lib.al_get_fs_entry_name,
    update_fs_entry = c_lib.al_update_fs_entry,
    get_fs_entry_mode = c_lib.al_get_fs_entry_mode,
    get_fs_entry_atime = c_lib.al_get_fs_entry_atime,
    get_fs_entry_mtime = c_lib.al_get_fs_entry_mtime,
    get_fs_entry_ctime = c_lib.al_get_fs_entry_ctime,
    get_fs_entry_size = c_lib.al_get_fs_entry_size,
    fs_entry_exists = c_lib.al_fs_entry_exists,
    remove_fs_entry = c_lib.al_remove_fs_entry,
    open_directory = c_lib.al_open_directory,
    read_directory = c_lib.al_read_directory,
    open_fs_entry = c_lib.al_open_fs_entry,
    for_each_fs_entry = c_lib.al_for_each_fs_entry,
  },
})

lua_lib.ALLEGRO_DISPLAY_MODE = ffi.metatype('struct ALLEGRO_DISPLAY_MODE', {
  __name = 'ALLEGRO_DISPLAY_MODE',
})

lua_lib._joystick_h_45_4_ = ffi.metatype('struct _joystick_h_45_4_', {
  __name = '_joystick_h_45_4_',
})

lua_lib.ALLEGRO_JOYSTICK_STATE = ffi.metatype('struct ALLEGRO_JOYSTICK_STATE', {
  __name = 'ALLEGRO_JOYSTICK_STATE',
})

lua_lib.ALLEGRO_KEYBOARD_STATE = ffi.metatype('struct ALLEGRO_KEYBOARD_STATE', {
  __name = 'ALLEGRO_KEYBOARD_STATE',
  __index = {
    get_keyboard_state = c_lib.al_get_keyboard_state,
    key_down = c_lib.al_key_down,
  },
})

lua_lib.ALLEGRO_MOUSE_STATE = ffi.metatype('struct ALLEGRO_MOUSE_STATE', {
  __name = 'ALLEGRO_MOUSE_STATE',
  __index = {
    get_mouse_state = c_lib.al_get_mouse_state,
    mouse_button_down = c_lib.al_mouse_button_down,
    get_mouse_state_axis = c_lib.al_get_mouse_state_axis,
  },
})

lua_lib.ALLEGRO_TOUCH_STATE = ffi.metatype('struct ALLEGRO_TOUCH_STATE', {
  __name = 'ALLEGRO_TOUCH_STATE',
})

lua_lib.ALLEGRO_TOUCH_INPUT_STATE = ffi.metatype('struct ALLEGRO_TOUCH_INPUT_STATE', {
  __name = 'ALLEGRO_TOUCH_INPUT_STATE',
  __index = {
    get_touch_input_state = c_lib.al_get_touch_input_state,
  },
})

lua_lib.ALLEGRO_MEMORY_INTERFACE = ffi.metatype('struct ALLEGRO_MEMORY_INTERFACE', {
  __name = 'ALLEGRO_MEMORY_INTERFACE',
  __index = {
    set_memory_interface = c_lib.al_set_memory_interface,
  },
})

lua_lib.ALLEGRO_MONITOR_INFO = ffi.metatype('struct ALLEGRO_MONITOR_INFO', {
  __name = 'ALLEGRO_MONITOR_INFO',
})

lua_lib.ALLEGRO_MOUSE_CURSOR = ffi.metatype('struct ALLEGRO_MOUSE_CURSOR', {
  __name = 'ALLEGRO_MOUSE_CURSOR',
  __gc = c_lib.al_destroy_mouse_cursor,
})

lua_lib.ALLEGRO_TRANSFORM = ffi.metatype('struct ALLEGRO_TRANSFORM', {
  __name = 'ALLEGRO_TRANSFORM',
  __index = {
    use_transform = c_lib.al_use_transform,
    use_projection_transform = c_lib.al_use_projection_transform,
    copy_transform = c_lib.al_copy_transform,
    identity_transform = c_lib.al_identity_transform,
    build_transform = c_lib.al_build_transform,
    build_camera_transform = c_lib.al_build_camera_transform,
    translate_transform = c_lib.al_translate_transform,
    translate_transform_3d = c_lib.al_translate_transform_3d,
    rotate_transform = c_lib.al_rotate_transform,
    rotate_transform_3d = c_lib.al_rotate_transform_3d,
    scale_transform = c_lib.al_scale_transform,
    scale_transform_3d = c_lib.al_scale_transform_3d,
    transform_coordinates = c_lib.al_transform_coordinates,
    transform_coordinates_3d = c_lib.al_transform_coordinates_3d,
    transform_coordinates_4d = c_lib.al_transform_coordinates_4d,
    transform_coordinates_3d_projective = c_lib.al_transform_coordinates_3d_projective,
    compose_transform = c_lib.al_compose_transform,
    invert_transform = c_lib.al_invert_transform,
    transpose_transform = c_lib.al_transpose_transform,
    check_inverse = c_lib.al_check_inverse,
    orthographic_transform = c_lib.al_orthographic_transform,
    perspective_transform = c_lib.al_perspective_transform,
    horizontal_shear_transform = c_lib.al_horizontal_shear_transform,
    vertical_shear_transform = c_lib.al_vertical_shear_transform,
  },
})

lua_lib.ALLEGRO_SHADER = ffi.metatype('struct ALLEGRO_SHADER', {
  __name = 'ALLEGRO_SHADER',
  __gc = c_lib.al_destroy_shader,
  __index = {
    attach_shader_source = c_lib.al_attach_shader_source,
    attach_shader_source_file = c_lib.al_attach_shader_source_file,
    build_shader = c_lib.al_build_shader,
    get_shader_log = c_lib.al_get_shader_log,
    get_shader_platform = c_lib.al_get_shader_platform,
    use_shader = c_lib.al_use_shader,
  },
})

lua_lib.ALLEGRO_SYSTEM = ffi.metatype('struct ALLEGRO_SYSTEM', {
  __name = 'ALLEGRO_SYSTEM',
})

lua_lib.ALLEGRO_THREAD = ffi.metatype('struct ALLEGRO_THREAD', {
  __name = 'ALLEGRO_THREAD',
  __gc = c_lib.al_destroy_thread,
  __index = {
    start_thread = c_lib.al_start_thread,
    join_thread = c_lib.al_join_thread,
    set_thread_should_stop = c_lib.al_set_thread_should_stop,
    get_thread_should_stop = c_lib.al_get_thread_should_stop,
  },
})

lua_lib.ALLEGRO_MUTEX = ffi.metatype('struct ALLEGRO_MUTEX', {
  __name = 'ALLEGRO_MUTEX',
  __gc = c_lib.al_destroy_mutex,
  __index = {
    lock_mutex = c_lib.al_lock_mutex,
    unlock_mutex = c_lib.al_unlock_mutex,
  },
})

lua_lib.ALLEGRO_COND = ffi.metatype('struct ALLEGRO_COND', {
  __name = 'ALLEGRO_COND',
  __gc = c_lib.al_destroy_cond,
  __index = {
    wait_cond = c_lib.al_wait_cond,
    wait_cond_until = c_lib.al_wait_cond_until,
    broadcast_cond = c_lib.al_broadcast_cond,
    signal_cond = c_lib.al_signal_cond,
  },
})

lua_lib.ALLEGRO_STATE = ffi.metatype('struct ALLEGRO_STATE', {
  __name = 'ALLEGRO_STATE',
  __index = {
    store_state = c_lib.al_store_state,
    restore_state = c_lib.al_restore_state,
  },
})

lua_lib.get_allegro_version = lua_lib.al_get_allegro_version
lua_lib.run_main = lua_lib.al_run_main
lua_lib.get_time = lua_lib.al_get_time
lua_lib.rest = lua_lib.al_rest
lua_lib.init_timeout = lua_lib.al_init_timeout
lua_lib.map_rgb = lua_lib.al_map_rgb
lua_lib.map_rgba = lua_lib.al_map_rgba
lua_lib.map_rgb_f = lua_lib.al_map_rgb_f
lua_lib.map_rgba_f = lua_lib.al_map_rgba_f
lua_lib.premul_rgba = lua_lib.al_premul_rgba
lua_lib.premul_rgba_f = lua_lib.al_premul_rgba_f
lua_lib.unmap_rgb = lua_lib.al_unmap_rgb
lua_lib.unmap_rgba = lua_lib.al_unmap_rgba
lua_lib.unmap_rgb_f = lua_lib.al_unmap_rgb_f
lua_lib.unmap_rgba_f = lua_lib.al_unmap_rgba_f
lua_lib.get_pixel_size = lua_lib.al_get_pixel_size
lua_lib.get_pixel_format_bits = lua_lib.al_get_pixel_format_bits
lua_lib.get_pixel_block_size = lua_lib.al_get_pixel_block_size
lua_lib.get_pixel_block_width = lua_lib.al_get_pixel_block_width
lua_lib.get_pixel_block_height = lua_lib.al_get_pixel_block_height
lua_lib.set_new_bitmap_format = lua_lib.al_set_new_bitmap_format
lua_lib.set_new_bitmap_flags = lua_lib.al_set_new_bitmap_flags
lua_lib.get_new_bitmap_format = lua_lib.al_get_new_bitmap_format
lua_lib.get_new_bitmap_flags = lua_lib.al_get_new_bitmap_flags
lua_lib.add_new_bitmap_flag = lua_lib.al_add_new_bitmap_flag
lua_lib.get_bitmap_width = lua_lib.al_get_bitmap_width
lua_lib.get_bitmap_height = lua_lib.al_get_bitmap_height
lua_lib.get_bitmap_format = lua_lib.al_get_bitmap_format
lua_lib.get_bitmap_flags = lua_lib.al_get_bitmap_flags
lua_lib.create_bitmap = lua_lib.al_create_bitmap
lua_lib.destroy_bitmap = lua_lib.al_destroy_bitmap
lua_lib.put_pixel = lua_lib.al_put_pixel
lua_lib.put_blended_pixel = lua_lib.al_put_blended_pixel
lua_lib.get_pixel = lua_lib.al_get_pixel
lua_lib.convert_mask_to_alpha = lua_lib.al_convert_mask_to_alpha
lua_lib.set_clipping_rectangle = lua_lib.al_set_clipping_rectangle
lua_lib.reset_clipping_rectangle = lua_lib.al_reset_clipping_rectangle
lua_lib.get_clipping_rectangle = lua_lib.al_get_clipping_rectangle
lua_lib.create_sub_bitmap = lua_lib.al_create_sub_bitmap
lua_lib.is_sub_bitmap = lua_lib.al_is_sub_bitmap
lua_lib.get_parent_bitmap = lua_lib.al_get_parent_bitmap
lua_lib.get_bitmap_x = lua_lib.al_get_bitmap_x
lua_lib.get_bitmap_y = lua_lib.al_get_bitmap_y
lua_lib.reparent_bitmap = lua_lib.al_reparent_bitmap
lua_lib.clone_bitmap = lua_lib.al_clone_bitmap
lua_lib.convert_bitmap = lua_lib.al_convert_bitmap
lua_lib.convert_memory_bitmaps = lua_lib.al_convert_memory_bitmaps
lua_lib.draw_bitmap = lua_lib.al_draw_bitmap
lua_lib.draw_bitmap_region = lua_lib.al_draw_bitmap_region
lua_lib.draw_scaled_bitmap = lua_lib.al_draw_scaled_bitmap
lua_lib.draw_rotated_bitmap = lua_lib.al_draw_rotated_bitmap
lua_lib.draw_scaled_rotated_bitmap = lua_lib.al_draw_scaled_rotated_bitmap
lua_lib.draw_tinted_bitmap = lua_lib.al_draw_tinted_bitmap
lua_lib.draw_tinted_bitmap_region = lua_lib.al_draw_tinted_bitmap_region
lua_lib.draw_tinted_scaled_bitmap = lua_lib.al_draw_tinted_scaled_bitmap
lua_lib.draw_tinted_rotated_bitmap = lua_lib.al_draw_tinted_rotated_bitmap
lua_lib.draw_tinted_scaled_rotated_bitmap = lua_lib.al_draw_tinted_scaled_rotated_bitmap
lua_lib.draw_tinted_scaled_rotated_bitmap_region = lua_lib.al_draw_tinted_scaled_rotated_bitmap_region
lua_lib.ustr_new = lua_lib.al_ustr_new
lua_lib.ustr_new_from_buffer = lua_lib.al_ustr_new_from_buffer
lua_lib.ustr_newf = lua_lib.al_ustr_newf
lua_lib.ustr_free = lua_lib.al_ustr_free
lua_lib.cstr = lua_lib.al_cstr
lua_lib.ustr_to_buffer = lua_lib.al_ustr_to_buffer
lua_lib.cstr_dup = lua_lib.al_cstr_dup
lua_lib.ustr_dup = lua_lib.al_ustr_dup
lua_lib.ustr_dup_substr = lua_lib.al_ustr_dup_substr
lua_lib.ustr_empty_string = lua_lib.al_ustr_empty_string
lua_lib.ref_cstr = lua_lib.al_ref_cstr
lua_lib.ref_buffer = lua_lib.al_ref_buffer
lua_lib.ref_ustr = lua_lib.al_ref_ustr
lua_lib.ustr_size = lua_lib.al_ustr_size
lua_lib.ustr_length = lua_lib.al_ustr_length
lua_lib.ustr_offset = lua_lib.al_ustr_offset
lua_lib.ustr_next = lua_lib.al_ustr_next
lua_lib.ustr_prev = lua_lib.al_ustr_prev
lua_lib.ustr_get = lua_lib.al_ustr_get
lua_lib.ustr_get_next = lua_lib.al_ustr_get_next
lua_lib.ustr_prev_get = lua_lib.al_ustr_prev_get
lua_lib.ustr_insert = lua_lib.al_ustr_insert
lua_lib.ustr_insert_cstr = lua_lib.al_ustr_insert_cstr
lua_lib.ustr_insert_chr = lua_lib.al_ustr_insert_chr
lua_lib.ustr_append = lua_lib.al_ustr_append
lua_lib.ustr_append_cstr = lua_lib.al_ustr_append_cstr
lua_lib.ustr_append_chr = lua_lib.al_ustr_append_chr
lua_lib.ustr_appendf = lua_lib.al_ustr_appendf
lua_lib.ustr_vappendf = lua_lib.al_ustr_vappendf
lua_lib.ustr_remove_chr = lua_lib.al_ustr_remove_chr
lua_lib.ustr_remove_range = lua_lib.al_ustr_remove_range
lua_lib.ustr_truncate = lua_lib.al_ustr_truncate
lua_lib.ustr_ltrim_ws = lua_lib.al_ustr_ltrim_ws
lua_lib.ustr_rtrim_ws = lua_lib.al_ustr_rtrim_ws
lua_lib.ustr_trim_ws = lua_lib.al_ustr_trim_ws
lua_lib.ustr_assign = lua_lib.al_ustr_assign
lua_lib.ustr_assign_substr = lua_lib.al_ustr_assign_substr
lua_lib.ustr_assign_cstr = lua_lib.al_ustr_assign_cstr
lua_lib.ustr_set_chr = lua_lib.al_ustr_set_chr
lua_lib.ustr_replace_range = lua_lib.al_ustr_replace_range
lua_lib.ustr_find_chr = lua_lib.al_ustr_find_chr
lua_lib.ustr_rfind_chr = lua_lib.al_ustr_rfind_chr
lua_lib.ustr_find_set = lua_lib.al_ustr_find_set
lua_lib.ustr_find_set_cstr = lua_lib.al_ustr_find_set_cstr
lua_lib.ustr_find_cset = lua_lib.al_ustr_find_cset
lua_lib.ustr_find_cset_cstr = lua_lib.al_ustr_find_cset_cstr
lua_lib.ustr_find_str = lua_lib.al_ustr_find_str
lua_lib.ustr_find_cstr = lua_lib.al_ustr_find_cstr
lua_lib.ustr_rfind_str = lua_lib.al_ustr_rfind_str
lua_lib.ustr_rfind_cstr = lua_lib.al_ustr_rfind_cstr
lua_lib.ustr_find_replace = lua_lib.al_ustr_find_replace
lua_lib.ustr_find_replace_cstr = lua_lib.al_ustr_find_replace_cstr
lua_lib.ustr_equal = lua_lib.al_ustr_equal
lua_lib.ustr_compare = lua_lib.al_ustr_compare
lua_lib.ustr_ncompare = lua_lib.al_ustr_ncompare
lua_lib.ustr_has_prefix = lua_lib.al_ustr_has_prefix
lua_lib.ustr_has_prefix_cstr = lua_lib.al_ustr_has_prefix_cstr
lua_lib.ustr_has_suffix = lua_lib.al_ustr_has_suffix
lua_lib.ustr_has_suffix_cstr = lua_lib.al_ustr_has_suffix_cstr
lua_lib.utf8_width = lua_lib.al_utf8_width
lua_lib.utf8_encode = lua_lib.al_utf8_encode
lua_lib.ustr_new_from_utf16 = lua_lib.al_ustr_new_from_utf16
lua_lib.ustr_size_utf16 = lua_lib.al_ustr_size_utf16
lua_lib.ustr_encode_utf16 = lua_lib.al_ustr_encode_utf16
lua_lib.utf16_width = lua_lib.al_utf16_width
lua_lib.utf16_encode = lua_lib.al_utf16_encode
lua_lib.create_path = lua_lib.al_create_path
lua_lib.create_path_for_directory = lua_lib.al_create_path_for_directory
lua_lib.clone_path = lua_lib.al_clone_path
lua_lib.get_path_num_components = lua_lib.al_get_path_num_components
lua_lib.get_path_component = lua_lib.al_get_path_component
lua_lib.replace_path_component = lua_lib.al_replace_path_component
lua_lib.remove_path_component = lua_lib.al_remove_path_component
lua_lib.insert_path_component = lua_lib.al_insert_path_component
lua_lib.get_path_tail = lua_lib.al_get_path_tail
lua_lib.drop_path_tail = lua_lib.al_drop_path_tail
lua_lib.append_path_component = lua_lib.al_append_path_component
lua_lib.join_paths = lua_lib.al_join_paths
lua_lib.rebase_path = lua_lib.al_rebase_path
lua_lib.path_cstr = lua_lib.al_path_cstr
lua_lib.path_ustr = lua_lib.al_path_ustr
lua_lib.destroy_path = lua_lib.al_destroy_path
lua_lib.set_path_drive = lua_lib.al_set_path_drive
lua_lib.get_path_drive = lua_lib.al_get_path_drive
lua_lib.set_path_filename = lua_lib.al_set_path_filename
lua_lib.get_path_filename = lua_lib.al_get_path_filename
lua_lib.get_path_extension = lua_lib.al_get_path_extension
lua_lib.set_path_extension = lua_lib.al_set_path_extension
lua_lib.get_path_basename = lua_lib.al_get_path_basename
lua_lib.make_path_canonical = lua_lib.al_make_path_canonical
lua_lib.fopen = lua_lib.al_fopen
lua_lib.fopen_interface = lua_lib.al_fopen_interface
lua_lib.create_file_handle = lua_lib.al_create_file_handle
lua_lib.fclose = lua_lib.al_fclose
lua_lib.fread = lua_lib.al_fread
lua_lib.fwrite = lua_lib.al_fwrite
lua_lib.fflush = lua_lib.al_fflush
lua_lib.ftell = lua_lib.al_ftell
lua_lib.fseek = lua_lib.al_fseek
lua_lib.feof = lua_lib.al_feof
lua_lib.ferror = lua_lib.al_ferror
lua_lib.ferrmsg = lua_lib.al_ferrmsg
lua_lib.fclearerr = lua_lib.al_fclearerr
lua_lib.fungetc = lua_lib.al_fungetc
lua_lib.fsize = lua_lib.al_fsize
lua_lib.fgetc = lua_lib.al_fgetc
lua_lib.fputc = lua_lib.al_fputc
lua_lib.fread16le = lua_lib.al_fread16le
lua_lib.fread16be = lua_lib.al_fread16be
lua_lib.fwrite16le = lua_lib.al_fwrite16le
lua_lib.fwrite16be = lua_lib.al_fwrite16be
lua_lib.fread32le = lua_lib.al_fread32le
lua_lib.fread32be = lua_lib.al_fread32be
lua_lib.fwrite32le = lua_lib.al_fwrite32le
lua_lib.fwrite32be = lua_lib.al_fwrite32be
lua_lib.fgets = lua_lib.al_fgets
lua_lib.fget_ustr = lua_lib.al_fget_ustr
lua_lib.fputs = lua_lib.al_fputs
lua_lib.fprintf = lua_lib.al_fprintf
lua_lib.vfprintf = lua_lib.al_vfprintf
lua_lib.fopen_fd = lua_lib.al_fopen_fd
lua_lib.make_temp_file = lua_lib.al_make_temp_file
lua_lib.fopen_slice = lua_lib.al_fopen_slice
lua_lib.get_new_file_interface = lua_lib.al_get_new_file_interface
lua_lib.set_new_file_interface = lua_lib.al_set_new_file_interface
lua_lib.set_standard_file_interface = lua_lib.al_set_standard_file_interface
lua_lib.get_file_userdata = lua_lib.al_get_file_userdata
lua_lib.register_bitmap_loader = lua_lib.al_register_bitmap_loader
lua_lib.register_bitmap_saver = lua_lib.al_register_bitmap_saver
lua_lib.register_bitmap_loader_f = lua_lib.al_register_bitmap_loader_f
lua_lib.register_bitmap_saver_f = lua_lib.al_register_bitmap_saver_f
lua_lib.register_bitmap_identifier = lua_lib.al_register_bitmap_identifier
lua_lib.load_bitmap = lua_lib.al_load_bitmap
lua_lib.load_bitmap_flags = lua_lib.al_load_bitmap_flags
lua_lib.load_bitmap_f = lua_lib.al_load_bitmap_f
lua_lib.load_bitmap_flags_f = lua_lib.al_load_bitmap_flags_f
lua_lib.save_bitmap = lua_lib.al_save_bitmap
lua_lib.save_bitmap_f = lua_lib.al_save_bitmap_f
lua_lib.identify_bitmap_f = lua_lib.al_identify_bitmap_f
lua_lib.identify_bitmap = lua_lib.al_identify_bitmap
lua_lib.lock_bitmap = lua_lib.al_lock_bitmap
lua_lib.lock_bitmap_region = lua_lib.al_lock_bitmap_region
lua_lib.lock_bitmap_blocked = lua_lib.al_lock_bitmap_blocked
lua_lib.lock_bitmap_region_blocked = lua_lib.al_lock_bitmap_region_blocked
lua_lib.unlock_bitmap = lua_lib.al_unlock_bitmap
lua_lib.is_bitmap_locked = lua_lib.al_is_bitmap_locked
lua_lib.set_blender = lua_lib.al_set_blender
lua_lib.set_blend_color = lua_lib.al_set_blend_color
lua_lib.get_blender = lua_lib.al_get_blender
lua_lib.get_blend_color = lua_lib.al_get_blend_color
lua_lib.set_separate_blender = lua_lib.al_set_separate_blender
lua_lib.get_separate_blender = lua_lib.al_get_separate_blender
lua_lib.init_user_event_source = lua_lib.al_init_user_event_source
lua_lib.destroy_user_event_source = lua_lib.al_destroy_user_event_source
lua_lib.emit_user_event = lua_lib.al_emit_user_event
lua_lib.unref_user_event = lua_lib.al_unref_user_event
lua_lib.set_event_source_data = lua_lib.al_set_event_source_data
lua_lib.get_event_source_data = lua_lib.al_get_event_source_data
lua_lib.create_event_queue = lua_lib.al_create_event_queue
lua_lib.destroy_event_queue = lua_lib.al_destroy_event_queue
lua_lib.is_event_source_registered = lua_lib.al_is_event_source_registered
lua_lib.register_event_source = lua_lib.al_register_event_source
lua_lib.unregister_event_source = lua_lib.al_unregister_event_source
lua_lib.pause_event_queue = lua_lib.al_pause_event_queue
lua_lib.is_event_queue_paused = lua_lib.al_is_event_queue_paused
lua_lib.is_event_queue_empty = lua_lib.al_is_event_queue_empty
lua_lib.get_next_event = lua_lib.al_get_next_event
lua_lib.peek_next_event = lua_lib.al_peek_next_event
lua_lib.drop_next_event = lua_lib.al_drop_next_event
lua_lib.flush_event_queue = lua_lib.al_flush_event_queue
lua_lib.wait_for_event = lua_lib.al_wait_for_event
lua_lib.wait_for_event_timed = lua_lib.al_wait_for_event_timed
lua_lib.wait_for_event_until = lua_lib.al_wait_for_event_until
lua_lib.set_new_display_refresh_rate = lua_lib.al_set_new_display_refresh_rate
lua_lib.set_new_display_flags = lua_lib.al_set_new_display_flags
lua_lib.get_new_display_refresh_rate = lua_lib.al_get_new_display_refresh_rate
lua_lib.get_new_display_flags = lua_lib.al_get_new_display_flags
lua_lib.set_new_window_title = lua_lib.al_set_new_window_title
lua_lib.get_new_window_title = lua_lib.al_get_new_window_title
lua_lib.get_display_width = lua_lib.al_get_display_width
lua_lib.get_display_height = lua_lib.al_get_display_height
lua_lib.get_display_format = lua_lib.al_get_display_format
lua_lib.get_display_refresh_rate = lua_lib.al_get_display_refresh_rate
lua_lib.get_display_flags = lua_lib.al_get_display_flags
lua_lib.get_display_orientation = lua_lib.al_get_display_orientation
lua_lib.set_display_flag = lua_lib.al_set_display_flag
lua_lib.create_display = lua_lib.al_create_display
lua_lib.destroy_display = lua_lib.al_destroy_display
lua_lib.get_current_display = lua_lib.al_get_current_display
lua_lib.set_target_bitmap = lua_lib.al_set_target_bitmap
lua_lib.set_target_backbuffer = lua_lib.al_set_target_backbuffer
lua_lib.get_backbuffer = lua_lib.al_get_backbuffer
lua_lib.get_target_bitmap = lua_lib.al_get_target_bitmap
lua_lib.acknowledge_resize = lua_lib.al_acknowledge_resize
lua_lib.resize_display = lua_lib.al_resize_display
lua_lib.flip_display = lua_lib.al_flip_display
lua_lib.update_display_region = lua_lib.al_update_display_region
lua_lib.is_compatible_bitmap = lua_lib.al_is_compatible_bitmap
lua_lib.wait_for_vsync = lua_lib.al_wait_for_vsync
lua_lib.get_display_event_source = lua_lib.al_get_display_event_source
lua_lib.set_display_icon = lua_lib.al_set_display_icon
lua_lib.set_display_icons = lua_lib.al_set_display_icons
lua_lib.get_new_display_adapter = lua_lib.al_get_new_display_adapter
lua_lib.set_new_display_adapter = lua_lib.al_set_new_display_adapter
lua_lib.set_new_window_position = lua_lib.al_set_new_window_position
lua_lib.get_new_window_position = lua_lib.al_get_new_window_position
lua_lib.set_window_position = lua_lib.al_set_window_position
lua_lib.get_window_position = lua_lib.al_get_window_position
lua_lib.set_window_constraints = lua_lib.al_set_window_constraints
lua_lib.get_window_constraints = lua_lib.al_get_window_constraints
lua_lib.apply_window_constraints = lua_lib.al_apply_window_constraints
lua_lib.set_window_title = lua_lib.al_set_window_title
lua_lib.set_new_display_option = lua_lib.al_set_new_display_option
lua_lib.get_new_display_option = lua_lib.al_get_new_display_option
lua_lib.reset_new_display_options = lua_lib.al_reset_new_display_options
lua_lib.set_display_option = lua_lib.al_set_display_option
lua_lib.get_display_option = lua_lib.al_get_display_option
lua_lib.hold_bitmap_drawing = lua_lib.al_hold_bitmap_drawing
lua_lib.is_bitmap_drawing_held = lua_lib.al_is_bitmap_drawing_held
lua_lib.acknowledge_drawing_halt = lua_lib.al_acknowledge_drawing_halt
lua_lib.acknowledge_drawing_resume = lua_lib.al_acknowledge_drawing_resume
lua_lib.get_clipboard_text = lua_lib.al_get_clipboard_text
lua_lib.set_clipboard_text = lua_lib.al_set_clipboard_text
lua_lib.clipboard_has_text = lua_lib.al_clipboard_has_text
lua_lib.create_config = lua_lib.al_create_config
lua_lib.add_config_section = lua_lib.al_add_config_section
lua_lib.set_config_value = lua_lib.al_set_config_value
lua_lib.add_config_comment = lua_lib.al_add_config_comment
lua_lib.get_config_value = lua_lib.al_get_config_value
lua_lib.load_config_file = lua_lib.al_load_config_file
lua_lib.load_config_file_f = lua_lib.al_load_config_file_f
lua_lib.save_config_file = lua_lib.al_save_config_file
lua_lib.save_config_file_f = lua_lib.al_save_config_file_f
lua_lib.merge_config_into = lua_lib.al_merge_config_into
lua_lib.merge_config = lua_lib.al_merge_config
lua_lib.destroy_config = lua_lib.al_destroy_config
lua_lib.remove_config_section = lua_lib.al_remove_config_section
lua_lib.remove_config_key = lua_lib.al_remove_config_key
lua_lib.get_first_config_section = lua_lib.al_get_first_config_section
lua_lib.get_next_config_section = lua_lib.al_get_next_config_section
lua_lib.get_first_config_entry = lua_lib.al_get_first_config_entry
lua_lib.get_next_config_entry = lua_lib.al_get_next_config_entry
lua_lib.get_cpu_count = lua_lib.al_get_cpu_count
lua_lib.get_ram_size = lua_lib.al_get_ram_size
lua_lib.register_assert_handler = lua_lib.al_register_assert_handler
lua_lib.register_trace_handler = lua_lib.al_register_trace_handler
lua_lib.clear_to_color = lua_lib.al_clear_to_color
lua_lib.clear_depth_buffer = lua_lib.al_clear_depth_buffer
lua_lib.draw_pixel = lua_lib.al_draw_pixel
lua_lib.get_errno = lua_lib.al_get_errno
lua_lib.set_errno = lua_lib.al_set_errno
lua_lib.fixtorad_r = lua_lib.al_fixtorad_r
lua_lib.radtofix_r = lua_lib.al_radtofix_r
lua_lib.fixsqrt = lua_lib.al_fixsqrt
lua_lib.fixhypot = lua_lib.al_fixhypot
lua_lib.fixatan = lua_lib.al_fixatan
lua_lib.fixatan2 = lua_lib.al_fixatan2
lua_lib.ftofix = lua_lib.al_ftofix
lua_lib.fixtof = lua_lib.al_fixtof
lua_lib.fixadd = lua_lib.al_fixadd
lua_lib.fixsub = lua_lib.al_fixsub
lua_lib.fixmul = lua_lib.al_fixmul
lua_lib.fixdiv = lua_lib.al_fixdiv
lua_lib.fixfloor = lua_lib.al_fixfloor
lua_lib.fixceil = lua_lib.al_fixceil
lua_lib.itofix = lua_lib.al_itofix
lua_lib.fixtoi = lua_lib.al_fixtoi
lua_lib.fixcos = lua_lib.al_fixcos
lua_lib.fixsin = lua_lib.al_fixsin
lua_lib.fixtan = lua_lib.al_fixtan
lua_lib.fixacos = lua_lib.al_fixacos
lua_lib.fixasin = lua_lib.al_fixasin
lua_lib.create_fs_entry = lua_lib.al_create_fs_entry
lua_lib.destroy_fs_entry = lua_lib.al_destroy_fs_entry
lua_lib.get_fs_entry_name = lua_lib.al_get_fs_entry_name
lua_lib.update_fs_entry = lua_lib.al_update_fs_entry
lua_lib.get_fs_entry_mode = lua_lib.al_get_fs_entry_mode
lua_lib.get_fs_entry_atime = lua_lib.al_get_fs_entry_atime
lua_lib.get_fs_entry_mtime = lua_lib.al_get_fs_entry_mtime
lua_lib.get_fs_entry_ctime = lua_lib.al_get_fs_entry_ctime
lua_lib.get_fs_entry_size = lua_lib.al_get_fs_entry_size
lua_lib.fs_entry_exists = lua_lib.al_fs_entry_exists
lua_lib.remove_fs_entry = lua_lib.al_remove_fs_entry
lua_lib.open_directory = lua_lib.al_open_directory
lua_lib.read_directory = lua_lib.al_read_directory
lua_lib.close_directory = lua_lib.al_close_directory
lua_lib.filename_exists = lua_lib.al_filename_exists
lua_lib.remove_filename = lua_lib.al_remove_filename
lua_lib.get_current_directory = lua_lib.al_get_current_directory
lua_lib.change_directory = lua_lib.al_change_directory
lua_lib.make_directory = lua_lib.al_make_directory
lua_lib.open_fs_entry = lua_lib.al_open_fs_entry
lua_lib.for_each_fs_entry = lua_lib.al_for_each_fs_entry
lua_lib.get_fs_interface = lua_lib.al_get_fs_interface
lua_lib.set_fs_interface = lua_lib.al_set_fs_interface
lua_lib.set_standard_fs_interface = lua_lib.al_set_standard_fs_interface
lua_lib.get_num_display_modes = lua_lib.al_get_num_display_modes
lua_lib.get_display_mode = lua_lib.al_get_display_mode
lua_lib.install_joystick = lua_lib.al_install_joystick
lua_lib.uninstall_joystick = lua_lib.al_uninstall_joystick
lua_lib.is_joystick_installed = lua_lib.al_is_joystick_installed
lua_lib.reconfigure_joysticks = lua_lib.al_reconfigure_joysticks
lua_lib.get_num_joysticks = lua_lib.al_get_num_joysticks
lua_lib.get_joystick = lua_lib.al_get_joystick
lua_lib.release_joystick = lua_lib.al_release_joystick
lua_lib.get_joystick_active = lua_lib.al_get_joystick_active
lua_lib.get_joystick_name = lua_lib.al_get_joystick_name
lua_lib.get_joystick_num_sticks = lua_lib.al_get_joystick_num_sticks
lua_lib.get_joystick_stick_flags = lua_lib.al_get_joystick_stick_flags
lua_lib.get_joystick_stick_name = lua_lib.al_get_joystick_stick_name
lua_lib.get_joystick_num_axes = lua_lib.al_get_joystick_num_axes
lua_lib.get_joystick_axis_name = lua_lib.al_get_joystick_axis_name
lua_lib.get_joystick_num_buttons = lua_lib.al_get_joystick_num_buttons
lua_lib.get_joystick_button_name = lua_lib.al_get_joystick_button_name
lua_lib.get_joystick_state = lua_lib.al_get_joystick_state
lua_lib.get_joystick_event_source = lua_lib.al_get_joystick_event_source
lua_lib.is_keyboard_installed = lua_lib.al_is_keyboard_installed
lua_lib.install_keyboard = lua_lib.al_install_keyboard
lua_lib.uninstall_keyboard = lua_lib.al_uninstall_keyboard
lua_lib.set_keyboard_leds = lua_lib.al_set_keyboard_leds
lua_lib.keycode_to_name = lua_lib.al_keycode_to_name
lua_lib.get_keyboard_state = lua_lib.al_get_keyboard_state
lua_lib.key_down = lua_lib.al_key_down
lua_lib.get_keyboard_event_source = lua_lib.al_get_keyboard_event_source
lua_lib.is_mouse_installed = lua_lib.al_is_mouse_installed
lua_lib.install_mouse = lua_lib.al_install_mouse
lua_lib.uninstall_mouse = lua_lib.al_uninstall_mouse
lua_lib.get_mouse_num_buttons = lua_lib.al_get_mouse_num_buttons
lua_lib.get_mouse_num_axes = lua_lib.al_get_mouse_num_axes
lua_lib.set_mouse_xy = lua_lib.al_set_mouse_xy
lua_lib.set_mouse_z = lua_lib.al_set_mouse_z
lua_lib.set_mouse_w = lua_lib.al_set_mouse_w
lua_lib.set_mouse_axis = lua_lib.al_set_mouse_axis
lua_lib.get_mouse_state = lua_lib.al_get_mouse_state
lua_lib.mouse_button_down = lua_lib.al_mouse_button_down
lua_lib.get_mouse_state_axis = lua_lib.al_get_mouse_state_axis
lua_lib.get_mouse_cursor_position = lua_lib.al_get_mouse_cursor_position
lua_lib.grab_mouse = lua_lib.al_grab_mouse
lua_lib.ungrab_mouse = lua_lib.al_ungrab_mouse
lua_lib.set_mouse_wheel_precision = lua_lib.al_set_mouse_wheel_precision
lua_lib.get_mouse_wheel_precision = lua_lib.al_get_mouse_wheel_precision
lua_lib.get_mouse_event_source = lua_lib.al_get_mouse_event_source
lua_lib.is_touch_input_installed = lua_lib.al_is_touch_input_installed
lua_lib.install_touch_input = lua_lib.al_install_touch_input
lua_lib.uninstall_touch_input = lua_lib.al_uninstall_touch_input
lua_lib.get_touch_input_state = lua_lib.al_get_touch_input_state
lua_lib.get_touch_input_event_source = lua_lib.al_get_touch_input_event_source
lua_lib.set_memory_interface = lua_lib.al_set_memory_interface
lua_lib.malloc_with_context = lua_lib.al_malloc_with_context
lua_lib.free_with_context = lua_lib.al_free_with_context
lua_lib.realloc_with_context = lua_lib.al_realloc_with_context
lua_lib.calloc_with_context = lua_lib.al_calloc_with_context
lua_lib.get_num_video_adapters = lua_lib.al_get_num_video_adapters
lua_lib.get_monitor_info = lua_lib.al_get_monitor_info
lua_lib.get_monitor_dpi = lua_lib.al_get_monitor_dpi
lua_lib.create_mouse_cursor = lua_lib.al_create_mouse_cursor
lua_lib.destroy_mouse_cursor = lua_lib.al_destroy_mouse_cursor
lua_lib.set_mouse_cursor = lua_lib.al_set_mouse_cursor
lua_lib.set_system_mouse_cursor = lua_lib.al_set_system_mouse_cursor
lua_lib.show_mouse_cursor = lua_lib.al_show_mouse_cursor
lua_lib.hide_mouse_cursor = lua_lib.al_hide_mouse_cursor
lua_lib.set_render_state = lua_lib.al_set_render_state
lua_lib.use_transform = lua_lib.al_use_transform
lua_lib.use_projection_transform = lua_lib.al_use_projection_transform
lua_lib.copy_transform = lua_lib.al_copy_transform
lua_lib.identity_transform = lua_lib.al_identity_transform
lua_lib.build_transform = lua_lib.al_build_transform
lua_lib.build_camera_transform = lua_lib.al_build_camera_transform
lua_lib.translate_transform = lua_lib.al_translate_transform
lua_lib.translate_transform_3d = lua_lib.al_translate_transform_3d
lua_lib.rotate_transform = lua_lib.al_rotate_transform
lua_lib.rotate_transform_3d = lua_lib.al_rotate_transform_3d
lua_lib.scale_transform = lua_lib.al_scale_transform
lua_lib.scale_transform_3d = lua_lib.al_scale_transform_3d
lua_lib.transform_coordinates = lua_lib.al_transform_coordinates
lua_lib.transform_coordinates_3d = lua_lib.al_transform_coordinates_3d
lua_lib.transform_coordinates_4d = lua_lib.al_transform_coordinates_4d
lua_lib.transform_coordinates_3d_projective = lua_lib.al_transform_coordinates_3d_projective
lua_lib.compose_transform = lua_lib.al_compose_transform
lua_lib.get_current_transform = lua_lib.al_get_current_transform
lua_lib.get_current_inverse_transform = lua_lib.al_get_current_inverse_transform
lua_lib.get_current_projection_transform = lua_lib.al_get_current_projection_transform
lua_lib.invert_transform = lua_lib.al_invert_transform
lua_lib.transpose_transform = lua_lib.al_transpose_transform
lua_lib.check_inverse = lua_lib.al_check_inverse
lua_lib.orthographic_transform = lua_lib.al_orthographic_transform
lua_lib.perspective_transform = lua_lib.al_perspective_transform
lua_lib.horizontal_shear_transform = lua_lib.al_horizontal_shear_transform
lua_lib.vertical_shear_transform = lua_lib.al_vertical_shear_transform
lua_lib.create_shader = lua_lib.al_create_shader
lua_lib.attach_shader_source = lua_lib.al_attach_shader_source
lua_lib.attach_shader_source_file = lua_lib.al_attach_shader_source_file
lua_lib.build_shader = lua_lib.al_build_shader
lua_lib.get_shader_log = lua_lib.al_get_shader_log
lua_lib.get_shader_platform = lua_lib.al_get_shader_platform
lua_lib.use_shader = lua_lib.al_use_shader
lua_lib.destroy_shader = lua_lib.al_destroy_shader
lua_lib.set_shader_sampler = lua_lib.al_set_shader_sampler
lua_lib.set_shader_matrix = lua_lib.al_set_shader_matrix
lua_lib.set_shader_int = lua_lib.al_set_shader_int
lua_lib.set_shader_float = lua_lib.al_set_shader_float
lua_lib.set_shader_int_vector = lua_lib.al_set_shader_int_vector
lua_lib.set_shader_float_vector = lua_lib.al_set_shader_float_vector
lua_lib.set_shader_bool = lua_lib.al_set_shader_bool
lua_lib.get_default_shader_source = lua_lib.al_get_default_shader_source
lua_lib.install_system = lua_lib.al_install_system
lua_lib.uninstall_system = lua_lib.al_uninstall_system
lua_lib.is_system_installed = lua_lib.al_is_system_installed
lua_lib.get_system_driver = lua_lib.al_get_system_driver
lua_lib.get_system_config = lua_lib.al_get_system_config
lua_lib.get_system_id = lua_lib.al_get_system_id
lua_lib.get_standard_path = lua_lib.al_get_standard_path
lua_lib.set_exe_name = lua_lib.al_set_exe_name
lua_lib.set_org_name = lua_lib.al_set_org_name
lua_lib.set_app_name = lua_lib.al_set_app_name
lua_lib.get_org_name = lua_lib.al_get_org_name
lua_lib.get_app_name = lua_lib.al_get_app_name
lua_lib.inhibit_screensaver = lua_lib.al_inhibit_screensaver
lua_lib.create_thread = lua_lib.al_create_thread
lua_lib.start_thread = lua_lib.al_start_thread
lua_lib.join_thread = lua_lib.al_join_thread
lua_lib.set_thread_should_stop = lua_lib.al_set_thread_should_stop
lua_lib.get_thread_should_stop = lua_lib.al_get_thread_should_stop
lua_lib.destroy_thread = lua_lib.al_destroy_thread
lua_lib.run_detached_thread = lua_lib.al_run_detached_thread
lua_lib.create_mutex = lua_lib.al_create_mutex
lua_lib.create_mutex_recursive = lua_lib.al_create_mutex_recursive
lua_lib.lock_mutex = lua_lib.al_lock_mutex
lua_lib.unlock_mutex = lua_lib.al_unlock_mutex
lua_lib.destroy_mutex = lua_lib.al_destroy_mutex
lua_lib.create_cond = lua_lib.al_create_cond
lua_lib.destroy_cond = lua_lib.al_destroy_cond
lua_lib.wait_cond = lua_lib.al_wait_cond
lua_lib.wait_cond_until = lua_lib.al_wait_cond_until
lua_lib.broadcast_cond = lua_lib.al_broadcast_cond
lua_lib.signal_cond = lua_lib.al_signal_cond
lua_lib.create_timer = lua_lib.al_create_timer
lua_lib.destroy_timer = lua_lib.al_destroy_timer
lua_lib.start_timer = lua_lib.al_start_timer
lua_lib.stop_timer = lua_lib.al_stop_timer
lua_lib.resume_timer = lua_lib.al_resume_timer
lua_lib.get_timer_started = lua_lib.al_get_timer_started
lua_lib.get_timer_speed = lua_lib.al_get_timer_speed
lua_lib.set_timer_speed = lua_lib.al_set_timer_speed
lua_lib.get_timer_count = lua_lib.al_get_timer_count
lua_lib.set_timer_count = lua_lib.al_set_timer_count
lua_lib.add_timer_count = lua_lib.al_add_timer_count
lua_lib.get_timer_event_source = lua_lib.al_get_timer_event_source
lua_lib.store_state = lua_lib.al_store_state
lua_lib.restore_state = lua_lib.al_restore_state
return lua_lib
