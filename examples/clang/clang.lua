--[[
-- This file was automatically generated by Inclua 0.2.0 (https://github.com/gilzoide/inclua)
-- 
-- The Inclua team hopes this file was accurately generated, that it will be useful
-- and will never give SEGFAULTs, throw exceptions, or panic in a similar way.
-- This software is provided 'as-is', without any warranty.
-- Feel free to change and redistribute it.
--]]
local ffi = require 'ffi'

ffi.cdef[=[
enum CXErrorCode {
  CXError_Success = 0,
  CXError_Failure = 1,
  CXError_Crashed = 2,
  CXError_InvalidArguments = 3,
  CXError_ASTReadError = 4,
};
typedef struct  {
  const void * data;
  unsigned int private_flags;
} CXString;

typedef struct  {
  CXString * Strings;
  unsigned int Count;
} CXStringSet;

const char * clang_getCString(CXString string);
void clang_disposeString(CXString string);
void clang_disposeStringSet(CXStringSet * set);
unsigned long long clang_getBuildSessionTimestamp();
struct CXVirtualFileOverlayImpl;
typedef struct CXVirtualFileOverlayImpl *CXVirtualFileOverlay;
CXVirtualFileOverlay clang_VirtualFileOverlay_create(unsigned int options);
enum CXErrorCode clang_VirtualFileOverlay_addFileMapping(CXVirtualFileOverlay , const char * virtualPath, const char * realPath);
enum CXErrorCode clang_VirtualFileOverlay_setCaseSensitivity(CXVirtualFileOverlay , int caseSensitive);
enum CXErrorCode clang_VirtualFileOverlay_writeToBuffer(CXVirtualFileOverlay , unsigned int options, char ** out_buffer_ptr, unsigned int * out_buffer_size);
void clang_free(void * buffer);
void clang_VirtualFileOverlay_dispose(CXVirtualFileOverlay );
struct CXModuleMapDescriptorImpl;
typedef struct CXModuleMapDescriptorImpl *CXModuleMapDescriptor;
CXModuleMapDescriptor clang_ModuleMapDescriptor_create(unsigned int options);
enum CXErrorCode clang_ModuleMapDescriptor_setFrameworkModuleName(CXModuleMapDescriptor , const char * name);
enum CXErrorCode clang_ModuleMapDescriptor_setUmbrellaHeader(CXModuleMapDescriptor , const char * name);
enum CXErrorCode clang_ModuleMapDescriptor_writeToBuffer(CXModuleMapDescriptor , unsigned int options, char ** out_buffer_ptr, unsigned int * out_buffer_size);
void clang_ModuleMapDescriptor_dispose(CXModuleMapDescriptor );
typedef void * CXCompilationDatabase;
typedef void * CXCompileCommands;
typedef void * CXCompileCommand;
typedef enum  {
  CXCompilationDatabase_NoError = 0,
  CXCompilationDatabase_CanNotLoadDatabase = 1,
} CXCompilationDatabase_Error;

CXCompilationDatabase clang_CompilationDatabase_fromDirectory(const char * BuildDir, CXCompilationDatabase_Error * ErrorCode);
void clang_CompilationDatabase_dispose(CXCompilationDatabase );
CXCompileCommands clang_CompilationDatabase_getCompileCommands(CXCompilationDatabase , const char * CompleteFileName);
CXCompileCommands clang_CompilationDatabase_getAllCompileCommands(CXCompilationDatabase );
void clang_CompileCommands_dispose(CXCompileCommands );
unsigned int clang_CompileCommands_getSize(CXCompileCommands );
CXCompileCommand clang_CompileCommands_getCommand(CXCompileCommands , unsigned int I);
CXString clang_CompileCommand_getDirectory(CXCompileCommand );
CXString clang_CompileCommand_getFilename(CXCompileCommand );
unsigned int clang_CompileCommand_getNumArgs(CXCompileCommand );
CXString clang_CompileCommand_getArg(CXCompileCommand , unsigned int I);
// For some reason, clang_CompileCommand_getNumMappedSources is not defined in my libclang installation
// unsigned int clang_CompileCommand_getNumMappedSources(CXCompileCommand );
CXString clang_CompileCommand_getMappedSourcePath(CXCompileCommand , unsigned int I);
CXString clang_CompileCommand_getMappedSourceContent(CXCompileCommand , unsigned int I);
typedef void *CXIndex;
struct CXTargetInfoImpl;
typedef struct CXTargetInfoImpl *CXTargetInfo;
struct CXTranslationUnitImpl;
typedef struct CXTranslationUnitImpl *CXTranslationUnit;
typedef void *CXClientData;
struct CXUnsavedFile {
  const char * Filename;
  const char * Contents;
  unsigned long Length;
};
enum CXAvailabilityKind {
  CXAvailability_Available = 0,
  CXAvailability_Deprecated = 1,
  CXAvailability_NotAvailable = 2,
  CXAvailability_NotAccessible = 3,
};
typedef struct CXVersion {
  int Major;
  int Minor;
  int Subminor;
} CXVersion;

enum CXCursor_ExceptionSpecificationKind {
  CXCursor_ExceptionSpecificationKind_None = 0,
  CXCursor_ExceptionSpecificationKind_DynamicNone = 1,
  CXCursor_ExceptionSpecificationKind_Dynamic = 2,
  CXCursor_ExceptionSpecificationKind_MSAny = 3,
  CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4,
  CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5,
  CXCursor_ExceptionSpecificationKind_Unevaluated = 6,
  CXCursor_ExceptionSpecificationKind_Uninstantiated = 7,
  CXCursor_ExceptionSpecificationKind_Unparsed = 8,
  CXCursor_ExceptionSpecificationKind_NoThrow = 9,
};
CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics);
void clang_disposeIndex(CXIndex index);
typedef enum  {
  CXGlobalOpt_None = 0,
  CXGlobalOpt_ThreadBackgroundPriorityForIndexing = 1,
  CXGlobalOpt_ThreadBackgroundPriorityForEditing = 2,
  CXGlobalOpt_ThreadBackgroundPriorityForAll = 3,
} CXGlobalOptFlags;

void clang_CXIndex_setGlobalOptions(CXIndex , unsigned int options);
unsigned int clang_CXIndex_getGlobalOptions(CXIndex );
void clang_CXIndex_setInvocationEmissionPathOption(CXIndex , const char * Path);
typedef void *CXFile;
CXString clang_getFileName(CXFile SFile);
unsigned long clang_getFileTime(CXFile SFile);
typedef struct  {
  unsigned long long data[3];
} CXFileUniqueID;

int clang_getFileUniqueID(CXFile file, CXFileUniqueID * outID);
unsigned int clang_isFileMultipleIncludeGuarded(CXTranslationUnit tu, CXFile file);
CXFile clang_getFile(CXTranslationUnit tu, const char * file_name);
const char * clang_getFileContents(CXTranslationUnit tu, CXFile file, size_t * size);
int clang_File_isEqual(CXFile file1, CXFile file2);
CXString clang_File_tryGetRealPathName(CXFile file);
typedef struct  {
  const void *ptr_data[2];
  unsigned int int_data;
} CXSourceLocation;

typedef struct  {
  const void *ptr_data[2];
  unsigned int begin_int_data;
  unsigned int end_int_data;
} CXSourceRange;

CXSourceLocation clang_getNullLocation();
unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2);
CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column);
CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset);
int clang_Location_isInSystemHeader(CXSourceLocation location);
int clang_Location_isFromMainFile(CXSourceLocation location);
CXSourceRange clang_getNullRange();
CXSourceRange clang_getRange(CXSourceLocation begin, CXSourceLocation end);
unsigned int clang_equalRanges(CXSourceRange range1, CXSourceRange range2);
int clang_Range_isNull(CXSourceRange range);
void clang_getExpansionLocation(CXSourceLocation location, CXFile * file, unsigned int * line, unsigned int * column, unsigned int * offset);
void clang_getPresumedLocation(CXSourceLocation location, CXString * filename, unsigned int * line, unsigned int * column);
void clang_getInstantiationLocation(CXSourceLocation location, CXFile * file, unsigned int * line, unsigned int * column, unsigned int * offset);
void clang_getSpellingLocation(CXSourceLocation location, CXFile * file, unsigned int * line, unsigned int * column, unsigned int * offset);
void clang_getFileLocation(CXSourceLocation location, CXFile * file, unsigned int * line, unsigned int * column, unsigned int * offset);
CXSourceLocation clang_getRangeStart(CXSourceRange range);
CXSourceLocation clang_getRangeEnd(CXSourceRange range);
typedef struct  {
  unsigned int count;
  CXSourceRange * ranges;
} CXSourceRangeList;

CXSourceRangeList * clang_getSkippedRanges(CXTranslationUnit tu, CXFile file);
CXSourceRangeList * clang_getAllSkippedRanges(CXTranslationUnit tu);
void clang_disposeSourceRangeList(CXSourceRangeList * ranges);
enum CXDiagnosticSeverity {
  CXDiagnostic_Ignored = 0,
  CXDiagnostic_Note = 1,
  CXDiagnostic_Warning = 2,
  CXDiagnostic_Error = 3,
  CXDiagnostic_Fatal = 4,
};
typedef void *CXDiagnostic;
typedef void *CXDiagnosticSet;
unsigned int clang_getNumDiagnosticsInSet(CXDiagnosticSet Diags);
CXDiagnostic clang_getDiagnosticInSet(CXDiagnosticSet Diags, unsigned int Index);
enum CXLoadDiag_Error {
  CXLoadDiag_None = 0,
  CXLoadDiag_Unknown = 1,
  CXLoadDiag_CannotLoad = 2,
  CXLoadDiag_InvalidFile = 3,
};
CXDiagnosticSet clang_loadDiagnostics(const char * file, enum CXLoadDiag_Error * error, CXString * errorString);
void clang_disposeDiagnosticSet(CXDiagnosticSet Diags);
CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D);
unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit);
CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index);
CXDiagnosticSet clang_getDiagnosticSetFromTU(CXTranslationUnit Unit);
void clang_disposeDiagnostic(CXDiagnostic Diagnostic);
enum CXDiagnosticDisplayOptions {
  CXDiagnostic_DisplaySourceLocation = 1,
  CXDiagnostic_DisplayColumn = 2,
  CXDiagnostic_DisplaySourceRanges = 4,
  CXDiagnostic_DisplayOption = 8,
  CXDiagnostic_DisplayCategoryId = 16,
  CXDiagnostic_DisplayCategoryName = 32,
};
CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options);
unsigned int clang_defaultDiagnosticDisplayOptions();
enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic );
CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic );
CXString clang_getDiagnosticSpelling(CXDiagnostic );
CXString clang_getDiagnosticOption(CXDiagnostic Diag, CXString * Disable);
unsigned int clang_getDiagnosticCategory(CXDiagnostic );
CXString clang_getDiagnosticCategoryName(unsigned int Category);
CXString clang_getDiagnosticCategoryText(CXDiagnostic );
unsigned int clang_getDiagnosticNumRanges(CXDiagnostic );
CXSourceRange clang_getDiagnosticRange(CXDiagnostic Diagnostic, unsigned int Range);
unsigned int clang_getDiagnosticNumFixIts(CXDiagnostic Diagnostic);
CXString clang_getDiagnosticFixIt(CXDiagnostic Diagnostic, unsigned int FixIt, CXSourceRange * ReplacementRange);
CXString clang_getTranslationUnitSpelling(CXTranslationUnit CTUnit);
CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char * source_filename, int num_clang_command_line_args, const char *const * clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile * unsaved_files);
CXTranslationUnit clang_createTranslationUnit(CXIndex CIdx, const char * ast_filename);
enum CXErrorCode clang_createTranslationUnit2(CXIndex CIdx, const char * ast_filename, CXTranslationUnit * out_TU);
enum CXTranslationUnit_Flags {
  CXTranslationUnit_None = 0,
  CXTranslationUnit_DetailedPreprocessingRecord = 1,
  CXTranslationUnit_Incomplete = 2,
  CXTranslationUnit_PrecompiledPreamble = 4,
  CXTranslationUnit_CacheCompletionResults = 8,
  CXTranslationUnit_ForSerialization = 16,
  CXTranslationUnit_CXXChainedPCH = 32,
  CXTranslationUnit_SkipFunctionBodies = 64,
  CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128,
  CXTranslationUnit_CreatePreambleOnFirstParse = 256,
  CXTranslationUnit_KeepGoing = 512,
  CXTranslationUnit_SingleFileParse = 1024,
  CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048,
  CXTranslationUnit_IncludeAttributedTypes = 4096,
  CXTranslationUnit_VisitImplicitAttributes = 8192,
  CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384,
  CXTranslationUnit_RetainExcludedConditionalBlocks = 32768,
};
unsigned int clang_defaultEditingTranslationUnitOptions();
CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned int num_unsaved_files, unsigned int options);
enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit * out_TU);
enum CXErrorCode clang_parseTranslationUnit2FullArgv(CXIndex CIdx, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit * out_TU);
enum CXSaveTranslationUnit_Flags {
  CXSaveTranslationUnit_None = 0,
};
unsigned int clang_defaultSaveOptions(CXTranslationUnit TU);
enum CXSaveError {
  CXSaveError_None = 0,
  CXSaveError_Unknown = 1,
  CXSaveError_TranslationErrors = 2,
  CXSaveError_InvalidTU = 3,
};
int clang_saveTranslationUnit(CXTranslationUnit TU, const char * FileName, unsigned int options);
unsigned int clang_suspendTranslationUnit(CXTranslationUnit );
void clang_disposeTranslationUnit(CXTranslationUnit );
enum CXReparse_Flags {
  CXReparse_None = 0,
};
unsigned int clang_defaultReparseOptions(CXTranslationUnit TU);
int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile * unsaved_files, unsigned int options);
enum CXTUResourceUsageKind {
  CXTUResourceUsage_AST = 1,
  CXTUResourceUsage_Identifiers = 2,
  CXTUResourceUsage_Selectors = 3,
  CXTUResourceUsage_GlobalCompletionResults = 4,
  CXTUResourceUsage_SourceManagerContentCache = 5,
  CXTUResourceUsage_AST_SideTables = 6,
  CXTUResourceUsage_SourceManager_Membuffer_Malloc = 7,
  CXTUResourceUsage_SourceManager_Membuffer_MMap = 8,
  CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = 9,
  CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = 10,
  CXTUResourceUsage_Preprocessor = 11,
  CXTUResourceUsage_PreprocessingRecord = 12,
  CXTUResourceUsage_SourceManager_DataStructures = 13,
  CXTUResourceUsage_Preprocessor_HeaderSearch = 14,
  CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = 1,
  CXTUResourceUsage_MEMORY_IN_BYTES_END = 14,
  CXTUResourceUsage_First = 1,
  CXTUResourceUsage_Last = 14,
};
const char * clang_getTUResourceUsageName(enum CXTUResourceUsageKind kind);
typedef struct CXTUResourceUsageEntry {
  enum CXTUResourceUsageKind kind;
  unsigned long amount;
} CXTUResourceUsageEntry;

typedef struct CXTUResourceUsage {
  void * data;
  unsigned int numEntries;
  CXTUResourceUsageEntry * entries;
} CXTUResourceUsage;

CXTUResourceUsage clang_getCXTUResourceUsage(CXTranslationUnit TU);
void clang_disposeCXTUResourceUsage(CXTUResourceUsage usage);
CXTargetInfo clang_getTranslationUnitTargetInfo(CXTranslationUnit CTUnit);
void clang_TargetInfo_dispose(CXTargetInfo Info);
CXString clang_TargetInfo_getTriple(CXTargetInfo Info);
int clang_TargetInfo_getPointerWidth(CXTargetInfo Info);
enum CXCursorKind {
  CXCursor_UnexposedDecl = 1,
  CXCursor_StructDecl = 2,
  CXCursor_UnionDecl = 3,
  CXCursor_ClassDecl = 4,
  CXCursor_EnumDecl = 5,
  CXCursor_FieldDecl = 6,
  CXCursor_EnumConstantDecl = 7,
  CXCursor_FunctionDecl = 8,
  CXCursor_VarDecl = 9,
  CXCursor_ParmDecl = 10,
  CXCursor_ObjCInterfaceDecl = 11,
  CXCursor_ObjCCategoryDecl = 12,
  CXCursor_ObjCProtocolDecl = 13,
  CXCursor_ObjCPropertyDecl = 14,
  CXCursor_ObjCIvarDecl = 15,
  CXCursor_ObjCInstanceMethodDecl = 16,
  CXCursor_ObjCClassMethodDecl = 17,
  CXCursor_ObjCImplementationDecl = 18,
  CXCursor_ObjCCategoryImplDecl = 19,
  CXCursor_TypedefDecl = 20,
  CXCursor_CXXMethod = 21,
  CXCursor_Namespace = 22,
  CXCursor_LinkageSpec = 23,
  CXCursor_Constructor = 24,
  CXCursor_Destructor = 25,
  CXCursor_ConversionFunction = 26,
  CXCursor_TemplateTypeParameter = 27,
  CXCursor_NonTypeTemplateParameter = 28,
  CXCursor_TemplateTemplateParameter = 29,
  CXCursor_FunctionTemplate = 30,
  CXCursor_ClassTemplate = 31,
  CXCursor_ClassTemplatePartialSpecialization = 32,
  CXCursor_NamespaceAlias = 33,
  CXCursor_UsingDirective = 34,
  CXCursor_UsingDeclaration = 35,
  CXCursor_TypeAliasDecl = 36,
  CXCursor_ObjCSynthesizeDecl = 37,
  CXCursor_ObjCDynamicDecl = 38,
  CXCursor_CXXAccessSpecifier = 39,
  CXCursor_FirstDecl = 1,
  CXCursor_LastDecl = 39,
  CXCursor_FirstRef = 40,
  CXCursor_ObjCSuperClassRef = 40,
  CXCursor_ObjCProtocolRef = 41,
  CXCursor_ObjCClassRef = 42,
  CXCursor_TypeRef = 43,
  CXCursor_CXXBaseSpecifier = 44,
  CXCursor_TemplateRef = 45,
  CXCursor_NamespaceRef = 46,
  CXCursor_MemberRef = 47,
  CXCursor_LabelRef = 48,
  CXCursor_OverloadedDeclRef = 49,
  CXCursor_VariableRef = 50,
  CXCursor_LastRef = 50,
  CXCursor_FirstInvalid = 70,
  CXCursor_InvalidFile = 70,
  CXCursor_NoDeclFound = 71,
  CXCursor_NotImplemented = 72,
  CXCursor_InvalidCode = 73,
  CXCursor_LastInvalid = 73,
  CXCursor_FirstExpr = 100,
  CXCursor_UnexposedExpr = 100,
  CXCursor_DeclRefExpr = 101,
  CXCursor_MemberRefExpr = 102,
  CXCursor_CallExpr = 103,
  CXCursor_ObjCMessageExpr = 104,
  CXCursor_BlockExpr = 105,
  CXCursor_IntegerLiteral = 106,
  CXCursor_FloatingLiteral = 107,
  CXCursor_ImaginaryLiteral = 108,
  CXCursor_StringLiteral = 109,
  CXCursor_CharacterLiteral = 110,
  CXCursor_ParenExpr = 111,
  CXCursor_UnaryOperator = 112,
  CXCursor_ArraySubscriptExpr = 113,
  CXCursor_BinaryOperator = 114,
  CXCursor_CompoundAssignOperator = 115,
  CXCursor_ConditionalOperator = 116,
  CXCursor_CStyleCastExpr = 117,
  CXCursor_CompoundLiteralExpr = 118,
  CXCursor_InitListExpr = 119,
  CXCursor_AddrLabelExpr = 120,
  CXCursor_StmtExpr = 121,
  CXCursor_GenericSelectionExpr = 122,
  CXCursor_GNUNullExpr = 123,
  CXCursor_CXXStaticCastExpr = 124,
  CXCursor_CXXDynamicCastExpr = 125,
  CXCursor_CXXReinterpretCastExpr = 126,
  CXCursor_CXXConstCastExpr = 127,
  CXCursor_CXXFunctionalCastExpr = 128,
  CXCursor_CXXTypeidExpr = 129,
  CXCursor_CXXBoolLiteralExpr = 130,
  CXCursor_CXXNullPtrLiteralExpr = 131,
  CXCursor_CXXThisExpr = 132,
  CXCursor_CXXThrowExpr = 133,
  CXCursor_CXXNewExpr = 134,
  CXCursor_CXXDeleteExpr = 135,
  CXCursor_UnaryExpr = 136,
  CXCursor_ObjCStringLiteral = 137,
  CXCursor_ObjCEncodeExpr = 138,
  CXCursor_ObjCSelectorExpr = 139,
  CXCursor_ObjCProtocolExpr = 140,
  CXCursor_ObjCBridgedCastExpr = 141,
  CXCursor_PackExpansionExpr = 142,
  CXCursor_SizeOfPackExpr = 143,
  CXCursor_LambdaExpr = 144,
  CXCursor_ObjCBoolLiteralExpr = 145,
  CXCursor_ObjCSelfExpr = 146,
  CXCursor_OMPArraySectionExpr = 147,
  CXCursor_ObjCAvailabilityCheckExpr = 148,
  CXCursor_FixedPointLiteral = 149,
  CXCursor_LastExpr = 149,
  CXCursor_FirstStmt = 200,
  CXCursor_UnexposedStmt = 200,
  CXCursor_LabelStmt = 201,
  CXCursor_CompoundStmt = 202,
  CXCursor_CaseStmt = 203,
  CXCursor_DefaultStmt = 204,
  CXCursor_IfStmt = 205,
  CXCursor_SwitchStmt = 206,
  CXCursor_WhileStmt = 207,
  CXCursor_DoStmt = 208,
  CXCursor_ForStmt = 209,
  CXCursor_GotoStmt = 210,
  CXCursor_IndirectGotoStmt = 211,
  CXCursor_ContinueStmt = 212,
  CXCursor_BreakStmt = 213,
  CXCursor_ReturnStmt = 214,
  CXCursor_GCCAsmStmt = 215,
  CXCursor_AsmStmt = 215,
  CXCursor_ObjCAtTryStmt = 216,
  CXCursor_ObjCAtCatchStmt = 217,
  CXCursor_ObjCAtFinallyStmt = 218,
  CXCursor_ObjCAtThrowStmt = 219,
  CXCursor_ObjCAtSynchronizedStmt = 220,
  CXCursor_ObjCAutoreleasePoolStmt = 221,
  CXCursor_ObjCForCollectionStmt = 222,
  CXCursor_CXXCatchStmt = 223,
  CXCursor_CXXTryStmt = 224,
  CXCursor_CXXForRangeStmt = 225,
  CXCursor_SEHTryStmt = 226,
  CXCursor_SEHExceptStmt = 227,
  CXCursor_SEHFinallyStmt = 228,
  CXCursor_MSAsmStmt = 229,
  CXCursor_NullStmt = 230,
  CXCursor_DeclStmt = 231,
  CXCursor_OMPParallelDirective = 232,
  CXCursor_OMPSimdDirective = 233,
  CXCursor_OMPForDirective = 234,
  CXCursor_OMPSectionsDirective = 235,
  CXCursor_OMPSectionDirective = 236,
  CXCursor_OMPSingleDirective = 237,
  CXCursor_OMPParallelForDirective = 238,
  CXCursor_OMPParallelSectionsDirective = 239,
  CXCursor_OMPTaskDirective = 240,
  CXCursor_OMPMasterDirective = 241,
  CXCursor_OMPCriticalDirective = 242,
  CXCursor_OMPTaskyieldDirective = 243,
  CXCursor_OMPBarrierDirective = 244,
  CXCursor_OMPTaskwaitDirective = 245,
  CXCursor_OMPFlushDirective = 246,
  CXCursor_SEHLeaveStmt = 247,
  CXCursor_OMPOrderedDirective = 248,
  CXCursor_OMPAtomicDirective = 249,
  CXCursor_OMPForSimdDirective = 250,
  CXCursor_OMPParallelForSimdDirective = 251,
  CXCursor_OMPTargetDirective = 252,
  CXCursor_OMPTeamsDirective = 253,
  CXCursor_OMPTaskgroupDirective = 254,
  CXCursor_OMPCancellationPointDirective = 255,
  CXCursor_OMPCancelDirective = 256,
  CXCursor_OMPTargetDataDirective = 257,
  CXCursor_OMPTaskLoopDirective = 258,
  CXCursor_OMPTaskLoopSimdDirective = 259,
  CXCursor_OMPDistributeDirective = 260,
  CXCursor_OMPTargetEnterDataDirective = 261,
  CXCursor_OMPTargetExitDataDirective = 262,
  CXCursor_OMPTargetParallelDirective = 263,
  CXCursor_OMPTargetParallelForDirective = 264,
  CXCursor_OMPTargetUpdateDirective = 265,
  CXCursor_OMPDistributeParallelForDirective = 266,
  CXCursor_OMPDistributeParallelForSimdDirective = 267,
  CXCursor_OMPDistributeSimdDirective = 268,
  CXCursor_OMPTargetParallelForSimdDirective = 269,
  CXCursor_OMPTargetSimdDirective = 270,
  CXCursor_OMPTeamsDistributeDirective = 271,
  CXCursor_OMPTeamsDistributeSimdDirective = 272,
  CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273,
  CXCursor_OMPTeamsDistributeParallelForDirective = 274,
  CXCursor_OMPTargetTeamsDirective = 275,
  CXCursor_OMPTargetTeamsDistributeDirective = 276,
  CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277,
  CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278,
  CXCursor_OMPTargetTeamsDistributeSimdDirective = 279,
  CXCursor_BuiltinBitCastExpr = 280,
  CXCursor_OMPMasterTaskLoopDirective = 281,
  CXCursor_OMPParallelMasterTaskLoopDirective = 282,
  CXCursor_OMPMasterTaskLoopSimdDirective = 283,
  CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284,
  CXCursor_OMPParallelMasterDirective = 285,
  CXCursor_LastStmt = 285,
  CXCursor_TranslationUnit = 300,
  CXCursor_FirstAttr = 400,
  CXCursor_UnexposedAttr = 400,
  CXCursor_IBActionAttr = 401,
  CXCursor_IBOutletAttr = 402,
  CXCursor_IBOutletCollectionAttr = 403,
  CXCursor_CXXFinalAttr = 404,
  CXCursor_CXXOverrideAttr = 405,
  CXCursor_AnnotateAttr = 406,
  CXCursor_AsmLabelAttr = 407,
  CXCursor_PackedAttr = 408,
  CXCursor_PureAttr = 409,
  CXCursor_ConstAttr = 410,
  CXCursor_NoDuplicateAttr = 411,
  CXCursor_CUDAConstantAttr = 412,
  CXCursor_CUDADeviceAttr = 413,
  CXCursor_CUDAGlobalAttr = 414,
  CXCursor_CUDAHostAttr = 415,
  CXCursor_CUDASharedAttr = 416,
  CXCursor_VisibilityAttr = 417,
  CXCursor_DLLExport = 418,
  CXCursor_DLLImport = 419,
  CXCursor_NSReturnsRetained = 420,
  CXCursor_NSReturnsNotRetained = 421,
  CXCursor_NSReturnsAutoreleased = 422,
  CXCursor_NSConsumesSelf = 423,
  CXCursor_NSConsumed = 424,
  CXCursor_ObjCException = 425,
  CXCursor_ObjCNSObject = 426,
  CXCursor_ObjCIndependentClass = 427,
  CXCursor_ObjCPreciseLifetime = 428,
  CXCursor_ObjCReturnsInnerPointer = 429,
  CXCursor_ObjCRequiresSuper = 430,
  CXCursor_ObjCRootClass = 431,
  CXCursor_ObjCSubclassingRestricted = 432,
  CXCursor_ObjCExplicitProtocolImpl = 433,
  CXCursor_ObjCDesignatedInitializer = 434,
  CXCursor_ObjCRuntimeVisible = 435,
  CXCursor_ObjCBoxable = 436,
  CXCursor_FlagEnum = 437,
  CXCursor_ConvergentAttr = 438,
  CXCursor_WarnUnusedAttr = 439,
  CXCursor_WarnUnusedResultAttr = 440,
  CXCursor_AlignedAttr = 441,
  CXCursor_LastAttr = 441,
  CXCursor_PreprocessingDirective = 500,
  CXCursor_MacroDefinition = 501,
  CXCursor_MacroExpansion = 502,
  CXCursor_MacroInstantiation = 502,
  CXCursor_InclusionDirective = 503,
  CXCursor_FirstPreprocessing = 500,
  CXCursor_LastPreprocessing = 503,
  CXCursor_ModuleImportDecl = 600,
  CXCursor_TypeAliasTemplateDecl = 601,
  CXCursor_StaticAssert = 602,
  CXCursor_FriendDecl = 603,
  CXCursor_FirstExtraDecl = 600,
  CXCursor_LastExtraDecl = 603,
  CXCursor_OverloadCandidate = 700,
};
typedef struct  {
  enum CXCursorKind kind;
  int xdata;
  const void *data[3];
} CXCursor;

CXCursor clang_getNullCursor();
CXCursor clang_getTranslationUnitCursor(CXTranslationUnit );
unsigned int clang_equalCursors(CXCursor , CXCursor );
int clang_Cursor_isNull(CXCursor cursor);
unsigned int clang_hashCursor(CXCursor );
enum CXCursorKind clang_getCursorKind(CXCursor );
unsigned int clang_isDeclaration(enum CXCursorKind );
unsigned int clang_isInvalidDeclaration(CXCursor );
unsigned int clang_isReference(enum CXCursorKind );
unsigned int clang_isExpression(enum CXCursorKind );
unsigned int clang_isStatement(enum CXCursorKind );
unsigned int clang_isAttribute(enum CXCursorKind );
unsigned int clang_Cursor_hasAttrs(CXCursor C);
unsigned int clang_isInvalid(enum CXCursorKind );
unsigned int clang_isTranslationUnit(enum CXCursorKind );
unsigned int clang_isPreprocessing(enum CXCursorKind );
unsigned int clang_isUnexposed(enum CXCursorKind );
enum CXLinkageKind {
  CXLinkage_Invalid = 0,
  CXLinkage_NoLinkage = 1,
  CXLinkage_Internal = 2,
  CXLinkage_UniqueExternal = 3,
  CXLinkage_External = 4,
};
enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor);
enum CXVisibilityKind {
  CXVisibility_Invalid = 0,
  CXVisibility_Hidden = 1,
  CXVisibility_Protected = 2,
  CXVisibility_Default = 3,
};
enum CXVisibilityKind clang_getCursorVisibility(CXCursor cursor);
enum CXAvailabilityKind clang_getCursorAvailability(CXCursor cursor);
typedef struct CXPlatformAvailability {
  CXString Platform;
  CXVersion Introduced;
  CXVersion Deprecated;
  CXVersion Obsoleted;
  int Unavailable;
  CXString Message;
} CXPlatformAvailability;

int clang_getCursorPlatformAvailability(CXCursor cursor, int * always_deprecated, CXString * deprecated_message, int * always_unavailable, CXString * unavailable_message, CXPlatformAvailability * availability, int availability_size);
void clang_disposeCXPlatformAvailability(CXPlatformAvailability * availability);
enum CXLanguageKind {
  CXLanguage_Invalid = 0,
  CXLanguage_C = 1,
  CXLanguage_ObjC = 2,
  CXLanguage_CPlusPlus = 3,
};
enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor);
enum CXTLSKind {
  CXTLS_None = 0,
  CXTLS_Dynamic = 1,
  CXTLS_Static = 2,
};
enum CXTLSKind clang_getCursorTLSKind(CXCursor cursor);
CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor );
struct CXCursorSetImpl;
typedef struct CXCursorSetImpl *CXCursorSet;
CXCursorSet clang_createCXCursorSet();
void clang_disposeCXCursorSet(CXCursorSet cset);
unsigned int clang_CXCursorSet_contains(CXCursorSet cset, CXCursor cursor);
unsigned int clang_CXCursorSet_insert(CXCursorSet cset, CXCursor cursor);
CXCursor clang_getCursorSemanticParent(CXCursor cursor);
CXCursor clang_getCursorLexicalParent(CXCursor cursor);
void clang_getOverriddenCursors(CXCursor cursor, CXCursor ** overridden, unsigned int * num_overridden);
void clang_disposeOverriddenCursors(CXCursor * overridden);
CXFile clang_getIncludedFile(CXCursor cursor);
CXCursor clang_getCursor(CXTranslationUnit , CXSourceLocation );
CXSourceLocation clang_getCursorLocation(CXCursor );
CXSourceRange clang_getCursorExtent(CXCursor );
enum CXTypeKind {
  CXType_Invalid = 0,
  CXType_Unexposed = 1,
  CXType_Void = 2,
  CXType_Bool = 3,
  CXType_Char_U = 4,
  CXType_UChar = 5,
  CXType_Char16 = 6,
  CXType_Char32 = 7,
  CXType_UShort = 8,
  CXType_UInt = 9,
  CXType_ULong = 10,
  CXType_ULongLong = 11,
  CXType_UInt128 = 12,
  CXType_Char_S = 13,
  CXType_SChar = 14,
  CXType_WChar = 15,
  CXType_Short = 16,
  CXType_Int = 17,
  CXType_Long = 18,
  CXType_LongLong = 19,
  CXType_Int128 = 20,
  CXType_Float = 21,
  CXType_Double = 22,
  CXType_LongDouble = 23,
  CXType_NullPtr = 24,
  CXType_Overload = 25,
  CXType_Dependent = 26,
  CXType_ObjCId = 27,
  CXType_ObjCClass = 28,
  CXType_ObjCSel = 29,
  CXType_Float128 = 30,
  CXType_Half = 31,
  CXType_Float16 = 32,
  CXType_ShortAccum = 33,
  CXType_Accum = 34,
  CXType_LongAccum = 35,
  CXType_UShortAccum = 36,
  CXType_UAccum = 37,
  CXType_ULongAccum = 38,
  CXType_FirstBuiltin = 2,
  CXType_LastBuiltin = 38,
  CXType_Complex = 100,
  CXType_Pointer = 101,
  CXType_BlockPointer = 102,
  CXType_LValueReference = 103,
  CXType_RValueReference = 104,
  CXType_Record = 105,
  CXType_Enum = 106,
  CXType_Typedef = 107,
  CXType_ObjCInterface = 108,
  CXType_ObjCObjectPointer = 109,
  CXType_FunctionNoProto = 110,
  CXType_FunctionProto = 111,
  CXType_ConstantArray = 112,
  CXType_Vector = 113,
  CXType_IncompleteArray = 114,
  CXType_VariableArray = 115,
  CXType_DependentSizedArray = 116,
  CXType_MemberPointer = 117,
  CXType_Auto = 118,
  CXType_Elaborated = 119,
  CXType_Pipe = 120,
  CXType_OCLImage1dRO = 121,
  CXType_OCLImage1dArrayRO = 122,
  CXType_OCLImage1dBufferRO = 123,
  CXType_OCLImage2dRO = 124,
  CXType_OCLImage2dArrayRO = 125,
  CXType_OCLImage2dDepthRO = 126,
  CXType_OCLImage2dArrayDepthRO = 127,
  CXType_OCLImage2dMSAARO = 128,
  CXType_OCLImage2dArrayMSAARO = 129,
  CXType_OCLImage2dMSAADepthRO = 130,
  CXType_OCLImage2dArrayMSAADepthRO = 131,
  CXType_OCLImage3dRO = 132,
  CXType_OCLImage1dWO = 133,
  CXType_OCLImage1dArrayWO = 134,
  CXType_OCLImage1dBufferWO = 135,
  CXType_OCLImage2dWO = 136,
  CXType_OCLImage2dArrayWO = 137,
  CXType_OCLImage2dDepthWO = 138,
  CXType_OCLImage2dArrayDepthWO = 139,
  CXType_OCLImage2dMSAAWO = 140,
  CXType_OCLImage2dArrayMSAAWO = 141,
  CXType_OCLImage2dMSAADepthWO = 142,
  CXType_OCLImage2dArrayMSAADepthWO = 143,
  CXType_OCLImage3dWO = 144,
  CXType_OCLImage1dRW = 145,
  CXType_OCLImage1dArrayRW = 146,
  CXType_OCLImage1dBufferRW = 147,
  CXType_OCLImage2dRW = 148,
  CXType_OCLImage2dArrayRW = 149,
  CXType_OCLImage2dDepthRW = 150,
  CXType_OCLImage2dArrayDepthRW = 151,
  CXType_OCLImage2dMSAARW = 152,
  CXType_OCLImage2dArrayMSAARW = 153,
  CXType_OCLImage2dMSAADepthRW = 154,
  CXType_OCLImage2dArrayMSAADepthRW = 155,
  CXType_OCLImage3dRW = 156,
  CXType_OCLSampler = 157,
  CXType_OCLEvent = 158,
  CXType_OCLQueue = 159,
  CXType_OCLReserveID = 160,
  CXType_ObjCObject = 161,
  CXType_ObjCTypeParam = 162,
  CXType_Attributed = 163,
  CXType_OCLIntelSubgroupAVCMcePayload = 164,
  CXType_OCLIntelSubgroupAVCImePayload = 165,
  CXType_OCLIntelSubgroupAVCRefPayload = 166,
  CXType_OCLIntelSubgroupAVCSicPayload = 167,
  CXType_OCLIntelSubgroupAVCMceResult = 168,
  CXType_OCLIntelSubgroupAVCImeResult = 169,
  CXType_OCLIntelSubgroupAVCRefResult = 170,
  CXType_OCLIntelSubgroupAVCSicResult = 171,
  CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172,
  CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173,
  CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174,
  CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175,
  CXType_ExtVector = 176,
};
enum CXCallingConv {
  CXCallingConv_Default = 0,
  CXCallingConv_C = 1,
  CXCallingConv_X86StdCall = 2,
  CXCallingConv_X86FastCall = 3,
  CXCallingConv_X86ThisCall = 4,
  CXCallingConv_X86Pascal = 5,
  CXCallingConv_AAPCS = 6,
  CXCallingConv_AAPCS_VFP = 7,
  CXCallingConv_X86RegCall = 8,
  CXCallingConv_IntelOclBicc = 9,
  CXCallingConv_Win64 = 10,
  CXCallingConv_X86_64Win64 = 10,
  CXCallingConv_X86_64SysV = 11,
  CXCallingConv_X86VectorCall = 12,
  CXCallingConv_Swift = 13,
  CXCallingConv_PreserveMost = 14,
  CXCallingConv_PreserveAll = 15,
  CXCallingConv_AArch64VectorCall = 16,
  CXCallingConv_Invalid = 100,
  CXCallingConv_Unexposed = 200,
};
typedef struct  {
  enum CXTypeKind kind;
  void *data[2];
} CXType;

CXType clang_getCursorType(CXCursor C);
CXString clang_getTypeSpelling(CXType CT);
CXType clang_getTypedefDeclUnderlyingType(CXCursor C);
CXType clang_getEnumDeclIntegerType(CXCursor C);
long long clang_getEnumConstantDeclValue(CXCursor C);
unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C);
int clang_getFieldDeclBitWidth(CXCursor C);
int clang_Cursor_getNumArguments(CXCursor C);
CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i);
enum CXTemplateArgumentKind {
  CXTemplateArgumentKind_Null = 0,
  CXTemplateArgumentKind_Type = 1,
  CXTemplateArgumentKind_Declaration = 2,
  CXTemplateArgumentKind_NullPtr = 3,
  CXTemplateArgumentKind_Integral = 4,
  CXTemplateArgumentKind_Template = 5,
  CXTemplateArgumentKind_TemplateExpansion = 6,
  CXTemplateArgumentKind_Expression = 7,
  CXTemplateArgumentKind_Pack = 8,
  CXTemplateArgumentKind_Invalid = 9,
};
int clang_Cursor_getNumTemplateArguments(CXCursor C);
enum CXTemplateArgumentKind clang_Cursor_getTemplateArgumentKind(CXCursor C, unsigned int I);
CXType clang_Cursor_getTemplateArgumentType(CXCursor C, unsigned int I);
long long clang_Cursor_getTemplateArgumentValue(CXCursor C, unsigned int I);
unsigned long long clang_Cursor_getTemplateArgumentUnsignedValue(CXCursor C, unsigned int I);
unsigned int clang_equalTypes(CXType A, CXType B);
CXType clang_getCanonicalType(CXType T);
unsigned int clang_isConstQualifiedType(CXType T);
unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C);
unsigned int clang_Cursor_isMacroBuiltin(CXCursor C);
unsigned int clang_Cursor_isFunctionInlined(CXCursor C);
unsigned int clang_isVolatileQualifiedType(CXType T);
unsigned int clang_isRestrictQualifiedType(CXType T);
unsigned int clang_getAddressSpace(CXType T);
CXString clang_getTypedefName(CXType CT);
CXType clang_getPointeeType(CXType T);
CXCursor clang_getTypeDeclaration(CXType T);
CXString clang_getDeclObjCTypeEncoding(CXCursor C);
CXString clang_Type_getObjCEncoding(CXType type);
CXString clang_getTypeKindSpelling(enum CXTypeKind K);
enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T);
CXType clang_getResultType(CXType T);
int clang_getExceptionSpecificationType(CXType T);
int clang_getNumArgTypes(CXType T);
CXType clang_getArgType(CXType T, unsigned int i);
CXType clang_Type_getObjCObjectBaseType(CXType T);
unsigned int clang_Type_getNumObjCProtocolRefs(CXType T);
CXCursor clang_Type_getObjCProtocolDecl(CXType T, unsigned int i);
unsigned int clang_Type_getNumObjCTypeArgs(CXType T);
CXType clang_Type_getObjCTypeArg(CXType T, unsigned int i);
unsigned int clang_isFunctionTypeVariadic(CXType T);
CXType clang_getCursorResultType(CXCursor C);
int clang_getCursorExceptionSpecificationType(CXCursor C);
unsigned int clang_isPODType(CXType T);
CXType clang_getElementType(CXType T);
long long clang_getNumElements(CXType T);
CXType clang_getArrayElementType(CXType T);
long long clang_getArraySize(CXType T);
CXType clang_Type_getNamedType(CXType T);
unsigned int clang_Type_isTransparentTagTypedef(CXType T);
enum CXTypeNullabilityKind {
  CXTypeNullability_NonNull = 0,
  CXTypeNullability_Nullable = 1,
  CXTypeNullability_Unspecified = 2,
  CXTypeNullability_Invalid = 3,
};
enum CXTypeNullabilityKind clang_Type_getNullability(CXType T);
enum CXTypeLayoutError {
  CXTypeLayoutError_Invalid = -1,
  CXTypeLayoutError_Incomplete = -2,
  CXTypeLayoutError_Dependent = -3,
  CXTypeLayoutError_NotConstantSize = -4,
  CXTypeLayoutError_InvalidFieldName = -5,
  CXTypeLayoutError_Undeduced = -6,
};
long long clang_Type_getAlignOf(CXType T);
CXType clang_Type_getClassType(CXType T);
long long clang_Type_getSizeOf(CXType T);
long long clang_Type_getOffsetOf(CXType T, const char * S);
CXType clang_Type_getModifiedType(CXType T);
long long clang_Cursor_getOffsetOfField(CXCursor C);
unsigned int clang_Cursor_isAnonymous(CXCursor C);
unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C);
unsigned int clang_Cursor_isInlineNamespace(CXCursor C);
enum CXRefQualifierKind {
  CXRefQualifier_None = 0,
  CXRefQualifier_LValue = 1,
  CXRefQualifier_RValue = 2,
};
int clang_Type_getNumTemplateArguments(CXType T);
CXType clang_Type_getTemplateArgumentAsType(CXType T, unsigned int i);
enum CXRefQualifierKind clang_Type_getCXXRefQualifier(CXType T);
unsigned int clang_Cursor_isBitField(CXCursor C);
unsigned int clang_isVirtualBase(CXCursor );
enum CX_CXXAccessSpecifier {
  CX_CXXInvalidAccessSpecifier = 0,
  CX_CXXPublic = 1,
  CX_CXXProtected = 2,
  CX_CXXPrivate = 3,
};
enum CX_CXXAccessSpecifier clang_getCXXAccessSpecifier(CXCursor );
enum CX_StorageClass {
  CX_SC_Invalid = 0,
  CX_SC_None = 1,
  CX_SC_Extern = 2,
  CX_SC_Static = 3,
  CX_SC_PrivateExtern = 4,
  CX_SC_OpenCLWorkGroupLocal = 5,
  CX_SC_Auto = 6,
  CX_SC_Register = 7,
};
enum CX_StorageClass clang_Cursor_getStorageClass(CXCursor );
unsigned int clang_getNumOverloadedDecls(CXCursor cursor);
CXCursor clang_getOverloadedDecl(CXCursor cursor, unsigned int index);
CXType clang_getIBOutletCollectionType(CXCursor );
enum CXChildVisitResult {
  CXChildVisit_Break = 0,
  CXChildVisit_Continue = 1,
  CXChildVisit_Recurse = 2,
};
typedef enum CXChildVisitResult (*CXCursorVisitor)(CXCursor cursor,
                                                   CXCursor parent,
                                                   CXClientData client_data);
unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data);
CXString clang_getCursorUSR(CXCursor );
CXString clang_constructUSR_ObjCClass(const char * class_name);
CXString clang_constructUSR_ObjCCategory(const char * class_name, const char * category_name);
CXString clang_constructUSR_ObjCProtocol(const char * protocol_name);
CXString clang_constructUSR_ObjCIvar(const char * name, CXString classUSR);
CXString clang_constructUSR_ObjCMethod(const char * name, unsigned int isInstanceMethod, CXString classUSR);
CXString clang_constructUSR_ObjCProperty(const char * property, CXString classUSR);
CXString clang_getCursorSpelling(CXCursor );
CXSourceRange clang_Cursor_getSpellingNameRange(CXCursor , unsigned int pieceIndex, unsigned int options);
typedef void *CXPrintingPolicy;
enum CXPrintingPolicyProperty {
  CXPrintingPolicy_Indentation = 0,
  CXPrintingPolicy_SuppressSpecifiers = 1,
  CXPrintingPolicy_SuppressTagKeyword = 2,
  CXPrintingPolicy_IncludeTagDefinition = 3,
  CXPrintingPolicy_SuppressScope = 4,
  CXPrintingPolicy_SuppressUnwrittenScope = 5,
  CXPrintingPolicy_SuppressInitializers = 6,
  CXPrintingPolicy_ConstantArraySizeAsWritten = 7,
  CXPrintingPolicy_AnonymousTagLocations = 8,
  CXPrintingPolicy_SuppressStrongLifetime = 9,
  CXPrintingPolicy_SuppressLifetimeQualifiers = 10,
  CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11,
  CXPrintingPolicy_Bool = 12,
  CXPrintingPolicy_Restrict = 13,
  CXPrintingPolicy_Alignof = 14,
  CXPrintingPolicy_UnderscoreAlignof = 15,
  CXPrintingPolicy_UseVoidForZeroParams = 16,
  CXPrintingPolicy_TerseOutput = 17,
  CXPrintingPolicy_PolishForDeclaration = 18,
  CXPrintingPolicy_Half = 19,
  CXPrintingPolicy_MSWChar = 20,
  CXPrintingPolicy_IncludeNewlines = 21,
  CXPrintingPolicy_MSVCFormatting = 22,
  CXPrintingPolicy_ConstantsAsWritten = 23,
  CXPrintingPolicy_SuppressImplicitBase = 24,
  CXPrintingPolicy_FullyQualifiedName = 25,
  CXPrintingPolicy_LastProperty = 25,
};
unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property);
void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value);
CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor );
void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy);
CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy);
CXString clang_getCursorDisplayName(CXCursor );
CXCursor clang_getCursorReferenced(CXCursor );
CXCursor clang_getCursorDefinition(CXCursor );
unsigned int clang_isCursorDefinition(CXCursor );
CXCursor clang_getCanonicalCursor(CXCursor );
int clang_Cursor_getObjCSelectorIndex(CXCursor );
int clang_Cursor_isDynamicCall(CXCursor C);
CXType clang_Cursor_getReceiverType(CXCursor C);
typedef enum  {
  CXObjCPropertyAttr_noattr = 0,
  CXObjCPropertyAttr_readonly = 1,
  CXObjCPropertyAttr_getter = 2,
  CXObjCPropertyAttr_assign = 4,
  CXObjCPropertyAttr_readwrite = 8,
  CXObjCPropertyAttr_retain = 16,
  CXObjCPropertyAttr_copy = 32,
  CXObjCPropertyAttr_nonatomic = 64,
  CXObjCPropertyAttr_setter = 128,
  CXObjCPropertyAttr_atomic = 256,
  CXObjCPropertyAttr_weak = 512,
  CXObjCPropertyAttr_strong = 1024,
  CXObjCPropertyAttr_unsafe_unretained = 2048,
  CXObjCPropertyAttr_class = 4096,
} CXObjCPropertyAttrKind;

unsigned int clang_Cursor_getObjCPropertyAttributes(CXCursor C, unsigned int reserved);
CXString clang_Cursor_getObjCPropertyGetterName(CXCursor C);
CXString clang_Cursor_getObjCPropertySetterName(CXCursor C);
typedef enum  {
  CXObjCDeclQualifier_None = 0,
  CXObjCDeclQualifier_In = 1,
  CXObjCDeclQualifier_Inout = 2,
  CXObjCDeclQualifier_Out = 4,
  CXObjCDeclQualifier_Bycopy = 8,
  CXObjCDeclQualifier_Byref = 16,
  CXObjCDeclQualifier_Oneway = 32,
} CXObjCDeclQualifierKind;

unsigned int clang_Cursor_getObjCDeclQualifiers(CXCursor C);
unsigned int clang_Cursor_isObjCOptional(CXCursor C);
unsigned int clang_Cursor_isVariadic(CXCursor C);
unsigned int clang_Cursor_isExternalSymbol(CXCursor C, CXString * language, CXString * definedIn, unsigned int * isGenerated);
CXSourceRange clang_Cursor_getCommentRange(CXCursor C);
CXString clang_Cursor_getRawCommentText(CXCursor C);
CXString clang_Cursor_getBriefCommentText(CXCursor C);
CXString clang_Cursor_getMangling(CXCursor );
CXStringSet * clang_Cursor_getCXXManglings(CXCursor );
CXStringSet * clang_Cursor_getObjCManglings(CXCursor );
typedef void *CXModule;
CXModule clang_Cursor_getModule(CXCursor C);
CXModule clang_getModuleForFile(CXTranslationUnit , CXFile );
CXFile clang_Module_getASTFile(CXModule Module);
CXModule clang_Module_getParent(CXModule Module);
CXString clang_Module_getName(CXModule Module);
CXString clang_Module_getFullName(CXModule Module);
int clang_Module_isSystem(CXModule Module);
unsigned int clang_Module_getNumTopLevelHeaders(CXTranslationUnit , CXModule Module);
CXFile clang_Module_getTopLevelHeader(CXTranslationUnit , CXModule Module, unsigned int Index);
unsigned int clang_CXXConstructor_isConvertingConstructor(CXCursor C);
unsigned int clang_CXXConstructor_isCopyConstructor(CXCursor C);
unsigned int clang_CXXConstructor_isDefaultConstructor(CXCursor C);
unsigned int clang_CXXConstructor_isMoveConstructor(CXCursor C);
unsigned int clang_CXXField_isMutable(CXCursor C);
unsigned int clang_CXXMethod_isDefaulted(CXCursor C);
unsigned int clang_CXXMethod_isPureVirtual(CXCursor C);
unsigned int clang_CXXMethod_isStatic(CXCursor C);
unsigned int clang_CXXMethod_isVirtual(CXCursor C);
unsigned int clang_CXXRecord_isAbstract(CXCursor C);
unsigned int clang_EnumDecl_isScoped(CXCursor C);
unsigned int clang_CXXMethod_isConst(CXCursor C);
enum CXCursorKind clang_getTemplateCursorKind(CXCursor C);
CXCursor clang_getSpecializedCursorTemplate(CXCursor C);
CXSourceRange clang_getCursorReferenceNameRange(CXCursor C, unsigned int NameFlags, unsigned int PieceIndex);
enum CXNameRefFlags {
  CXNameRange_WantQualifier = 1,
  CXNameRange_WantTemplateArgs = 2,
  CXNameRange_WantSinglePiece = 4,
};
typedef enum CXTokenKind {
  CXToken_Punctuation = 0,
  CXToken_Keyword = 1,
  CXToken_Identifier = 2,
  CXToken_Literal = 3,
  CXToken_Comment = 4,
} CXTokenKind;

typedef struct  {
  unsigned int int_data[4];
  void * ptr_data;
} CXToken;

CXToken * clang_getToken(CXTranslationUnit TU, CXSourceLocation Location);
CXTokenKind clang_getTokenKind(CXToken );
CXString clang_getTokenSpelling(CXTranslationUnit , CXToken );
CXSourceLocation clang_getTokenLocation(CXTranslationUnit , CXToken );
CXSourceRange clang_getTokenExtent(CXTranslationUnit , CXToken );
void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken ** Tokens, unsigned int * NumTokens);
void clang_annotateTokens(CXTranslationUnit TU, CXToken * Tokens, unsigned int NumTokens, CXCursor * Cursors);
void clang_disposeTokens(CXTranslationUnit TU, CXToken * Tokens, unsigned int NumTokens);
CXString clang_getCursorKindSpelling(enum CXCursorKind Kind);
void clang_getDefinitionSpellingAndExtent(CXCursor , const char ** startBuf, const char ** endBuf, unsigned int * startLine, unsigned int * startColumn, unsigned int * endLine, unsigned int * endColumn);
void clang_enableStackTraces();
void clang_executeOnThread(void (*fn)(void *), void * user_data, unsigned int stack_size);
typedef void *CXCompletionString;
typedef struct  {
  enum CXCursorKind CursorKind;
  CXCompletionString CompletionString;
} CXCompletionResult;

enum CXCompletionChunkKind {
  CXCompletionChunk_Optional = 0,
  CXCompletionChunk_TypedText = 1,
  CXCompletionChunk_Text = 2,
  CXCompletionChunk_Placeholder = 3,
  CXCompletionChunk_Informative = 4,
  CXCompletionChunk_CurrentParameter = 5,
  CXCompletionChunk_LeftParen = 6,
  CXCompletionChunk_RightParen = 7,
  CXCompletionChunk_LeftBracket = 8,
  CXCompletionChunk_RightBracket = 9,
  CXCompletionChunk_LeftBrace = 10,
  CXCompletionChunk_RightBrace = 11,
  CXCompletionChunk_LeftAngle = 12,
  CXCompletionChunk_RightAngle = 13,
  CXCompletionChunk_Comma = 14,
  CXCompletionChunk_ResultType = 15,
  CXCompletionChunk_Colon = 16,
  CXCompletionChunk_SemiColon = 17,
  CXCompletionChunk_Equal = 18,
  CXCompletionChunk_HorizontalSpace = 19,
  CXCompletionChunk_VerticalSpace = 20,
};
enum CXCompletionChunkKind clang_getCompletionChunkKind(CXCompletionString completion_string, unsigned int chunk_number);
CXString clang_getCompletionChunkText(CXCompletionString completion_string, unsigned int chunk_number);
CXCompletionString clang_getCompletionChunkCompletionString(CXCompletionString completion_string, unsigned int chunk_number);
unsigned int clang_getNumCompletionChunks(CXCompletionString completion_string);
unsigned int clang_getCompletionPriority(CXCompletionString completion_string);
enum CXAvailabilityKind clang_getCompletionAvailability(CXCompletionString completion_string);
unsigned int clang_getCompletionNumAnnotations(CXCompletionString completion_string);
CXString clang_getCompletionAnnotation(CXCompletionString completion_string, unsigned int annotation_number);
CXString clang_getCompletionParent(CXCompletionString completion_string, enum CXCursorKind * kind);
CXString clang_getCompletionBriefComment(CXCompletionString completion_string);
CXCompletionString clang_getCursorCompletionString(CXCursor cursor);
typedef struct  {
  CXCompletionResult * Results;
  unsigned int NumResults;
} CXCodeCompleteResults;

unsigned int clang_getCompletionNumFixIts(CXCodeCompleteResults * results, unsigned int completion_index);
CXString clang_getCompletionFixIt(CXCodeCompleteResults * results, unsigned int completion_index, unsigned int fixit_index, CXSourceRange * replacement_range);
enum CXCodeComplete_Flags {
  CXCodeComplete_IncludeMacros = 1,
  CXCodeComplete_IncludeCodePatterns = 2,
  CXCodeComplete_IncludeBriefComments = 4,
  CXCodeComplete_SkipPreamble = 8,
  CXCodeComplete_IncludeCompletionsWithFixIts = 16,
};
enum CXCompletionContext {
  CXCompletionContext_Unexposed = 0,
  CXCompletionContext_AnyType = 1,
  CXCompletionContext_AnyValue = 2,
  CXCompletionContext_ObjCObjectValue = 4,
  CXCompletionContext_ObjCSelectorValue = 8,
  CXCompletionContext_CXXClassTypeValue = 16,
  CXCompletionContext_DotMemberAccess = 32,
  CXCompletionContext_ArrowMemberAccess = 64,
  CXCompletionContext_ObjCPropertyAccess = 128,
  CXCompletionContext_EnumTag = 256,
  CXCompletionContext_UnionTag = 512,
  CXCompletionContext_StructTag = 1024,
  CXCompletionContext_ClassTag = 2048,
  CXCompletionContext_Namespace = 4096,
  CXCompletionContext_NestedNameSpecifier = 8192,
  CXCompletionContext_ObjCInterface = 16384,
  CXCompletionContext_ObjCProtocol = 32768,
  CXCompletionContext_ObjCCategory = 65536,
  CXCompletionContext_ObjCInstanceMessage = 131072,
  CXCompletionContext_ObjCClassMessage = 262144,
  CXCompletionContext_ObjCSelectorName = 524288,
  CXCompletionContext_MacroName = 1048576,
  CXCompletionContext_NaturalLanguage = 2097152,
  CXCompletionContext_IncludedFile = 4194304,
  CXCompletionContext_Unknown = 8388607,
};
unsigned int clang_defaultCodeCompleteOptions();
CXCodeCompleteResults * clang_codeCompleteAt(CXTranslationUnit TU, const char * complete_filename, unsigned int complete_line, unsigned int complete_column, struct CXUnsavedFile * unsaved_files, unsigned int num_unsaved_files, unsigned int options);
void clang_sortCodeCompletionResults(CXCompletionResult * Results, unsigned int NumResults);
void clang_disposeCodeCompleteResults(CXCodeCompleteResults * Results);
unsigned int clang_codeCompleteGetNumDiagnostics(CXCodeCompleteResults * Results);
CXDiagnostic clang_codeCompleteGetDiagnostic(CXCodeCompleteResults * Results, unsigned int Index);
unsigned long long clang_codeCompleteGetContexts(CXCodeCompleteResults * Results);
enum CXCursorKind clang_codeCompleteGetContainerKind(CXCodeCompleteResults * Results, unsigned int * IsIncomplete);
CXString clang_codeCompleteGetContainerUSR(CXCodeCompleteResults * Results);
CXString clang_codeCompleteGetObjCSelector(CXCodeCompleteResults * Results);
CXString clang_getClangVersion();
void clang_toggleCrashRecovery(unsigned int isEnabled);
typedef void (*CXInclusionVisitor)(CXFile included_file,
                                   CXSourceLocation* inclusion_stack,
                                   unsigned include_len,
                                   CXClientData client_data);
void clang_getInclusions(CXTranslationUnit tu, CXInclusionVisitor visitor, CXClientData client_data);
typedef enum  {
  CXEval_Int = 1,
  CXEval_Float = 2,
  CXEval_ObjCStrLiteral = 3,
  CXEval_StrLiteral = 4,
  CXEval_CFStr = 5,
  CXEval_Other = 6,
  CXEval_UnExposed = 0,
} CXEvalResultKind;

typedef void * CXEvalResult;
CXEvalResult clang_Cursor_Evaluate(CXCursor C);
CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E);
int clang_EvalResult_getAsInt(CXEvalResult E);
long long clang_EvalResult_getAsLongLong(CXEvalResult E);
unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E);
unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E);
double clang_EvalResult_getAsDouble(CXEvalResult E);
const char * clang_EvalResult_getAsStr(CXEvalResult E);
void clang_EvalResult_dispose(CXEvalResult E);
typedef void *CXRemapping;
CXRemapping clang_getRemappings(const char * path);
CXRemapping clang_getRemappingsFromFileList(const char ** filePaths, unsigned int numFiles);
unsigned int clang_remap_getNumFiles(CXRemapping );
void clang_remap_getFilenames(CXRemapping , unsigned int index, CXString * original, CXString * transformed);
void clang_remap_dispose(CXRemapping );
enum CXVisitorResult {
  CXVisit_Break = 0,
  CXVisit_Continue = 1,
};
typedef struct CXCursorAndRangeVisitor {
  void * context;
  enum CXVisitorResult (*visit)(void *, CXCursor, CXSourceRange);
} CXCursorAndRangeVisitor;

typedef enum  {
  CXResult_Success = 0,
  CXResult_Invalid = 1,
  CXResult_VisitBreak = 2,
} CXResult;

CXResult clang_findReferencesInFile(CXCursor cursor, CXFile file, CXCursorAndRangeVisitor visitor);
CXResult clang_findIncludesInFile(CXTranslationUnit TU, CXFile file, CXCursorAndRangeVisitor visitor);
typedef void *CXIdxClientFile;
typedef void *CXIdxClientEntity;
typedef void *CXIdxClientContainer;
typedef void *CXIdxClientASTFile;
typedef struct  {
  void *ptr_data[2];
  unsigned int int_data;
} CXIdxLoc;

typedef struct  {
  CXIdxLoc hashLoc;
  const char * filename;
  CXFile file;
  int isImport;
  int isAngled;
  int isModuleImport;
} CXIdxIncludedFileInfo;

typedef struct  {
  CXFile file;
  CXModule module;
  CXIdxLoc loc;
  int isImplicit;
} CXIdxImportedASTFileInfo;

typedef enum  {
  CXIdxEntity_Unexposed = 0,
  CXIdxEntity_Typedef = 1,
  CXIdxEntity_Function = 2,
  CXIdxEntity_Variable = 3,
  CXIdxEntity_Field = 4,
  CXIdxEntity_EnumConstant = 5,
  CXIdxEntity_ObjCClass = 6,
  CXIdxEntity_ObjCProtocol = 7,
  CXIdxEntity_ObjCCategory = 8,
  CXIdxEntity_ObjCInstanceMethod = 9,
  CXIdxEntity_ObjCClassMethod = 10,
  CXIdxEntity_ObjCProperty = 11,
  CXIdxEntity_ObjCIvar = 12,
  CXIdxEntity_Enum = 13,
  CXIdxEntity_Struct = 14,
  CXIdxEntity_Union = 15,
  CXIdxEntity_CXXClass = 16,
  CXIdxEntity_CXXNamespace = 17,
  CXIdxEntity_CXXNamespaceAlias = 18,
  CXIdxEntity_CXXStaticVariable = 19,
  CXIdxEntity_CXXStaticMethod = 20,
  CXIdxEntity_CXXInstanceMethod = 21,
  CXIdxEntity_CXXConstructor = 22,
  CXIdxEntity_CXXDestructor = 23,
  CXIdxEntity_CXXConversionFunction = 24,
  CXIdxEntity_CXXTypeAlias = 25,
  CXIdxEntity_CXXInterface = 26,
} CXIdxEntityKind;

typedef enum  {
  CXIdxEntityLang_None = 0,
  CXIdxEntityLang_C = 1,
  CXIdxEntityLang_ObjC = 2,
  CXIdxEntityLang_CXX = 3,
  CXIdxEntityLang_Swift = 4,
} CXIdxEntityLanguage;

typedef enum  {
  CXIdxEntity_NonTemplate = 0,
  CXIdxEntity_Template = 1,
  CXIdxEntity_TemplatePartialSpecialization = 2,
  CXIdxEntity_TemplateSpecialization = 3,
} CXIdxEntityCXXTemplateKind;

typedef enum  {
  CXIdxAttr_Unexposed = 0,
  CXIdxAttr_IBAction = 1,
  CXIdxAttr_IBOutlet = 2,
  CXIdxAttr_IBOutletCollection = 3,
} CXIdxAttrKind;

typedef struct  {
  CXIdxAttrKind kind;
  CXCursor cursor;
  CXIdxLoc loc;
} CXIdxAttrInfo;

typedef struct  {
  CXIdxEntityKind kind;
  CXIdxEntityCXXTemplateKind templateKind;
  CXIdxEntityLanguage lang;
  const char * name;
  const char * USR;
  CXCursor cursor;
  const CXIdxAttrInfo *const * attributes;
  unsigned int numAttributes;
} CXIdxEntityInfo;

typedef struct  {
  CXCursor cursor;
} CXIdxContainerInfo;

typedef struct  {
  const CXIdxAttrInfo * attrInfo;
  const CXIdxEntityInfo * objcClass;
  CXCursor classCursor;
  CXIdxLoc classLoc;
} CXIdxIBOutletCollectionAttrInfo;

typedef enum  {
  CXIdxDeclFlag_Skipped = 1,
} CXIdxDeclInfoFlags;

typedef struct  {
  const CXIdxEntityInfo * entityInfo;
  CXCursor cursor;
  CXIdxLoc loc;
  const CXIdxContainerInfo * semanticContainer;
  const CXIdxContainerInfo * lexicalContainer;
  int isRedeclaration;
  int isDefinition;
  int isContainer;
  const CXIdxContainerInfo * declAsContainer;
  int isImplicit;
  const CXIdxAttrInfo *const * attributes;
  unsigned int numAttributes;
  unsigned int flags;
} CXIdxDeclInfo;

typedef enum  {
  CXIdxObjCContainer_ForwardRef = 0,
  CXIdxObjCContainer_Interface = 1,
  CXIdxObjCContainer_Implementation = 2,
} CXIdxObjCContainerKind;

typedef struct  {
  const CXIdxDeclInfo * declInfo;
  CXIdxObjCContainerKind kind;
} CXIdxObjCContainerDeclInfo;

typedef struct  {
  const CXIdxEntityInfo * base;
  CXCursor cursor;
  CXIdxLoc loc;
} CXIdxBaseClassInfo;

typedef struct  {
  const CXIdxEntityInfo * protocol;
  CXCursor cursor;
  CXIdxLoc loc;
} CXIdxObjCProtocolRefInfo;

typedef struct  {
  const CXIdxObjCProtocolRefInfo *const * protocols;
  unsigned int numProtocols;
} CXIdxObjCProtocolRefListInfo;

typedef struct  {
  const CXIdxObjCContainerDeclInfo * containerInfo;
  const CXIdxBaseClassInfo * superInfo;
  const CXIdxObjCProtocolRefListInfo * protocols;
} CXIdxObjCInterfaceDeclInfo;

typedef struct  {
  const CXIdxObjCContainerDeclInfo * containerInfo;
  const CXIdxEntityInfo * objcClass;
  CXCursor classCursor;
  CXIdxLoc classLoc;
  const CXIdxObjCProtocolRefListInfo * protocols;
} CXIdxObjCCategoryDeclInfo;

typedef struct  {
  const CXIdxDeclInfo * declInfo;
  const CXIdxEntityInfo * getter;
  const CXIdxEntityInfo * setter;
} CXIdxObjCPropertyDeclInfo;

typedef struct  {
  const CXIdxDeclInfo * declInfo;
  const CXIdxBaseClassInfo *const * bases;
  unsigned int numBases;
} CXIdxCXXClassDeclInfo;

typedef enum  {
  CXIdxEntityRef_Direct = 1,
  CXIdxEntityRef_Implicit = 2,
} CXIdxEntityRefKind;

typedef enum  {
  CXSymbolRole_None = 0,
  CXSymbolRole_Declaration = 1,
  CXSymbolRole_Definition = 2,
  CXSymbolRole_Reference = 4,
  CXSymbolRole_Read = 8,
  CXSymbolRole_Write = 16,
  CXSymbolRole_Call = 32,
  CXSymbolRole_Dynamic = 64,
  CXSymbolRole_AddressOf = 128,
  CXSymbolRole_Implicit = 256,
} CXSymbolRole;

typedef struct  {
  CXIdxEntityRefKind kind;
  CXCursor cursor;
  CXIdxLoc loc;
  const CXIdxEntityInfo * referencedEntity;
  const CXIdxEntityInfo * parentEntity;
  const CXIdxContainerInfo * container;
  CXSymbolRole role;
} CXIdxEntityRefInfo;

typedef struct  {
  int (*abortQuery)(CXClientData, void *);
  void (*diagnostic)(CXClientData, CXDiagnosticSet, void *);
  CXIdxClientFile (*enteredMainFile)(CXClientData, CXFile, void *);
  CXIdxClientFile (*ppIncludedFile)(CXClientData, const CXIdxIncludedFileInfo *);
  CXIdxClientASTFile (*importedASTFile)(CXClientData, const CXIdxImportedASTFileInfo *);
  CXIdxClientContainer (*startedTranslationUnit)(CXClientData, void *);
  void (*indexDeclaration)(CXClientData, const CXIdxDeclInfo *);
  void (*indexEntityReference)(CXClientData, const CXIdxEntityRefInfo *);
} IndexerCallbacks;

int clang_index_isEntityObjCContainerKind(CXIdxEntityKind );
const CXIdxObjCContainerDeclInfo * clang_index_getObjCContainerDeclInfo(const CXIdxDeclInfo * );
const CXIdxObjCInterfaceDeclInfo * clang_index_getObjCInterfaceDeclInfo(const CXIdxDeclInfo * );
const CXIdxObjCCategoryDeclInfo * clang_index_getObjCCategoryDeclInfo(const CXIdxDeclInfo * );
const CXIdxObjCProtocolRefListInfo * clang_index_getObjCProtocolRefListInfo(const CXIdxDeclInfo * );
const CXIdxObjCPropertyDeclInfo * clang_index_getObjCPropertyDeclInfo(const CXIdxDeclInfo * );
const CXIdxIBOutletCollectionAttrInfo * clang_index_getIBOutletCollectionAttrInfo(const CXIdxAttrInfo * );
const CXIdxCXXClassDeclInfo * clang_index_getCXXClassDeclInfo(const CXIdxDeclInfo * );
CXIdxClientContainer clang_index_getClientContainer(const CXIdxContainerInfo * );
void clang_index_setClientContainer(const CXIdxContainerInfo * , CXIdxClientContainer );
CXIdxClientEntity clang_index_getClientEntity(const CXIdxEntityInfo * );
void clang_index_setClientEntity(const CXIdxEntityInfo * , CXIdxClientEntity );
typedef void *CXIndexAction;
CXIndexAction clang_IndexAction_create(CXIndex CIdx);
void clang_IndexAction_dispose(CXIndexAction );
typedef enum  {
  CXIndexOpt_None = 0,
  CXIndexOpt_SuppressRedundantRefs = 1,
  CXIndexOpt_IndexFunctionLocalSymbols = 2,
  CXIndexOpt_IndexImplicitTemplateInstantiations = 4,
  CXIndexOpt_SuppressWarnings = 8,
  CXIndexOpt_SkipParsedBodiesInSession = 16,
} CXIndexOptFlags;

int clang_indexSourceFile(CXIndexAction , CXClientData client_data, IndexerCallbacks * index_callbacks, unsigned int index_callbacks_size, unsigned int index_options, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned int num_unsaved_files, CXTranslationUnit * out_TU, unsigned int TU_options);
int clang_indexSourceFileFullArgv(CXIndexAction , CXClientData client_data, IndexerCallbacks * index_callbacks, unsigned int index_callbacks_size, unsigned int index_options, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned int num_unsaved_files, CXTranslationUnit * out_TU, unsigned int TU_options);
int clang_indexTranslationUnit(CXIndexAction , CXClientData client_data, IndexerCallbacks * index_callbacks, unsigned int index_callbacks_size, unsigned int index_options, CXTranslationUnit );
void clang_indexLoc_getFileLocation(CXIdxLoc loc, CXIdxClientFile * indexFile, CXFile * file, unsigned int * line, unsigned int * column, unsigned int * offset);
CXSourceLocation clang_indexLoc_getCXSourceLocation(CXIdxLoc loc);
typedef enum CXVisitorResult (*CXFieldVisitor)(CXCursor C,
                                               CXClientData client_data);
unsigned int clang_Type_visitFields(CXType T, CXFieldVisitor visitor, CXClientData client_data);
typedef struct  {
  const void * ASTNode;
  CXTranslationUnit TranslationUnit;
} CXComment;

CXComment clang_Cursor_getParsedComment(CXCursor C);
enum CXCommentKind {
  CXComment_Null = 0,
  CXComment_Text = 1,
  CXComment_InlineCommand = 2,
  CXComment_HTMLStartTag = 3,
  CXComment_HTMLEndTag = 4,
  CXComment_Paragraph = 5,
  CXComment_BlockCommand = 6,
  CXComment_ParamCommand = 7,
  CXComment_TParamCommand = 8,
  CXComment_VerbatimBlockCommand = 9,
  CXComment_VerbatimBlockLine = 10,
  CXComment_VerbatimLine = 11,
  CXComment_FullComment = 12,
};
enum CXCommentInlineCommandRenderKind {
  CXCommentInlineCommandRenderKind_Normal = 0,
  CXCommentInlineCommandRenderKind_Bold = 1,
  CXCommentInlineCommandRenderKind_Monospaced = 2,
  CXCommentInlineCommandRenderKind_Emphasized = 3,
  CXCommentInlineCommandRenderKind_Anchor = 4,
};
enum CXCommentParamPassDirection {
  CXCommentParamPassDirection_In = 0,
  CXCommentParamPassDirection_Out = 1,
  CXCommentParamPassDirection_InOut = 2,
};
enum CXCommentKind clang_Comment_getKind(CXComment Comment);
unsigned int clang_Comment_getNumChildren(CXComment Comment);
CXComment clang_Comment_getChild(CXComment Comment, unsigned int ChildIdx);
unsigned int clang_Comment_isWhitespace(CXComment Comment);
unsigned int clang_InlineContentComment_hasTrailingNewline(CXComment Comment);
CXString clang_TextComment_getText(CXComment Comment);
CXString clang_InlineCommandComment_getCommandName(CXComment Comment);
enum CXCommentInlineCommandRenderKind clang_InlineCommandComment_getRenderKind(CXComment Comment);
unsigned int clang_InlineCommandComment_getNumArgs(CXComment Comment);
CXString clang_InlineCommandComment_getArgText(CXComment Comment, unsigned int ArgIdx);
CXString clang_HTMLTagComment_getTagName(CXComment Comment);
unsigned int clang_HTMLStartTagComment_isSelfClosing(CXComment Comment);
unsigned int clang_HTMLStartTag_getNumAttrs(CXComment Comment);
CXString clang_HTMLStartTag_getAttrName(CXComment Comment, unsigned int AttrIdx);
CXString clang_HTMLStartTag_getAttrValue(CXComment Comment, unsigned int AttrIdx);
CXString clang_BlockCommandComment_getCommandName(CXComment Comment);
unsigned int clang_BlockCommandComment_getNumArgs(CXComment Comment);
CXString clang_BlockCommandComment_getArgText(CXComment Comment, unsigned int ArgIdx);
CXComment clang_BlockCommandComment_getParagraph(CXComment Comment);
CXString clang_ParamCommandComment_getParamName(CXComment Comment);
unsigned int clang_ParamCommandComment_isParamIndexValid(CXComment Comment);
unsigned int clang_ParamCommandComment_getParamIndex(CXComment Comment);
unsigned int clang_ParamCommandComment_isDirectionExplicit(CXComment Comment);
enum CXCommentParamPassDirection clang_ParamCommandComment_getDirection(CXComment Comment);
CXString clang_TParamCommandComment_getParamName(CXComment Comment);
unsigned int clang_TParamCommandComment_isParamPositionValid(CXComment Comment);
unsigned int clang_TParamCommandComment_getDepth(CXComment Comment);
unsigned int clang_TParamCommandComment_getIndex(CXComment Comment, unsigned int Depth);
CXString clang_VerbatimBlockLineComment_getText(CXComment Comment);
CXString clang_VerbatimLineComment_getText(CXComment Comment);
CXString clang_HTMLTagComment_getAsString(CXComment Comment);
CXString clang_FullComment_getAsHTML(CXComment Comment);
CXString clang_FullComment_getAsXML(CXComment Comment);
void clang_install_aborting_llvm_fatal_error_handler();
void clang_uninstall_llvm_fatal_error_handler();
]=]

local c_lib = ffi.load('clang', true)
local lua_lib = setmetatable({ c_lib = c_lib }, { __index = c_lib })
lua_lib.String = ffi.metatype('CXString', {
  __name = 'CXString',
  __gc = c_lib.clang_disposeString,
  __index = {
    getC = c_lib.clang_getCString,
  },
  -- This was manually added and will disappear on a new call to generate.sh ; TODO: make it possible to define custom methods
  __tostring = function(cxString)
      return ffi.string(cxString:getC())
  end,
})
lua_lib.StringSet = ffi.metatype('CXStringSet', {
  __name = 'CXStringSet',
  __gc = c_lib.clang_disposeStringSet,
})
lua_lib.VirtualFileOverlayImpl = ffi.metatype('struct CXVirtualFileOverlayImpl', {
  __name = 'CXVirtualFileOverlayImpl',
})
lua_lib.ModuleMapDescriptorImpl = ffi.metatype('struct CXModuleMapDescriptorImpl', {
  __name = 'CXModuleMapDescriptorImpl',
})
lua_lib.TargetInfoImpl = ffi.metatype('struct CXTargetInfoImpl', {
  __name = 'CXTargetInfoImpl',
})
lua_lib.TranslationUnitImpl = ffi.metatype('struct CXTranslationUnitImpl', {
  __name = 'CXTranslationUnitImpl',
})
lua_lib.UnsavedFile = ffi.metatype('struct CXUnsavedFile', {
  __name = 'CXUnsavedFile',
})
lua_lib.Version = ffi.metatype('CXVersion', {
  __name = 'CXVersion',
})
lua_lib.FileUniqueID = ffi.metatype('CXFileUniqueID', {
  __name = 'CXFileUniqueID',
})
lua_lib.SourceLocation = ffi.metatype('CXSourceLocation', {
  __name = 'CXSourceLocation',
})
lua_lib.SourceRange = ffi.metatype('CXSourceRange', {
  __name = 'CXSourceRange',
})
lua_lib.SourceRangeList = ffi.metatype('CXSourceRangeList', {
  __name = 'CXSourceRangeList',
  __gc = c_lib.clang_disposeSourceRangeList,
})
lua_lib.TUResourceUsageEntry = ffi.metatype('CXTUResourceUsageEntry', {
  __name = 'CXTUResourceUsageEntry',
})
lua_lib.TUResourceUsage = ffi.metatype('CXTUResourceUsage', {
  __name = 'CXTUResourceUsage',
  __gc = c_lib.clang_disposeCXTUResourceUsage,
})
lua_lib.Cursor = ffi.metatype('CXCursor', {
  __name = 'CXCursor',
  __gc = c_lib.clang_disposeOverriddenCursors,
  __index = {
    equals = c_lib.clang_equalCursors,
    isNull = c_lib.clang_Cursor_isNull,
    hash = c_lib.clang_hashCursor,
    getKind = c_lib.clang_getCursorKind,
    hasAttrs = c_lib.clang_Cursor_hasAttrs,
    getLinkage = c_lib.clang_getCursorLinkage,
    getVisibility = c_lib.clang_getCursorVisibility,
    getAvailability = c_lib.clang_getCursorAvailability,
    getPlatformAvailability = c_lib.clang_getCursorPlatformAvailability,
    getLanguage = c_lib.clang_getCursorLanguage,
    getTLSKind = c_lib.clang_getCursorTLSKind,
    getTranslationUnit = c_lib.clang_Cursor_getTranslationUnit,
    getSemanticParent = c_lib.clang_getCursorSemanticParent,
    getLexicalParent = c_lib.clang_getCursorLexicalParent,
    getOverriddens = c_lib.clang_getOverriddenCursors,
    getLocation = c_lib.clang_getCursorLocation,
    getExtent = c_lib.clang_getCursorExtent,
    getType = c_lib.clang_getCursorType,
    getNumArguments = c_lib.clang_Cursor_getNumArguments,
    getArgument = c_lib.clang_Cursor_getArgument,
    getNumTemplateArguments = c_lib.clang_Cursor_getNumTemplateArguments,
    getTemplateArgumentKind = c_lib.clang_Cursor_getTemplateArgumentKind,
    getTemplateArgumentType = c_lib.clang_Cursor_getTemplateArgumentType,
    getTemplateArgumentValue = c_lib.clang_Cursor_getTemplateArgumentValue,
    getTemplateArgumentUnsignedValue = c_lib.clang_Cursor_getTemplateArgumentUnsignedValue,
    isMacroFunctionLike = c_lib.clang_Cursor_isMacroFunctionLike,
    isMacroBuiltin = c_lib.clang_Cursor_isMacroBuiltin,
    isFunctionInlined = c_lib.clang_Cursor_isFunctionInlined,
    getResultType = c_lib.clang_getCursorResultType,
    getExceptionSpecificationType = c_lib.clang_getCursorExceptionSpecificationType,
    getOffsetOfField = c_lib.clang_Cursor_getOffsetOfField,
    isAnonymous = c_lib.clang_Cursor_isAnonymous,
    isAnonymousRecordDecl = c_lib.clang_Cursor_isAnonymousRecordDecl,
    isInlineNamespace = c_lib.clang_Cursor_isInlineNamespace,
    isBitField = c_lib.clang_Cursor_isBitField,
    getStorageClass = c_lib.clang_Cursor_getStorageClass,
    getUSR = c_lib.clang_getCursorUSR,
    getSpelling = c_lib.clang_getCursorSpelling,
    getSpellingNameRange = c_lib.clang_Cursor_getSpellingNameRange,
    getPrintingPolicy = c_lib.clang_getCursorPrintingPolicy,
    getPrettyPrinted = c_lib.clang_getCursorPrettyPrinted,
    getDisplayName = c_lib.clang_getCursorDisplayName,
    getReferenced = c_lib.clang_getCursorReferenced,
    getDefinition = c_lib.clang_getCursorDefinition,
    isDefinition = c_lib.clang_isCursorDefinition,
    getCanonical = c_lib.clang_getCanonicalCursor,
    getObjCSelectorIndex = c_lib.clang_Cursor_getObjCSelectorIndex,
    isDynamicCall = c_lib.clang_Cursor_isDynamicCall,
    getReceiverType = c_lib.clang_Cursor_getReceiverType,
    getObjCPropertyAttributes = c_lib.clang_Cursor_getObjCPropertyAttributes,
    getObjCPropertyGetterName = c_lib.clang_Cursor_getObjCPropertyGetterName,
    getObjCPropertySetterName = c_lib.clang_Cursor_getObjCPropertySetterName,
    getObjCDeclQualifiers = c_lib.clang_Cursor_getObjCDeclQualifiers,
    isObjCOptional = c_lib.clang_Cursor_isObjCOptional,
    isVariadic = c_lib.clang_Cursor_isVariadic,
    isExternalSymbol = c_lib.clang_Cursor_isExternalSymbol,
    getCommentRange = c_lib.clang_Cursor_getCommentRange,
    getRawCommentText = c_lib.clang_Cursor_getRawCommentText,
    getBriefCommentText = c_lib.clang_Cursor_getBriefCommentText,
    getMangling = c_lib.clang_Cursor_getMangling,
    getCXXManglings = c_lib.clang_Cursor_getCXXManglings,
    getObjCManglings = c_lib.clang_Cursor_getObjCManglings,
    getModule = c_lib.clang_Cursor_getModule,
    getTemplateKind = c_lib.clang_getTemplateCursorKind,
    getSpecializedTemplate = c_lib.clang_getSpecializedCursorTemplate,
    getReferenceNameRange = c_lib.clang_getCursorReferenceNameRange,
    getCompletionString = c_lib.clang_getCursorCompletionString,
    Evaluate = c_lib.clang_Cursor_Evaluate,
    getParsedComment = c_lib.clang_Cursor_getParsedComment,
  },
})
lua_lib.PlatformAvailability = ffi.metatype('CXPlatformAvailability', {
  __name = 'CXPlatformAvailability',
  __gc = c_lib.clang_disposeCXPlatformAvailability,
})
lua_lib.CursorSetImpl = ffi.metatype('struct CXCursorSetImpl', {
  __name = 'CXCursorSetImpl',
})
lua_lib.Type = ffi.metatype('CXType', {
  __name = 'CXType',
  __index = {
    getSpelling = c_lib.clang_getTypeSpelling,
    equals = c_lib.clang_equalTypes,
    getCanonical = c_lib.clang_getCanonicalType,
    isConstQualified = c_lib.clang_isConstQualifiedType,
    isVolatileQualified = c_lib.clang_isVolatileQualifiedType,
    isRestrictQualified = c_lib.clang_isRestrictQualifiedType,
    getdefName = c_lib.clang_getTypedefName,
    getPointee = c_lib.clang_getPointeeType,
    getDeclaration = c_lib.clang_getTypeDeclaration,
    getObjCEncoding = c_lib.clang_Type_getObjCEncoding,
    getFunctionCallingConv = c_lib.clang_getFunctionTypeCallingConv,
    getResult = c_lib.clang_getResultType,
    getExceptionSpecification = c_lib.clang_getExceptionSpecificationType,
    getNumArgs = c_lib.clang_getNumArgTypes,
    getArg = c_lib.clang_getArgType,
    getObjCObjectBaseType = c_lib.clang_Type_getObjCObjectBaseType,
    getNumObjCProtocolRefs = c_lib.clang_Type_getNumObjCProtocolRefs,
    getObjCProtocolDecl = c_lib.clang_Type_getObjCProtocolDecl,
    getNumObjCTypeArgs = c_lib.clang_Type_getNumObjCTypeArgs,
    getObjCTypeArg = c_lib.clang_Type_getObjCTypeArg,
    isFunctionVariadic = c_lib.clang_isFunctionTypeVariadic,
    isPOD = c_lib.clang_isPODType,
    getElement = c_lib.clang_getElementType,
    getArrayElement = c_lib.clang_getArrayElementType,
    getNamedType = c_lib.clang_Type_getNamedType,
    isTransparentTagTypedef = c_lib.clang_Type_isTransparentTagTypedef,
    getNullability = c_lib.clang_Type_getNullability,
    getAlignOf = c_lib.clang_Type_getAlignOf,
    getClassType = c_lib.clang_Type_getClassType,
    getSizeOf = c_lib.clang_Type_getSizeOf,
    getOffsetOf = c_lib.clang_Type_getOffsetOf,
    getModifiedType = c_lib.clang_Type_getModifiedType,
    getNumTemplateArguments = c_lib.clang_Type_getNumTemplateArguments,
    getTemplateArgumentAsType = c_lib.clang_Type_getTemplateArgumentAsType,
    getCXXRefQualifier = c_lib.clang_Type_getCXXRefQualifier,
    visitFields = c_lib.clang_Type_visitFields,
  },
})
lua_lib.Token = ffi.metatype('CXToken', {
  __name = 'CXToken',
  __index = {
    getKind = c_lib.clang_getTokenKind,
  },
})
lua_lib.CompletionResult = ffi.metatype('CXCompletionResult', {
  __name = 'CXCompletionResult',
  __index = {
    sortCodes = c_lib.clang_sortCodeCompletionResults,
  },
})
lua_lib.CodeCompleteResults = ffi.metatype('CXCodeCompleteResults', {
  __name = 'CXCodeCompleteResults',
  __gc = c_lib.clang_disposeCodeCompleteResults,
})
lua_lib.CursorAndRangeVisitor = ffi.metatype('CXCursorAndRangeVisitor', {
  __name = 'CXCursorAndRangeVisitor',
})
lua_lib.IdxLoc = ffi.metatype('CXIdxLoc', {
  __name = 'CXIdxLoc',
})
lua_lib.IdxIncludedFileInfo = ffi.metatype('CXIdxIncludedFileInfo', {
  __name = 'CXIdxIncludedFileInfo',
})
lua_lib.IdxImportedASTFileInfo = ffi.metatype('CXIdxImportedASTFileInfo', {
  __name = 'CXIdxImportedASTFileInfo',
})
lua_lib.IdxAttrInfo = ffi.metatype('CXIdxAttrInfo', {
  __name = 'CXIdxAttrInfo',
})
lua_lib.IdxEntityInfo = ffi.metatype('CXIdxEntityInfo', {
  __name = 'CXIdxEntityInfo',
})
lua_lib.IdxContainerInfo = ffi.metatype('CXIdxContainerInfo', {
  __name = 'CXIdxContainerInfo',
})
lua_lib.IdxIBOutletCollectionAttrInfo = ffi.metatype('CXIdxIBOutletCollectionAttrInfo', {
  __name = 'CXIdxIBOutletCollectionAttrInfo',
})
lua_lib.IdxDeclInfo = ffi.metatype('CXIdxDeclInfo', {
  __name = 'CXIdxDeclInfo',
})
lua_lib.IdxObjCContainerDeclInfo = ffi.metatype('CXIdxObjCContainerDeclInfo', {
  __name = 'CXIdxObjCContainerDeclInfo',
})
lua_lib.IdxBaseClassInfo = ffi.metatype('CXIdxBaseClassInfo', {
  __name = 'CXIdxBaseClassInfo',
})
lua_lib.IdxObjCProtocolRefInfo = ffi.metatype('CXIdxObjCProtocolRefInfo', {
  __name = 'CXIdxObjCProtocolRefInfo',
})
lua_lib.IdxObjCProtocolRefListInfo = ffi.metatype('CXIdxObjCProtocolRefListInfo', {
  __name = 'CXIdxObjCProtocolRefListInfo',
})
lua_lib.IdxObjCInterfaceDeclInfo = ffi.metatype('CXIdxObjCInterfaceDeclInfo', {
  __name = 'CXIdxObjCInterfaceDeclInfo',
})
lua_lib.IdxObjCCategoryDeclInfo = ffi.metatype('CXIdxObjCCategoryDeclInfo', {
  __name = 'CXIdxObjCCategoryDeclInfo',
})
lua_lib.IdxObjCPropertyDeclInfo = ffi.metatype('CXIdxObjCPropertyDeclInfo', {
  __name = 'CXIdxObjCPropertyDeclInfo',
})
lua_lib.IdxCXXClassDeclInfo = ffi.metatype('CXIdxCXXClassDeclInfo', {
  __name = 'CXIdxCXXClassDeclInfo',
})
lua_lib.IdxEntityRefInfo = ffi.metatype('CXIdxEntityRefInfo', {
  __name = 'CXIdxEntityRefInfo',
})
lua_lib.IndexerCallbacks = ffi.metatype('IndexerCallbacks', {
  __name = 'IndexerCallbacks',
})
lua_lib.Comment = ffi.metatype('CXComment', {
  __name = 'CXComment',
  __index = {
    getKind = c_lib.clang_Comment_getKind,
    getNumChildren = c_lib.clang_Comment_getNumChildren,
    getChild = c_lib.clang_Comment_getChild,
    isWhitespace = c_lib.clang_Comment_isWhitespace,
    InlineContent_hasTrailingNewline = c_lib.clang_InlineContentComment_hasTrailingNewline,
    Text_getText = c_lib.clang_TextComment_getText,
    InlineCommand_getCommandName = c_lib.clang_InlineCommandComment_getCommandName,
    InlineCommand_getRenderKind = c_lib.clang_InlineCommandComment_getRenderKind,
    InlineCommand_getNumArgs = c_lib.clang_InlineCommandComment_getNumArgs,
    InlineCommand_getArgText = c_lib.clang_InlineCommandComment_getArgText,
    HTMLTag_getTagName = c_lib.clang_HTMLTagComment_getTagName,
    HTMLStartTag_isSelfClosing = c_lib.clang_HTMLStartTagComment_isSelfClosing,
    BlockCommand_getCommandName = c_lib.clang_BlockCommandComment_getCommandName,
    BlockCommand_getNumArgs = c_lib.clang_BlockCommandComment_getNumArgs,
    BlockCommand_getArgText = c_lib.clang_BlockCommandComment_getArgText,
    BlockCommand_getParagraph = c_lib.clang_BlockCommandComment_getParagraph,
    ParamCommand_getParamName = c_lib.clang_ParamCommandComment_getParamName,
    ParamCommand_isParamIndexValid = c_lib.clang_ParamCommandComment_isParamIndexValid,
    ParamCommand_getParamIndex = c_lib.clang_ParamCommandComment_getParamIndex,
    ParamCommand_isDirectionExplicit = c_lib.clang_ParamCommandComment_isDirectionExplicit,
    ParamCommand_getDirection = c_lib.clang_ParamCommandComment_getDirection,
    TParamCommand_getParamName = c_lib.clang_TParamCommandComment_getParamName,
    TParamCommand_isParamPositionValid = c_lib.clang_TParamCommandComment_isParamPositionValid,
    TParamCommand_getDepth = c_lib.clang_TParamCommandComment_getDepth,
    TParamCommand_getIndex = c_lib.clang_TParamCommandComment_getIndex,
    VerbatimBlockLine_getText = c_lib.clang_VerbatimBlockLineComment_getText,
    VerbatimLine_getText = c_lib.clang_VerbatimLineComment_getText,
    HTMLTag_getAsString = c_lib.clang_HTMLTagComment_getAsString,
    Full_getAsHTML = c_lib.clang_FullComment_getAsHTML,
    Full_getAsXML = c_lib.clang_FullComment_getAsXML,
  },
})
lua_lib.getCString = lua_lib.clang_getCString
lua_lib.disposeString = lua_lib.clang_disposeString
lua_lib.disposeStringSet = lua_lib.clang_disposeStringSet
lua_lib.getBuildSessionTimestamp = lua_lib.clang_getBuildSessionTimestamp
lua_lib.VirtualFileOverlay_create = lua_lib.clang_VirtualFileOverlay_create
lua_lib.VirtualFileOverlay_addFileMapping = lua_lib.clang_VirtualFileOverlay_addFileMapping
lua_lib.VirtualFileOverlay_setCaseSensitivity = lua_lib.clang_VirtualFileOverlay_setCaseSensitivity
lua_lib.VirtualFileOverlay_writeToBuffer = lua_lib.clang_VirtualFileOverlay_writeToBuffer
lua_lib.free = lua_lib.clang_free
lua_lib.VirtualFileOverlay_dispose = lua_lib.clang_VirtualFileOverlay_dispose
lua_lib.ModuleMapDescriptor_create = lua_lib.clang_ModuleMapDescriptor_create
lua_lib.ModuleMapDescriptor_setFrameworkModuleName = lua_lib.clang_ModuleMapDescriptor_setFrameworkModuleName
lua_lib.ModuleMapDescriptor_setUmbrellaHeader = lua_lib.clang_ModuleMapDescriptor_setUmbrellaHeader
lua_lib.ModuleMapDescriptor_writeToBuffer = lua_lib.clang_ModuleMapDescriptor_writeToBuffer
lua_lib.ModuleMapDescriptor_dispose = lua_lib.clang_ModuleMapDescriptor_dispose
lua_lib.CompilationDatabase_fromDirectory = lua_lib.clang_CompilationDatabase_fromDirectory
lua_lib.CompilationDatabase_dispose = lua_lib.clang_CompilationDatabase_dispose
lua_lib.CompilationDatabase_getCompileCommands = lua_lib.clang_CompilationDatabase_getCompileCommands
lua_lib.CompilationDatabase_getAllCompileCommands = lua_lib.clang_CompilationDatabase_getAllCompileCommands
lua_lib.CompileCommands_dispose = lua_lib.clang_CompileCommands_dispose
lua_lib.CompileCommands_getSize = lua_lib.clang_CompileCommands_getSize
lua_lib.CompileCommands_getCommand = lua_lib.clang_CompileCommands_getCommand
lua_lib.CompileCommand_getDirectory = lua_lib.clang_CompileCommand_getDirectory
lua_lib.CompileCommand_getFilename = lua_lib.clang_CompileCommand_getFilename
lua_lib.CompileCommand_getNumArgs = lua_lib.clang_CompileCommand_getNumArgs
lua_lib.CompileCommand_getArg = lua_lib.clang_CompileCommand_getArg
-- For some reason, clang_CompileCommand_getNumMappedSources is not defined in my libclang installation
--lua_lib.CompileCommand_getNumMappedSources = lua_lib.clang_CompileCommand_getNumMappedSources
lua_lib.CompileCommand_getMappedSourcePath = lua_lib.clang_CompileCommand_getMappedSourcePath
lua_lib.CompileCommand_getMappedSourceContent = lua_lib.clang_CompileCommand_getMappedSourceContent
lua_lib.createIndex = lua_lib.clang_createIndex
lua_lib.disposeIndex = lua_lib.clang_disposeIndex
lua_lib.CXIndex_setGlobalOptions = lua_lib.clang_CXIndex_setGlobalOptions
lua_lib.CXIndex_getGlobalOptions = lua_lib.clang_CXIndex_getGlobalOptions
lua_lib.CXIndex_setInvocationEmissionPathOption = lua_lib.clang_CXIndex_setInvocationEmissionPathOption
lua_lib.getFileName = lua_lib.clang_getFileName
lua_lib.getFileTime = lua_lib.clang_getFileTime
lua_lib.getFileUniqueID = lua_lib.clang_getFileUniqueID
lua_lib.isFileMultipleIncludeGuarded = lua_lib.clang_isFileMultipleIncludeGuarded
lua_lib.getFile = lua_lib.clang_getFile
lua_lib.getFileContents = lua_lib.clang_getFileContents
lua_lib.File_isEqual = lua_lib.clang_File_isEqual
lua_lib.File_tryGetRealPathName = lua_lib.clang_File_tryGetRealPathName
lua_lib.getNullLocation = lua_lib.clang_getNullLocation
lua_lib.equalLocations = lua_lib.clang_equalLocations
lua_lib.getLocation = lua_lib.clang_getLocation
lua_lib.getLocationForOffset = lua_lib.clang_getLocationForOffset
lua_lib.Location_isInSystemHeader = lua_lib.clang_Location_isInSystemHeader
lua_lib.Location_isFromMainFile = lua_lib.clang_Location_isFromMainFile
lua_lib.getNullRange = lua_lib.clang_getNullRange
lua_lib.getRange = lua_lib.clang_getRange
lua_lib.equalRanges = lua_lib.clang_equalRanges
lua_lib.Range_isNull = lua_lib.clang_Range_isNull
lua_lib.getExpansionLocation = lua_lib.clang_getExpansionLocation
lua_lib.getPresumedLocation = lua_lib.clang_getPresumedLocation
lua_lib.getInstantiationLocation = lua_lib.clang_getInstantiationLocation
lua_lib.getSpellingLocation = lua_lib.clang_getSpellingLocation
lua_lib.getFileLocation = lua_lib.clang_getFileLocation
lua_lib.getRangeStart = lua_lib.clang_getRangeStart
lua_lib.getRangeEnd = lua_lib.clang_getRangeEnd
lua_lib.getSkippedRanges = lua_lib.clang_getSkippedRanges
lua_lib.getAllSkippedRanges = lua_lib.clang_getAllSkippedRanges
lua_lib.disposeSourceRangeList = lua_lib.clang_disposeSourceRangeList
lua_lib.getNumDiagnosticsInSet = lua_lib.clang_getNumDiagnosticsInSet
lua_lib.getDiagnosticInSet = lua_lib.clang_getDiagnosticInSet
lua_lib.loadDiagnostics = lua_lib.clang_loadDiagnostics
lua_lib.disposeDiagnosticSet = lua_lib.clang_disposeDiagnosticSet
lua_lib.getChildDiagnostics = lua_lib.clang_getChildDiagnostics
lua_lib.getNumDiagnostics = lua_lib.clang_getNumDiagnostics
lua_lib.getDiagnostic = lua_lib.clang_getDiagnostic
lua_lib.getDiagnosticSetFromTU = lua_lib.clang_getDiagnosticSetFromTU
lua_lib.disposeDiagnostic = lua_lib.clang_disposeDiagnostic
lua_lib.formatDiagnostic = lua_lib.clang_formatDiagnostic
lua_lib.defaultDiagnosticDisplayOptions = lua_lib.clang_defaultDiagnosticDisplayOptions
lua_lib.getDiagnosticSeverity = lua_lib.clang_getDiagnosticSeverity
lua_lib.getDiagnosticLocation = lua_lib.clang_getDiagnosticLocation
lua_lib.getDiagnosticSpelling = lua_lib.clang_getDiagnosticSpelling
lua_lib.getDiagnosticOption = lua_lib.clang_getDiagnosticOption
lua_lib.getDiagnosticCategory = lua_lib.clang_getDiagnosticCategory
lua_lib.getDiagnosticCategoryName = lua_lib.clang_getDiagnosticCategoryName
lua_lib.getDiagnosticCategoryText = lua_lib.clang_getDiagnosticCategoryText
lua_lib.getDiagnosticNumRanges = lua_lib.clang_getDiagnosticNumRanges
lua_lib.getDiagnosticRange = lua_lib.clang_getDiagnosticRange
lua_lib.getDiagnosticNumFixIts = lua_lib.clang_getDiagnosticNumFixIts
lua_lib.getDiagnosticFixIt = lua_lib.clang_getDiagnosticFixIt
lua_lib.getTranslationUnitSpelling = lua_lib.clang_getTranslationUnitSpelling
lua_lib.createTranslationUnitFromSourceFile = lua_lib.clang_createTranslationUnitFromSourceFile
lua_lib.createTranslationUnit = lua_lib.clang_createTranslationUnit
lua_lib.createTranslationUnit2 = lua_lib.clang_createTranslationUnit2
lua_lib.defaultEditingTranslationUnitOptions = lua_lib.clang_defaultEditingTranslationUnitOptions
lua_lib.parseTranslationUnit = lua_lib.clang_parseTranslationUnit
lua_lib.parseTranslationUnit2 = lua_lib.clang_parseTranslationUnit2
lua_lib.parseTranslationUnit2FullArgv = lua_lib.clang_parseTranslationUnit2FullArgv
lua_lib.defaultSaveOptions = lua_lib.clang_defaultSaveOptions
lua_lib.saveTranslationUnit = lua_lib.clang_saveTranslationUnit
lua_lib.suspendTranslationUnit = lua_lib.clang_suspendTranslationUnit
lua_lib.disposeTranslationUnit = lua_lib.clang_disposeTranslationUnit
lua_lib.defaultReparseOptions = lua_lib.clang_defaultReparseOptions
lua_lib.reparseTranslationUnit = lua_lib.clang_reparseTranslationUnit
lua_lib.getTUResourceUsageName = lua_lib.clang_getTUResourceUsageName
lua_lib.getCXTUResourceUsage = lua_lib.clang_getCXTUResourceUsage
lua_lib.disposeCXTUResourceUsage = lua_lib.clang_disposeCXTUResourceUsage
lua_lib.getTranslationUnitTargetInfo = lua_lib.clang_getTranslationUnitTargetInfo
lua_lib.TargetInfo_dispose = lua_lib.clang_TargetInfo_dispose
lua_lib.TargetInfo_getTriple = lua_lib.clang_TargetInfo_getTriple
lua_lib.TargetInfo_getPointerWidth = lua_lib.clang_TargetInfo_getPointerWidth
lua_lib.getNullCursor = lua_lib.clang_getNullCursor
lua_lib.getTranslationUnitCursor = lua_lib.clang_getTranslationUnitCursor
lua_lib.equalCursors = lua_lib.clang_equalCursors
lua_lib.Cursor_isNull = lua_lib.clang_Cursor_isNull
lua_lib.hashCursor = lua_lib.clang_hashCursor
lua_lib.getCursorKind = lua_lib.clang_getCursorKind
lua_lib.isDeclaration = lua_lib.clang_isDeclaration
lua_lib.isInvalidDeclaration = lua_lib.clang_isInvalidDeclaration
lua_lib.isReference = lua_lib.clang_isReference
lua_lib.isExpression = lua_lib.clang_isExpression
lua_lib.isStatement = lua_lib.clang_isStatement
lua_lib.isAttribute = lua_lib.clang_isAttribute
lua_lib.Cursor_hasAttrs = lua_lib.clang_Cursor_hasAttrs
lua_lib.isInvalid = lua_lib.clang_isInvalid
lua_lib.isTranslationUnit = lua_lib.clang_isTranslationUnit
lua_lib.isPreprocessing = lua_lib.clang_isPreprocessing
lua_lib.isUnexposed = lua_lib.clang_isUnexposed
lua_lib.getCursorLinkage = lua_lib.clang_getCursorLinkage
lua_lib.getCursorVisibility = lua_lib.clang_getCursorVisibility
lua_lib.getCursorAvailability = lua_lib.clang_getCursorAvailability
lua_lib.getCursorPlatformAvailability = lua_lib.clang_getCursorPlatformAvailability
lua_lib.disposeCXPlatformAvailability = lua_lib.clang_disposeCXPlatformAvailability
lua_lib.getCursorLanguage = lua_lib.clang_getCursorLanguage
lua_lib.getCursorTLSKind = lua_lib.clang_getCursorTLSKind
lua_lib.Cursor_getTranslationUnit = lua_lib.clang_Cursor_getTranslationUnit
lua_lib.createCXCursorSet = lua_lib.clang_createCXCursorSet
lua_lib.disposeCXCursorSet = lua_lib.clang_disposeCXCursorSet
lua_lib.CXCursorSet_contains = lua_lib.clang_CXCursorSet_contains
lua_lib.CXCursorSet_insert = lua_lib.clang_CXCursorSet_insert
lua_lib.getCursorSemanticParent = lua_lib.clang_getCursorSemanticParent
lua_lib.getCursorLexicalParent = lua_lib.clang_getCursorLexicalParent
lua_lib.getOverriddenCursors = lua_lib.clang_getOverriddenCursors
lua_lib.disposeOverriddenCursors = lua_lib.clang_disposeOverriddenCursors
lua_lib.getIncludedFile = lua_lib.clang_getIncludedFile
lua_lib.getCursor = lua_lib.clang_getCursor
lua_lib.getCursorLocation = lua_lib.clang_getCursorLocation
lua_lib.getCursorExtent = lua_lib.clang_getCursorExtent
lua_lib.getCursorType = lua_lib.clang_getCursorType
lua_lib.getTypeSpelling = lua_lib.clang_getTypeSpelling
lua_lib.getTypedefDeclUnderlyingType = lua_lib.clang_getTypedefDeclUnderlyingType
lua_lib.getEnumDeclIntegerType = lua_lib.clang_getEnumDeclIntegerType
lua_lib.getEnumConstantDeclValue = lua_lib.clang_getEnumConstantDeclValue
lua_lib.getEnumConstantDeclUnsignedValue = lua_lib.clang_getEnumConstantDeclUnsignedValue
lua_lib.getFieldDeclBitWidth = lua_lib.clang_getFieldDeclBitWidth
lua_lib.Cursor_getNumArguments = lua_lib.clang_Cursor_getNumArguments
lua_lib.Cursor_getArgument = lua_lib.clang_Cursor_getArgument
lua_lib.Cursor_getNumTemplateArguments = lua_lib.clang_Cursor_getNumTemplateArguments
lua_lib.Cursor_getTemplateArgumentKind = lua_lib.clang_Cursor_getTemplateArgumentKind
lua_lib.Cursor_getTemplateArgumentType = lua_lib.clang_Cursor_getTemplateArgumentType
lua_lib.Cursor_getTemplateArgumentValue = lua_lib.clang_Cursor_getTemplateArgumentValue
lua_lib.Cursor_getTemplateArgumentUnsignedValue = lua_lib.clang_Cursor_getTemplateArgumentUnsignedValue
lua_lib.equalTypes = lua_lib.clang_equalTypes
lua_lib.getCanonicalType = lua_lib.clang_getCanonicalType
lua_lib.isConstQualifiedType = lua_lib.clang_isConstQualifiedType
lua_lib.Cursor_isMacroFunctionLike = lua_lib.clang_Cursor_isMacroFunctionLike
lua_lib.Cursor_isMacroBuiltin = lua_lib.clang_Cursor_isMacroBuiltin
lua_lib.Cursor_isFunctionInlined = lua_lib.clang_Cursor_isFunctionInlined
lua_lib.isVolatileQualifiedType = lua_lib.clang_isVolatileQualifiedType
lua_lib.isRestrictQualifiedType = lua_lib.clang_isRestrictQualifiedType
lua_lib.getAddressSpace = lua_lib.clang_getAddressSpace
lua_lib.getTypedefName = lua_lib.clang_getTypedefName
lua_lib.getPointeeType = lua_lib.clang_getPointeeType
lua_lib.getTypeDeclaration = lua_lib.clang_getTypeDeclaration
lua_lib.getDeclObjCTypeEncoding = lua_lib.clang_getDeclObjCTypeEncoding
lua_lib.Type_getObjCEncoding = lua_lib.clang_Type_getObjCEncoding
lua_lib.getTypeKindSpelling = lua_lib.clang_getTypeKindSpelling
lua_lib.getFunctionTypeCallingConv = lua_lib.clang_getFunctionTypeCallingConv
lua_lib.getResultType = lua_lib.clang_getResultType
lua_lib.getExceptionSpecificationType = lua_lib.clang_getExceptionSpecificationType
lua_lib.getNumArgTypes = lua_lib.clang_getNumArgTypes
lua_lib.getArgType = lua_lib.clang_getArgType
lua_lib.Type_getObjCObjectBaseType = lua_lib.clang_Type_getObjCObjectBaseType
lua_lib.Type_getNumObjCProtocolRefs = lua_lib.clang_Type_getNumObjCProtocolRefs
lua_lib.Type_getObjCProtocolDecl = lua_lib.clang_Type_getObjCProtocolDecl
lua_lib.Type_getNumObjCTypeArgs = lua_lib.clang_Type_getNumObjCTypeArgs
lua_lib.Type_getObjCTypeArg = lua_lib.clang_Type_getObjCTypeArg
lua_lib.isFunctionTypeVariadic = lua_lib.clang_isFunctionTypeVariadic
lua_lib.getCursorResultType = lua_lib.clang_getCursorResultType
lua_lib.getCursorExceptionSpecificationType = lua_lib.clang_getCursorExceptionSpecificationType
lua_lib.isPODType = lua_lib.clang_isPODType
lua_lib.getElementType = lua_lib.clang_getElementType
lua_lib.getNumElements = lua_lib.clang_getNumElements
lua_lib.getArrayElementType = lua_lib.clang_getArrayElementType
lua_lib.getArraySize = lua_lib.clang_getArraySize
lua_lib.Type_getNamedType = lua_lib.clang_Type_getNamedType
lua_lib.Type_isTransparentTagTypedef = lua_lib.clang_Type_isTransparentTagTypedef
lua_lib.Type_getNullability = lua_lib.clang_Type_getNullability
lua_lib.Type_getAlignOf = lua_lib.clang_Type_getAlignOf
lua_lib.Type_getClassType = lua_lib.clang_Type_getClassType
lua_lib.Type_getSizeOf = lua_lib.clang_Type_getSizeOf
lua_lib.Type_getOffsetOf = lua_lib.clang_Type_getOffsetOf
lua_lib.Type_getModifiedType = lua_lib.clang_Type_getModifiedType
lua_lib.Cursor_getOffsetOfField = lua_lib.clang_Cursor_getOffsetOfField
lua_lib.Cursor_isAnonymous = lua_lib.clang_Cursor_isAnonymous
lua_lib.Cursor_isAnonymousRecordDecl = lua_lib.clang_Cursor_isAnonymousRecordDecl
lua_lib.Cursor_isInlineNamespace = lua_lib.clang_Cursor_isInlineNamespace
lua_lib.Type_getNumTemplateArguments = lua_lib.clang_Type_getNumTemplateArguments
lua_lib.Type_getTemplateArgumentAsType = lua_lib.clang_Type_getTemplateArgumentAsType
lua_lib.Type_getCXXRefQualifier = lua_lib.clang_Type_getCXXRefQualifier
lua_lib.Cursor_isBitField = lua_lib.clang_Cursor_isBitField
lua_lib.isVirtualBase = lua_lib.clang_isVirtualBase
lua_lib.getCXXAccessSpecifier = lua_lib.clang_getCXXAccessSpecifier
lua_lib.Cursor_getStorageClass = lua_lib.clang_Cursor_getStorageClass
lua_lib.getNumOverloadedDecls = lua_lib.clang_getNumOverloadedDecls
lua_lib.getOverloadedDecl = lua_lib.clang_getOverloadedDecl
lua_lib.getIBOutletCollectionType = lua_lib.clang_getIBOutletCollectionType
lua_lib.visitChildren = lua_lib.clang_visitChildren
lua_lib.getCursorUSR = lua_lib.clang_getCursorUSR
lua_lib.constructUSR_ObjCClass = lua_lib.clang_constructUSR_ObjCClass
lua_lib.constructUSR_ObjCCategory = lua_lib.clang_constructUSR_ObjCCategory
lua_lib.constructUSR_ObjCProtocol = lua_lib.clang_constructUSR_ObjCProtocol
lua_lib.constructUSR_ObjCIvar = lua_lib.clang_constructUSR_ObjCIvar
lua_lib.constructUSR_ObjCMethod = lua_lib.clang_constructUSR_ObjCMethod
lua_lib.constructUSR_ObjCProperty = lua_lib.clang_constructUSR_ObjCProperty
lua_lib.getCursorSpelling = lua_lib.clang_getCursorSpelling
lua_lib.Cursor_getSpellingNameRange = lua_lib.clang_Cursor_getSpellingNameRange
lua_lib.PrintingPolicy_getProperty = lua_lib.clang_PrintingPolicy_getProperty
lua_lib.PrintingPolicy_setProperty = lua_lib.clang_PrintingPolicy_setProperty
lua_lib.getCursorPrintingPolicy = lua_lib.clang_getCursorPrintingPolicy
lua_lib.PrintingPolicy_dispose = lua_lib.clang_PrintingPolicy_dispose
lua_lib.getCursorPrettyPrinted = lua_lib.clang_getCursorPrettyPrinted
lua_lib.getCursorDisplayName = lua_lib.clang_getCursorDisplayName
lua_lib.getCursorReferenced = lua_lib.clang_getCursorReferenced
lua_lib.getCursorDefinition = lua_lib.clang_getCursorDefinition
lua_lib.isCursorDefinition = lua_lib.clang_isCursorDefinition
lua_lib.getCanonicalCursor = lua_lib.clang_getCanonicalCursor
lua_lib.Cursor_getObjCSelectorIndex = lua_lib.clang_Cursor_getObjCSelectorIndex
lua_lib.Cursor_isDynamicCall = lua_lib.clang_Cursor_isDynamicCall
lua_lib.Cursor_getReceiverType = lua_lib.clang_Cursor_getReceiverType
lua_lib.Cursor_getObjCPropertyAttributes = lua_lib.clang_Cursor_getObjCPropertyAttributes
lua_lib.Cursor_getObjCPropertyGetterName = lua_lib.clang_Cursor_getObjCPropertyGetterName
lua_lib.Cursor_getObjCPropertySetterName = lua_lib.clang_Cursor_getObjCPropertySetterName
lua_lib.Cursor_getObjCDeclQualifiers = lua_lib.clang_Cursor_getObjCDeclQualifiers
lua_lib.Cursor_isObjCOptional = lua_lib.clang_Cursor_isObjCOptional
lua_lib.Cursor_isVariadic = lua_lib.clang_Cursor_isVariadic
lua_lib.Cursor_isExternalSymbol = lua_lib.clang_Cursor_isExternalSymbol
lua_lib.Cursor_getCommentRange = lua_lib.clang_Cursor_getCommentRange
lua_lib.Cursor_getRawCommentText = lua_lib.clang_Cursor_getRawCommentText
lua_lib.Cursor_getBriefCommentText = lua_lib.clang_Cursor_getBriefCommentText
lua_lib.Cursor_getMangling = lua_lib.clang_Cursor_getMangling
lua_lib.Cursor_getCXXManglings = lua_lib.clang_Cursor_getCXXManglings
lua_lib.Cursor_getObjCManglings = lua_lib.clang_Cursor_getObjCManglings
lua_lib.Cursor_getModule = lua_lib.clang_Cursor_getModule
lua_lib.getModuleForFile = lua_lib.clang_getModuleForFile
lua_lib.Module_getASTFile = lua_lib.clang_Module_getASTFile
lua_lib.Module_getParent = lua_lib.clang_Module_getParent
lua_lib.Module_getName = lua_lib.clang_Module_getName
lua_lib.Module_getFullName = lua_lib.clang_Module_getFullName
lua_lib.Module_isSystem = lua_lib.clang_Module_isSystem
lua_lib.Module_getNumTopLevelHeaders = lua_lib.clang_Module_getNumTopLevelHeaders
lua_lib.Module_getTopLevelHeader = lua_lib.clang_Module_getTopLevelHeader
lua_lib.CXXConstructor_isConvertingConstructor = lua_lib.clang_CXXConstructor_isConvertingConstructor
lua_lib.CXXConstructor_isCopyConstructor = lua_lib.clang_CXXConstructor_isCopyConstructor
lua_lib.CXXConstructor_isDefaultConstructor = lua_lib.clang_CXXConstructor_isDefaultConstructor
lua_lib.CXXConstructor_isMoveConstructor = lua_lib.clang_CXXConstructor_isMoveConstructor
lua_lib.CXXField_isMutable = lua_lib.clang_CXXField_isMutable
lua_lib.CXXMethod_isDefaulted = lua_lib.clang_CXXMethod_isDefaulted
lua_lib.CXXMethod_isPureVirtual = lua_lib.clang_CXXMethod_isPureVirtual
lua_lib.CXXMethod_isStatic = lua_lib.clang_CXXMethod_isStatic
lua_lib.CXXMethod_isVirtual = lua_lib.clang_CXXMethod_isVirtual
lua_lib.CXXRecord_isAbstract = lua_lib.clang_CXXRecord_isAbstract
lua_lib.EnumDecl_isScoped = lua_lib.clang_EnumDecl_isScoped
lua_lib.CXXMethod_isConst = lua_lib.clang_CXXMethod_isConst
lua_lib.getTemplateCursorKind = lua_lib.clang_getTemplateCursorKind
lua_lib.getSpecializedCursorTemplate = lua_lib.clang_getSpecializedCursorTemplate
lua_lib.getCursorReferenceNameRange = lua_lib.clang_getCursorReferenceNameRange
lua_lib.getToken = lua_lib.clang_getToken
lua_lib.getTokenKind = lua_lib.clang_getTokenKind
lua_lib.getTokenSpelling = lua_lib.clang_getTokenSpelling
lua_lib.getTokenLocation = lua_lib.clang_getTokenLocation
lua_lib.getTokenExtent = lua_lib.clang_getTokenExtent
lua_lib.tokenize = lua_lib.clang_tokenize
lua_lib.annotateTokens = lua_lib.clang_annotateTokens
lua_lib.disposeTokens = lua_lib.clang_disposeTokens
lua_lib.getCursorKindSpelling = lua_lib.clang_getCursorKindSpelling
lua_lib.getDefinitionSpellingAndExtent = lua_lib.clang_getDefinitionSpellingAndExtent
lua_lib.enableStackTraces = lua_lib.clang_enableStackTraces
lua_lib.executeOnThread = lua_lib.clang_executeOnThread
lua_lib.getCompletionChunkKind = lua_lib.clang_getCompletionChunkKind
lua_lib.getCompletionChunkText = lua_lib.clang_getCompletionChunkText
lua_lib.getCompletionChunkCompletionString = lua_lib.clang_getCompletionChunkCompletionString
lua_lib.getNumCompletionChunks = lua_lib.clang_getNumCompletionChunks
lua_lib.getCompletionPriority = lua_lib.clang_getCompletionPriority
lua_lib.getCompletionAvailability = lua_lib.clang_getCompletionAvailability
lua_lib.getCompletionNumAnnotations = lua_lib.clang_getCompletionNumAnnotations
lua_lib.getCompletionAnnotation = lua_lib.clang_getCompletionAnnotation
lua_lib.getCompletionParent = lua_lib.clang_getCompletionParent
lua_lib.getCompletionBriefComment = lua_lib.clang_getCompletionBriefComment
lua_lib.getCursorCompletionString = lua_lib.clang_getCursorCompletionString
lua_lib.getCompletionNumFixIts = lua_lib.clang_getCompletionNumFixIts
lua_lib.getCompletionFixIt = lua_lib.clang_getCompletionFixIt
lua_lib.defaultCodeCompleteOptions = lua_lib.clang_defaultCodeCompleteOptions
lua_lib.codeCompleteAt = lua_lib.clang_codeCompleteAt
lua_lib.sortCodeCompletionResults = lua_lib.clang_sortCodeCompletionResults
lua_lib.disposeCodeCompleteResults = lua_lib.clang_disposeCodeCompleteResults
lua_lib.codeCompleteGetNumDiagnostics = lua_lib.clang_codeCompleteGetNumDiagnostics
lua_lib.codeCompleteGetDiagnostic = lua_lib.clang_codeCompleteGetDiagnostic
lua_lib.codeCompleteGetContexts = lua_lib.clang_codeCompleteGetContexts
lua_lib.codeCompleteGetContainerKind = lua_lib.clang_codeCompleteGetContainerKind
lua_lib.codeCompleteGetContainerUSR = lua_lib.clang_codeCompleteGetContainerUSR
lua_lib.codeCompleteGetObjCSelector = lua_lib.clang_codeCompleteGetObjCSelector
lua_lib.getClangVersion = lua_lib.clang_getClangVersion
lua_lib.toggleCrashRecovery = lua_lib.clang_toggleCrashRecovery
lua_lib.getInclusions = lua_lib.clang_getInclusions
lua_lib.Cursor_Evaluate = lua_lib.clang_Cursor_Evaluate
lua_lib.EvalResult_getKind = lua_lib.clang_EvalResult_getKind
lua_lib.EvalResult_getAsInt = lua_lib.clang_EvalResult_getAsInt
lua_lib.EvalResult_getAsLongLong = lua_lib.clang_EvalResult_getAsLongLong
lua_lib.EvalResult_isUnsignedInt = lua_lib.clang_EvalResult_isUnsignedInt
lua_lib.EvalResult_getAsUnsigned = lua_lib.clang_EvalResult_getAsUnsigned
lua_lib.EvalResult_getAsDouble = lua_lib.clang_EvalResult_getAsDouble
lua_lib.EvalResult_getAsStr = lua_lib.clang_EvalResult_getAsStr
lua_lib.EvalResult_dispose = lua_lib.clang_EvalResult_dispose
lua_lib.getRemappings = lua_lib.clang_getRemappings
lua_lib.getRemappingsFromFileList = lua_lib.clang_getRemappingsFromFileList
lua_lib.remap_getNumFiles = lua_lib.clang_remap_getNumFiles
lua_lib.remap_getFilenames = lua_lib.clang_remap_getFilenames
lua_lib.remap_dispose = lua_lib.clang_remap_dispose
lua_lib.findReferencesInFile = lua_lib.clang_findReferencesInFile
lua_lib.findIncludesInFile = lua_lib.clang_findIncludesInFile
lua_lib.index_isEntityObjCContainerKind = lua_lib.clang_index_isEntityObjCContainerKind
lua_lib.index_getObjCContainerDeclInfo = lua_lib.clang_index_getObjCContainerDeclInfo
lua_lib.index_getObjCInterfaceDeclInfo = lua_lib.clang_index_getObjCInterfaceDeclInfo
lua_lib.index_getObjCCategoryDeclInfo = lua_lib.clang_index_getObjCCategoryDeclInfo
lua_lib.index_getObjCProtocolRefListInfo = lua_lib.clang_index_getObjCProtocolRefListInfo
lua_lib.index_getObjCPropertyDeclInfo = lua_lib.clang_index_getObjCPropertyDeclInfo
lua_lib.index_getIBOutletCollectionAttrInfo = lua_lib.clang_index_getIBOutletCollectionAttrInfo
lua_lib.index_getCXXClassDeclInfo = lua_lib.clang_index_getCXXClassDeclInfo
lua_lib.index_getClientContainer = lua_lib.clang_index_getClientContainer
lua_lib.index_setClientContainer = lua_lib.clang_index_setClientContainer
lua_lib.index_getClientEntity = lua_lib.clang_index_getClientEntity
lua_lib.index_setClientEntity = lua_lib.clang_index_setClientEntity
lua_lib.IndexAction_create = lua_lib.clang_IndexAction_create
lua_lib.IndexAction_dispose = lua_lib.clang_IndexAction_dispose
lua_lib.indexSourceFile = lua_lib.clang_indexSourceFile
lua_lib.indexSourceFileFullArgv = lua_lib.clang_indexSourceFileFullArgv
lua_lib.indexTranslationUnit = lua_lib.clang_indexTranslationUnit
lua_lib.indexLoc_getFileLocation = lua_lib.clang_indexLoc_getFileLocation
lua_lib.indexLoc_getCXSourceLocation = lua_lib.clang_indexLoc_getCXSourceLocation
lua_lib.Type_visitFields = lua_lib.clang_Type_visitFields
lua_lib.Cursor_getParsedComment = lua_lib.clang_Cursor_getParsedComment
lua_lib.Comment_getKind = lua_lib.clang_Comment_getKind
lua_lib.Comment_getNumChildren = lua_lib.clang_Comment_getNumChildren
lua_lib.Comment_getChild = lua_lib.clang_Comment_getChild
lua_lib.Comment_isWhitespace = lua_lib.clang_Comment_isWhitespace
lua_lib.InlineContentComment_hasTrailingNewline = lua_lib.clang_InlineContentComment_hasTrailingNewline
lua_lib.TextComment_getText = lua_lib.clang_TextComment_getText
lua_lib.InlineCommandComment_getCommandName = lua_lib.clang_InlineCommandComment_getCommandName
lua_lib.InlineCommandComment_getRenderKind = lua_lib.clang_InlineCommandComment_getRenderKind
lua_lib.InlineCommandComment_getNumArgs = lua_lib.clang_InlineCommandComment_getNumArgs
lua_lib.InlineCommandComment_getArgText = lua_lib.clang_InlineCommandComment_getArgText
lua_lib.HTMLTagComment_getTagName = lua_lib.clang_HTMLTagComment_getTagName
lua_lib.HTMLStartTagComment_isSelfClosing = lua_lib.clang_HTMLStartTagComment_isSelfClosing
lua_lib.HTMLStartTag_getNumAttrs = lua_lib.clang_HTMLStartTag_getNumAttrs
lua_lib.HTMLStartTag_getAttrName = lua_lib.clang_HTMLStartTag_getAttrName
lua_lib.HTMLStartTag_getAttrValue = lua_lib.clang_HTMLStartTag_getAttrValue
lua_lib.BlockCommandComment_getCommandName = lua_lib.clang_BlockCommandComment_getCommandName
lua_lib.BlockCommandComment_getNumArgs = lua_lib.clang_BlockCommandComment_getNumArgs
lua_lib.BlockCommandComment_getArgText = lua_lib.clang_BlockCommandComment_getArgText
lua_lib.BlockCommandComment_getParagraph = lua_lib.clang_BlockCommandComment_getParagraph
lua_lib.ParamCommandComment_getParamName = lua_lib.clang_ParamCommandComment_getParamName
lua_lib.ParamCommandComment_isParamIndexValid = lua_lib.clang_ParamCommandComment_isParamIndexValid
lua_lib.ParamCommandComment_getParamIndex = lua_lib.clang_ParamCommandComment_getParamIndex
lua_lib.ParamCommandComment_isDirectionExplicit = lua_lib.clang_ParamCommandComment_isDirectionExplicit
lua_lib.ParamCommandComment_getDirection = lua_lib.clang_ParamCommandComment_getDirection
lua_lib.TParamCommandComment_getParamName = lua_lib.clang_TParamCommandComment_getParamName
lua_lib.TParamCommandComment_isParamPositionValid = lua_lib.clang_TParamCommandComment_isParamPositionValid
lua_lib.TParamCommandComment_getDepth = lua_lib.clang_TParamCommandComment_getDepth
lua_lib.TParamCommandComment_getIndex = lua_lib.clang_TParamCommandComment_getIndex
lua_lib.VerbatimBlockLineComment_getText = lua_lib.clang_VerbatimBlockLineComment_getText
lua_lib.VerbatimLineComment_getText = lua_lib.clang_VerbatimLineComment_getText
lua_lib.HTMLTagComment_getAsString = lua_lib.clang_HTMLTagComment_getAsString
lua_lib.FullComment_getAsHTML = lua_lib.clang_FullComment_getAsHTML
lua_lib.FullComment_getAsXML = lua_lib.clang_FullComment_getAsXML
lua_lib.install_aborting_llvm_fatal_error_handler = lua_lib.clang_install_aborting_llvm_fatal_error_handler
lua_lib.uninstall_llvm_fatal_error_handler = lua_lib.clang_uninstall_llvm_fatal_error_handler
return lua_lib

