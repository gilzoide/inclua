--[[
-- This file was automatically generated by Inclua 0.2.0 (https://github.com/gilzoide/inclua)
-- 
-- The Inclua team hopes this file was accurately generated, that it will be useful
-- and will never give SEGFAULTs, throw exceptions, or panic in a similar way.
-- This software is provided 'as-is', without any warranty.
-- Feel free to change and redistribute it.
--]]
local ffi = require 'ffi'

ffi.cdef[=[
struct Vector2 {
  float x;
  float y;
};
typedef struct Vector2 Vector2;
struct Vector3 {
  float x;
  float y;
  float z;
};
typedef struct Vector3 Vector3;
struct Vector4 {
  float x;
  float y;
  float z;
  float w;
};
typedef struct Vector4 Vector4;
typedef Vector4 Quaternion;
struct Matrix {
  float m0;
  float m4;
  float m8;
  float m12;
  float m1;
  float m5;
  float m9;
  float m13;
  float m2;
  float m6;
  float m10;
  float m14;
  float m3;
  float m7;
  float m11;
  float m15;
};
typedef struct Matrix Matrix;
struct Color {
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char a;
};
typedef struct Color Color;
struct Rectangle {
  float x;
  float y;
  float width;
  float height;
};
typedef struct Rectangle Rectangle;
struct Image {
  void * data;
  int width;
  int height;
  int mipmaps;
  int format;
};
typedef struct Image Image;
struct Texture {
  unsigned int id;
  int width;
  int height;
  int mipmaps;
  int format;
};
typedef struct Texture Texture;
typedef Texture Texture2D;
typedef Texture TextureCubemap;
struct RenderTexture {
  unsigned int id;
  Texture texture;
  Texture depth;
};
typedef struct RenderTexture RenderTexture;
typedef RenderTexture RenderTexture2D;
struct NPatchInfo {
  Rectangle source;
  int left;
  int top;
  int right;
  int bottom;
  int type;
};
typedef struct NPatchInfo NPatchInfo;
struct CharInfo {
  int value;
  int offsetX;
  int offsetY;
  int advanceX;
  Image image;
};
typedef struct CharInfo CharInfo;
struct Font {
  int baseSize;
  int charsCount;
  int charsPadding;
  Texture2D texture;
  Rectangle * recs;
  CharInfo * chars;
};
typedef struct Font Font;
struct Camera3D {
  Vector3 position;
  Vector3 target;
  Vector3 up;
  float fovy;
  int type;
};
typedef struct Camera3D Camera3D;
typedef Camera3D Camera;
struct Camera2D {
  Vector2 offset;
  Vector2 target;
  float rotation;
  float zoom;
};
typedef struct Camera2D Camera2D;
struct Mesh {
  int vertexCount;
  int triangleCount;
  float * vertices;
  float * texcoords;
  float * texcoords2;
  float * normals;
  float * tangents;
  unsigned char * colors;
  unsigned short * indices;
  float * animVertices;
  float * animNormals;
  int * boneIds;
  float * boneWeights;
  unsigned int vaoId;
  unsigned int * vboId;
};
typedef struct Mesh Mesh;
struct Shader {
  unsigned int id;
  int * locs;
};
typedef struct Shader Shader;
struct MaterialMap {
  Texture2D texture;
  Color color;
  float value;
};
typedef struct MaterialMap MaterialMap;
struct Material {
  Shader shader;
  MaterialMap * maps;
  float * params;
};
typedef struct Material Material;
struct Transform {
  Vector3 translation;
  Quaternion rotation;
  Vector3 scale;
};
typedef struct Transform Transform;
struct BoneInfo {
  char name[32];
  int parent;
};
typedef struct BoneInfo BoneInfo;
struct Model {
  Matrix transform;
  int meshCount;
  int materialCount;
  Mesh * meshes;
  Material * materials;
  int * meshMaterial;
  int boneCount;
  BoneInfo * bones;
  Transform * bindPose;
};
typedef struct Model Model;
struct ModelAnimation {
  int boneCount;
  int frameCount;
  BoneInfo * bones;
  Transform ** framePoses;
};
typedef struct ModelAnimation ModelAnimation;
struct Ray {
  Vector3 position;
  Vector3 direction;
};
typedef struct Ray Ray;
struct RayHitInfo {
  _Bool hit;
  float distance;
  Vector3 position;
  Vector3 normal;
};
typedef struct RayHitInfo RayHitInfo;
struct BoundingBox {
  Vector3 min;
  Vector3 max;
};
typedef struct BoundingBox BoundingBox;
struct Wave {
  unsigned int sampleCount;
  unsigned int sampleRate;
  unsigned int sampleSize;
  unsigned int channels;
  void * data;
};
typedef struct Wave Wave;
struct rAudioBuffer;
typedef struct rAudioBuffer rAudioBuffer;
struct AudioStream {
  rAudioBuffer * buffer;
  unsigned int sampleRate;
  unsigned int sampleSize;
  unsigned int channels;
};
typedef struct AudioStream AudioStream;
struct Sound {
  AudioStream stream;
  unsigned int sampleCount;
};
typedef struct Sound Sound;
struct Music {
  AudioStream stream;
  unsigned int sampleCount;
  _Bool looping;
  int ctxType;
  void * ctxData;
};
typedef struct Music Music;
struct VrDeviceInfo {
  int hResolution;
  int vResolution;
  float hScreenSize;
  float vScreenSize;
  float vScreenCenter;
  float eyeToScreenDistance;
  float lensSeparationDistance;
  float interpupillaryDistance;
  float lensDistortionValues[4];
  float chromaAbCorrection[4];
};
typedef struct VrDeviceInfo VrDeviceInfo;
typedef enum ConfigFlag {
  FLAG_VSYNC_HINT = 64,
  FLAG_FULLSCREEN_MODE = 2,
  FLAG_WINDOW_RESIZABLE = 4,
  FLAG_WINDOW_UNDECORATED = 8,
  FLAG_WINDOW_HIDDEN = 128,
  FLAG_WINDOW_MINIMIZED = 512,
  FLAG_WINDOW_MAXIMIZED = 1024,
  FLAG_WINDOW_UNFOCUSED = 2048,
  FLAG_WINDOW_TOPMOST = 4096,
  FLAG_WINDOW_ALWAYS_RUN = 256,
  FLAG_WINDOW_TRANSPARENT = 16,
  FLAG_WINDOW_HIGHDPI = 8192,
  FLAG_MSAA_4X_HINT = 32,
  FLAG_INTERLACED_HINT = 65536,
} ConfigFlag;
typedef ConfigFlag ConfigFlag;
typedef enum TraceLogType {
  LOG_ALL = 0,
  LOG_TRACE = 1,
  LOG_DEBUG = 2,
  LOG_INFO = 3,
  LOG_WARNING = 4,
  LOG_ERROR = 5,
  LOG_FATAL = 6,
  LOG_NONE = 7,
} TraceLogType;
typedef TraceLogType TraceLogType;
typedef enum KeyboardKey {
  KEY_APOSTROPHE = 39,
  KEY_COMMA = 44,
  KEY_MINUS = 45,
  KEY_PERIOD = 46,
  KEY_SLASH = 47,
  KEY_ZERO = 48,
  KEY_ONE = 49,
  KEY_TWO = 50,
  KEY_THREE = 51,
  KEY_FOUR = 52,
  KEY_FIVE = 53,
  KEY_SIX = 54,
  KEY_SEVEN = 55,
  KEY_EIGHT = 56,
  KEY_NINE = 57,
  KEY_SEMICOLON = 59,
  KEY_EQUAL = 61,
  KEY_A = 65,
  KEY_B = 66,
  KEY_C = 67,
  KEY_D = 68,
  KEY_E = 69,
  KEY_F = 70,
  KEY_G = 71,
  KEY_H = 72,
  KEY_I = 73,
  KEY_J = 74,
  KEY_K = 75,
  KEY_L = 76,
  KEY_M = 77,
  KEY_N = 78,
  KEY_O = 79,
  KEY_P = 80,
  KEY_Q = 81,
  KEY_R = 82,
  KEY_S = 83,
  KEY_T = 84,
  KEY_U = 85,
  KEY_V = 86,
  KEY_W = 87,
  KEY_X = 88,
  KEY_Y = 89,
  KEY_Z = 90,
  KEY_SPACE = 32,
  KEY_ESCAPE = 256,
  KEY_ENTER = 257,
  KEY_TAB = 258,
  KEY_BACKSPACE = 259,
  KEY_INSERT = 260,
  KEY_DELETE = 261,
  KEY_RIGHT = 262,
  KEY_LEFT = 263,
  KEY_DOWN = 264,
  KEY_UP = 265,
  KEY_PAGE_UP = 266,
  KEY_PAGE_DOWN = 267,
  KEY_HOME = 268,
  KEY_END = 269,
  KEY_CAPS_LOCK = 280,
  KEY_SCROLL_LOCK = 281,
  KEY_NUM_LOCK = 282,
  KEY_PRINT_SCREEN = 283,
  KEY_PAUSE = 284,
  KEY_F1 = 290,
  KEY_F2 = 291,
  KEY_F3 = 292,
  KEY_F4 = 293,
  KEY_F5 = 294,
  KEY_F6 = 295,
  KEY_F7 = 296,
  KEY_F8 = 297,
  KEY_F9 = 298,
  KEY_F10 = 299,
  KEY_F11 = 300,
  KEY_F12 = 301,
  KEY_LEFT_SHIFT = 340,
  KEY_LEFT_CONTROL = 341,
  KEY_LEFT_ALT = 342,
  KEY_LEFT_SUPER = 343,
  KEY_RIGHT_SHIFT = 344,
  KEY_RIGHT_CONTROL = 345,
  KEY_RIGHT_ALT = 346,
  KEY_RIGHT_SUPER = 347,
  KEY_KB_MENU = 348,
  KEY_LEFT_BRACKET = 91,
  KEY_BACKSLASH = 92,
  KEY_RIGHT_BRACKET = 93,
  KEY_GRAVE = 96,
  KEY_KP_0 = 320,
  KEY_KP_1 = 321,
  KEY_KP_2 = 322,
  KEY_KP_3 = 323,
  KEY_KP_4 = 324,
  KEY_KP_5 = 325,
  KEY_KP_6 = 326,
  KEY_KP_7 = 327,
  KEY_KP_8 = 328,
  KEY_KP_9 = 329,
  KEY_KP_DECIMAL = 330,
  KEY_KP_DIVIDE = 331,
  KEY_KP_MULTIPLY = 332,
  KEY_KP_SUBTRACT = 333,
  KEY_KP_ADD = 334,
  KEY_KP_ENTER = 335,
  KEY_KP_EQUAL = 336,
} KeyboardKey;
typedef KeyboardKey KeyboardKey;
typedef enum AndroidButton {
  KEY_BACK = 4,
  KEY_MENU = 82,
  KEY_VOLUME_UP = 24,
  KEY_VOLUME_DOWN = 25,
} AndroidButton;
typedef AndroidButton AndroidButton;
typedef enum MouseButton {
  MOUSE_LEFT_BUTTON = 0,
  MOUSE_RIGHT_BUTTON = 1,
  MOUSE_MIDDLE_BUTTON = 2,
} MouseButton;
typedef MouseButton MouseButton;
typedef enum MouseCursor {
  MOUSE_CURSOR_DEFAULT = 0,
  MOUSE_CURSOR_ARROW = 1,
  MOUSE_CURSOR_IBEAM = 2,
  MOUSE_CURSOR_CROSSHAIR = 3,
  MOUSE_CURSOR_POINTING_HAND = 4,
  MOUSE_CURSOR_RESIZE_EW = 5,
  MOUSE_CURSOR_RESIZE_NS = 6,
  MOUSE_CURSOR_RESIZE_NWSE = 7,
  MOUSE_CURSOR_RESIZE_NESW = 8,
  MOUSE_CURSOR_RESIZE_ALL = 9,
  MOUSE_CURSOR_NOT_ALLOWED = 10,
} MouseCursor;
typedef MouseCursor MouseCursor;
typedef enum GamepadNumber {
  GAMEPAD_PLAYER1 = 0,
  GAMEPAD_PLAYER2 = 1,
  GAMEPAD_PLAYER3 = 2,
  GAMEPAD_PLAYER4 = 3,
} GamepadNumber;
typedef GamepadNumber GamepadNumber;
typedef enum GamepadButton {
  GAMEPAD_BUTTON_UNKNOWN = 0,
  GAMEPAD_BUTTON_LEFT_FACE_UP = 1,
  GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2,
  GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3,
  GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4,
  GAMEPAD_BUTTON_RIGHT_FACE_UP = 5,
  GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6,
  GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7,
  GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8,
  GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9,
  GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10,
  GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11,
  GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12,
  GAMEPAD_BUTTON_MIDDLE_LEFT = 13,
  GAMEPAD_BUTTON_MIDDLE = 14,
  GAMEPAD_BUTTON_MIDDLE_RIGHT = 15,
  GAMEPAD_BUTTON_LEFT_THUMB = 16,
  GAMEPAD_BUTTON_RIGHT_THUMB = 17,
} GamepadButton;
typedef GamepadButton GamepadButton;
typedef enum GamepadAxis {
  GAMEPAD_AXIS_LEFT_X = 0,
  GAMEPAD_AXIS_LEFT_Y = 1,
  GAMEPAD_AXIS_RIGHT_X = 2,
  GAMEPAD_AXIS_RIGHT_Y = 3,
  GAMEPAD_AXIS_LEFT_TRIGGER = 4,
  GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
} GamepadAxis;
typedef GamepadAxis GamepadAxis;
typedef enum ShaderLocationIndex {
  LOC_VERTEX_POSITION = 0,
  LOC_VERTEX_TEXCOORD01 = 1,
  LOC_VERTEX_TEXCOORD02 = 2,
  LOC_VERTEX_NORMAL = 3,
  LOC_VERTEX_TANGENT = 4,
  LOC_VERTEX_COLOR = 5,
  LOC_MATRIX_MVP = 6,
  LOC_MATRIX_MODEL = 7,
  LOC_MATRIX_VIEW = 8,
  LOC_MATRIX_PROJECTION = 9,
  LOC_VECTOR_VIEW = 10,
  LOC_COLOR_DIFFUSE = 11,
  LOC_COLOR_SPECULAR = 12,
  LOC_COLOR_AMBIENT = 13,
  LOC_MAP_ALBEDO = 14,
  LOC_MAP_METALNESS = 15,
  LOC_MAP_NORMAL = 16,
  LOC_MAP_ROUGHNESS = 17,
  LOC_MAP_OCCLUSION = 18,
  LOC_MAP_EMISSION = 19,
  LOC_MAP_HEIGHT = 20,
  LOC_MAP_CUBEMAP = 21,
  LOC_MAP_IRRADIANCE = 22,
  LOC_MAP_PREFILTER = 23,
  LOC_MAP_BRDF = 24,
} ShaderLocationIndex;
typedef ShaderLocationIndex ShaderLocationIndex;
typedef enum ShaderUniformDataType {
  UNIFORM_FLOAT = 0,
  UNIFORM_VEC2 = 1,
  UNIFORM_VEC3 = 2,
  UNIFORM_VEC4 = 3,
  UNIFORM_INT = 4,
  UNIFORM_IVEC2 = 5,
  UNIFORM_IVEC3 = 6,
  UNIFORM_IVEC4 = 7,
  UNIFORM_SAMPLER2D = 8,
} ShaderUniformDataType;
typedef ShaderUniformDataType ShaderUniformDataType;
typedef enum MaterialMapType {
  MAP_ALBEDO = 0,
  MAP_METALNESS = 1,
  MAP_NORMAL = 2,
  MAP_ROUGHNESS = 3,
  MAP_OCCLUSION = 4,
  MAP_EMISSION = 5,
  MAP_HEIGHT = 6,
  MAP_CUBEMAP = 7,
  MAP_IRRADIANCE = 8,
  MAP_PREFILTER = 9,
  MAP_BRDF = 10,
} MaterialMapType;
typedef MaterialMapType MaterialMapType;
typedef enum PixelFormat {
  UNCOMPRESSED_GRAYSCALE = 1,
  UNCOMPRESSED_GRAY_ALPHA = 2,
  UNCOMPRESSED_R5G6B5 = 3,
  UNCOMPRESSED_R8G8B8 = 4,
  UNCOMPRESSED_R5G5B5A1 = 5,
  UNCOMPRESSED_R4G4B4A4 = 6,
  UNCOMPRESSED_R8G8B8A8 = 7,
  UNCOMPRESSED_R32 = 8,
  UNCOMPRESSED_R32G32B32 = 9,
  UNCOMPRESSED_R32G32B32A32 = 10,
  COMPRESSED_DXT1_RGB = 11,
  COMPRESSED_DXT1_RGBA = 12,
  COMPRESSED_DXT3_RGBA = 13,
  COMPRESSED_DXT5_RGBA = 14,
  COMPRESSED_ETC1_RGB = 15,
  COMPRESSED_ETC2_RGB = 16,
  COMPRESSED_ETC2_EAC_RGBA = 17,
  COMPRESSED_PVRT_RGB = 18,
  COMPRESSED_PVRT_RGBA = 19,
  COMPRESSED_ASTC_4x4_RGBA = 20,
  COMPRESSED_ASTC_8x8_RGBA = 21,
} PixelFormat;
typedef PixelFormat PixelFormat;
typedef enum TextureFilterMode {
  FILTER_POINT = 0,
  FILTER_BILINEAR = 1,
  FILTER_TRILINEAR = 2,
  FILTER_ANISOTROPIC_4X = 3,
  FILTER_ANISOTROPIC_8X = 4,
  FILTER_ANISOTROPIC_16X = 5,
} TextureFilterMode;
typedef TextureFilterMode TextureFilterMode;
typedef enum TextureWrapMode {
  WRAP_REPEAT = 0,
  WRAP_CLAMP = 1,
  WRAP_MIRROR_REPEAT = 2,
  WRAP_MIRROR_CLAMP = 3,
} TextureWrapMode;
typedef TextureWrapMode TextureWrapMode;
typedef enum CubemapLayoutType {
  CUBEMAP_AUTO_DETECT = 0,
  CUBEMAP_LINE_VERTICAL = 1,
  CUBEMAP_LINE_HORIZONTAL = 2,
  CUBEMAP_CROSS_THREE_BY_FOUR = 3,
  CUBEMAP_CROSS_FOUR_BY_THREE = 4,
  CUBEMAP_PANORAMA = 5,
} CubemapLayoutType;
typedef CubemapLayoutType CubemapLayoutType;
typedef enum FontType {
  FONT_DEFAULT = 0,
  FONT_BITMAP = 1,
  FONT_SDF = 2,
} FontType;
typedef FontType FontType;
typedef enum BlendMode {
  BLEND_ALPHA = 0,
  BLEND_ADDITIVE = 1,
  BLEND_MULTIPLIED = 2,
  BLEND_ADD_COLORS = 3,
  BLEND_SUBTRACT_COLORS = 4,
  BLEND_CUSTOM = 5,
} BlendMode;
typedef BlendMode BlendMode;
typedef enum GestureType {
  GESTURE_NONE = 0,
  GESTURE_TAP = 1,
  GESTURE_DOUBLETAP = 2,
  GESTURE_HOLD = 4,
  GESTURE_DRAG = 8,
  GESTURE_SWIPE_RIGHT = 16,
  GESTURE_SWIPE_LEFT = 32,
  GESTURE_SWIPE_UP = 64,
  GESTURE_SWIPE_DOWN = 128,
  GESTURE_PINCH_IN = 256,
  GESTURE_PINCH_OUT = 512,
} GestureType;
typedef GestureType GestureType;
typedef enum CameraMode {
  CAMERA_CUSTOM = 0,
  CAMERA_FREE = 1,
  CAMERA_ORBITAL = 2,
  CAMERA_FIRST_PERSON = 3,
  CAMERA_THIRD_PERSON = 4,
} CameraMode;
typedef CameraMode CameraMode;
typedef enum CameraType {
  CAMERA_PERSPECTIVE = 0,
  CAMERA_ORTHOGRAPHIC = 1,
} CameraType;
typedef CameraType CameraType;
typedef enum NPatchType {
  NPT_9PATCH = 0,
  NPT_3PATCH_VERTICAL = 1,
  NPT_3PATCH_HORIZONTAL = 2,
} NPatchType;
typedef NPatchType NPatchType;
typedef void (*TraceLogCallback)(int, const char *, struct __va_list_tag *);
void InitWindow(int width, int height, const char * title);
_Bool WindowShouldClose();
void CloseWindow();
_Bool IsWindowReady();
_Bool IsWindowFullscreen();
_Bool IsWindowHidden();
_Bool IsWindowMinimized();
_Bool IsWindowMaximized();
_Bool IsWindowFocused();
_Bool IsWindowResized();
_Bool IsWindowState(unsigned int flag);
void SetWindowState(unsigned int flags);
void ClearWindowState(unsigned int flags);
void ToggleFullscreen();
void MaximizeWindow();
void MinimizeWindow();
void RestoreWindow();
void SetWindowIcon(Image image);
void SetWindowTitle(const char * title);
void SetWindowPosition(int x, int y);
void SetWindowMonitor(int monitor);
void SetWindowMinSize(int width, int height);
void SetWindowSize(int width, int height);
void * GetWindowHandle();
int GetScreenWidth();
int GetScreenHeight();
int GetMonitorCount();
Vector2 GetMonitorPosition(int monitor);
int GetMonitorWidth(int monitor);
int GetMonitorHeight(int monitor);
int GetMonitorPhysicalWidth(int monitor);
int GetMonitorPhysicalHeight(int monitor);
int GetMonitorRefreshRate(int monitor);
Vector2 GetWindowPosition();
Vector2 GetWindowScaleDPI();
const char * GetMonitorName(int monitor);
void SetClipboardText(const char * text);
const char * GetClipboardText();
void ShowCursor();
void HideCursor();
_Bool IsCursorHidden();
void EnableCursor();
void DisableCursor();
_Bool IsCursorOnScreen();
void ClearBackground(Color color);
void BeginDrawing();
void EndDrawing();
void BeginMode2D(Camera2D camera);
void EndMode2D();
void BeginMode3D(Camera3D camera);
void EndMode3D();
void BeginTextureMode(RenderTexture2D target);
void EndTextureMode();
void BeginScissorMode(int x, int y, int width, int height);
void EndScissorMode();
Ray GetMouseRay(Vector2 mousePosition, Camera camera);
Matrix GetCameraMatrix(Camera camera);
Matrix GetCameraMatrix2D(Camera2D camera);
Vector2 GetWorldToScreen(Vector3 position, Camera camera);
Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height);
Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera);
Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera);
void SetTargetFPS(int fps);
int GetFPS();
float GetFrameTime();
double GetTime();
void SetConfigFlags(unsigned int flags);
void SetTraceLogLevel(int logType);
void SetTraceLogExit(int logType);
void SetTraceLogCallback(TraceLogCallback callback);
void TraceLog(int logType, const char * text);
void * MemAlloc(int size);
void MemFree(void * ptr);
void TakeScreenshot(const char * fileName);
int GetRandomValue(int min, int max);
unsigned char * LoadFileData(const char * fileName, unsigned int * bytesRead);
void UnloadFileData(unsigned char * data);
_Bool SaveFileData(const char * fileName, void * data, unsigned int bytesToWrite);
char * LoadFileText(const char * fileName);
void UnloadFileText(unsigned char * text);
_Bool SaveFileText(const char * fileName, char * text);
_Bool FileExists(const char * fileName);
_Bool DirectoryExists(const char * dirPath);
_Bool IsFileExtension(const char * fileName, const char * ext);
const char * GetFileExtension(const char * fileName);
const char * GetFileName(const char * filePath);
const char * GetFileNameWithoutExt(const char * filePath);
const char * GetDirectoryPath(const char * filePath);
const char * GetPrevDirectoryPath(const char * dirPath);
const char * GetWorkingDirectory();
char ** GetDirectoryFiles(const char * dirPath, int * count);
void ClearDirectoryFiles();
_Bool ChangeDirectory(const char * dir);
_Bool IsFileDropped();
char ** GetDroppedFiles(int * count);
void ClearDroppedFiles();
long GetFileModTime(const char * fileName);
unsigned char * CompressData(unsigned char * data, int dataLength, int * compDataLength);
unsigned char * DecompressData(unsigned char * compData, int compDataLength, int * dataLength);
_Bool SaveStorageValue(unsigned int position, int value);
int LoadStorageValue(unsigned int position);
void OpenURL(const char * url);
_Bool IsKeyPressed(int key);
_Bool IsKeyDown(int key);
_Bool IsKeyReleased(int key);
_Bool IsKeyUp(int key);
void SetExitKey(int key);
int GetKeyPressed();
int GetCharPressed();
_Bool IsGamepadAvailable(int gamepad);
_Bool IsGamepadName(int gamepad, const char * name);
const char * GetGamepadName(int gamepad);
_Bool IsGamepadButtonPressed(int gamepad, int button);
_Bool IsGamepadButtonDown(int gamepad, int button);
_Bool IsGamepadButtonReleased(int gamepad, int button);
_Bool IsGamepadButtonUp(int gamepad, int button);
int GetGamepadButtonPressed();
int GetGamepadAxisCount(int gamepad);
float GetGamepadAxisMovement(int gamepad, int axis);
_Bool IsMouseButtonPressed(int button);
_Bool IsMouseButtonDown(int button);
_Bool IsMouseButtonReleased(int button);
_Bool IsMouseButtonUp(int button);
int GetMouseX();
int GetMouseY();
Vector2 GetMousePosition();
void SetMousePosition(int x, int y);
void SetMouseOffset(int offsetX, int offsetY);
void SetMouseScale(float scaleX, float scaleY);
float GetMouseWheelMove();
int GetMouseCursor();
void SetMouseCursor(int cursor);
int GetTouchX();
int GetTouchY();
Vector2 GetTouchPosition(int index);
void SetGesturesEnabled(unsigned int gestureFlags);
_Bool IsGestureDetected(int gesture);
int GetGestureDetected();
int GetTouchPointsCount();
float GetGestureHoldDuration();
Vector2 GetGestureDragVector();
float GetGestureDragAngle();
Vector2 GetGesturePinchVector();
float GetGesturePinchAngle();
void SetCameraMode(Camera camera, int mode);
void UpdateCamera(Camera * camera);
void SetCameraPanControl(int keyPan);
void SetCameraAltControl(int keyAlt);
void SetCameraSmoothZoomControl(int keySmoothZoom);
void SetCameraMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown);
void DrawPixel(int posX, int posY, Color color);
void DrawPixelV(Vector2 position, Color color);
void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);
void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);
void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);
void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);
void DrawLineStrip(Vector2 * points, int pointsCount, Color color);
void DrawCircle(int centerX, int centerY, float radius, Color color);
void DrawCircleSector(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color);
void DrawCircleSectorLines(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color);
void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2);
void DrawCircleV(Vector2 center, float radius, Color color);
void DrawCircleLines(int centerX, int centerY, float radius, Color color);
void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color);
void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color);
void DrawRing(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color);
void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color);
void DrawRectangle(int posX, int posY, int width, int height, Color color);
void DrawRectangleV(Vector2 position, Vector2 size, Color color);
void DrawRectangleRec(Rectangle rec, Color color);
void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);
void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2);
void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2);
void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4);
void DrawRectangleLines(int posX, int posY, int width, int height, Color color);
void DrawRectangleLinesEx(Rectangle rec, int lineThick, Color color);
void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);
void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, int lineThick, Color color);
void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
void DrawTriangleFan(Vector2 * points, int pointsCount, Color color);
void DrawTriangleStrip(Vector2 * points, int pointsCount, Color color);
void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);
void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color);
_Bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);
_Bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);
_Bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);
_Bool CheckCollisionPointRec(Vector2 point, Rectangle rec);
_Bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);
_Bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);
_Bool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 * collisionPoint);
Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);
Image LoadImage(const char * fileName);
Image LoadImageRaw(const char * fileName, int width, int height, int format, int headerSize);
Image LoadImageAnim(const char * fileName, int * frames);
Image LoadImageFromMemory(const char * fileType, const unsigned char * fileData, int dataSize);
void UnloadImage(Image image);
_Bool ExportImage(Image image, const char * fileName);
_Bool ExportImageAsCode(Image image, const char * fileName);
Image GenImageColor(int width, int height, Color color);
Image GenImageGradientV(int width, int height, Color top, Color bottom);
Image GenImageGradientH(int width, int height, Color left, Color right);
Image GenImageGradientRadial(int width, int height, float density, Color inner, Color outer);
Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2);
Image GenImageWhiteNoise(int width, int height, float factor);
Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale);
Image GenImageCellular(int width, int height, int tileSize);
Image ImageCopy(Image image);
Image ImageFromImage(Image image, Rectangle rec);
Image ImageText(const char * text, int fontSize, Color color);
Image ImageTextEx(Font font, const char * text, float fontSize, float spacing, Color tint);
void ImageFormat(Image * image, int newFormat);
void ImageToPOT(Image * image, Color fill);
void ImageCrop(Image * image, Rectangle crop);
void ImageAlphaCrop(Image * image, float threshold);
void ImageAlphaClear(Image * image, Color color, float threshold);
void ImageAlphaMask(Image * image, Image alphaMask);
void ImageAlphaPremultiply(Image * image);
void ImageResize(Image * image, int newWidth, int newHeight);
void ImageResizeNN(Image * image, int newWidth, int newHeight);
void ImageResizeCanvas(Image * image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill);
void ImageMipmaps(Image * image);
void ImageDither(Image * image, int rBpp, int gBpp, int bBpp, int aBpp);
void ImageFlipVertical(Image * image);
void ImageFlipHorizontal(Image * image);
void ImageRotateCW(Image * image);
void ImageRotateCCW(Image * image);
void ImageColorTint(Image * image, Color color);
void ImageColorInvert(Image * image);
void ImageColorGrayscale(Image * image);
void ImageColorContrast(Image * image, float contrast);
void ImageColorBrightness(Image * image, int brightness);
void ImageColorReplace(Image * image, Color color, Color replace);
Color * LoadImageColors(Image image);
Color * LoadImagePalette(Image image, int maxPaletteSize, int * colorsCount);
void UnloadImageColors(Color * colors);
void UnloadImagePalette(Color * colors);
Rectangle GetImageAlphaBorder(Image image, float threshold);
void ImageClearBackground(Image * dst, Color color);
void ImageDrawPixel(Image * dst, int posX, int posY, Color color);
void ImageDrawPixelV(Image * dst, Vector2 position, Color color);
void ImageDrawLine(Image * dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color);
void ImageDrawLineV(Image * dst, Vector2 start, Vector2 end, Color color);
void ImageDrawCircle(Image * dst, int centerX, int centerY, int radius, Color color);
void ImageDrawCircleV(Image * dst, Vector2 center, int radius, Color color);
void ImageDrawRectangle(Image * dst, int posX, int posY, int width, int height, Color color);
void ImageDrawRectangleV(Image * dst, Vector2 position, Vector2 size, Color color);
void ImageDrawRectangleRec(Image * dst, Rectangle rec, Color color);
void ImageDrawRectangleLines(Image * dst, Rectangle rec, int thick, Color color);
void ImageDraw(Image * dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);
void ImageDrawText(Image * dst, const char * text, int posX, int posY, int fontSize, Color color);
void ImageDrawTextEx(Image * dst, Font font, const char * text, Vector2 position, float fontSize, float spacing, Color tint);
Texture2D LoadTexture(const char * fileName);
Texture2D LoadTextureFromImage(Image image);
TextureCubemap LoadTextureCubemap(Image image, int layoutType);
RenderTexture2D LoadRenderTexture(int width, int height);
void UnloadTexture(Texture2D texture);
void UnloadRenderTexture(RenderTexture2D target);
void UpdateTexture(Texture2D texture, const void * pixels);
void UpdateTextureRec(Texture2D texture, Rectangle rec, const void * pixels);
Image GetTextureData(Texture2D texture);
Image GetScreenData();
void GenTextureMipmaps(Texture2D * texture);
void SetTextureFilter(Texture2D texture, int filterMode);
void SetTextureWrap(Texture2D texture, int wrapMode);
void DrawTexture(Texture2D texture, int posX, int posY, Color tint);
void DrawTextureV(Texture2D texture, Vector2 position, Color tint);
void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);
void DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint);
void DrawTextureQuad(Texture2D texture, Vector2 tiling, Vector2 offset, Rectangle quad, Color tint);
void DrawTextureTiled(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, float scale, Color tint);
void DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint);
void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint);
Color Fade(Color color, float alpha);
int ColorToInt(Color color);
Vector4 ColorNormalize(Color color);
Color ColorFromNormalized(Vector4 normalized);
Vector3 ColorToHSV(Color color);
Color ColorFromHSV(float hue, float saturation, float value);
Color ColorAlpha(Color color, float alpha);
Color ColorAlphaBlend(Color dst, Color src, Color tint);
Color GetColor(int hexValue);
Color GetPixelColor(void * srcPtr, int format);
void SetPixelColor(void * dstPtr, Color color, int format);
int GetPixelDataSize(int width, int height, int format);
Font GetFontDefault();
Font LoadFont(const char * fileName);
Font LoadFontEx(const char * fileName, int fontSize, int * fontChars, int charsCount);
Font LoadFontFromImage(Image image, Color key, int firstChar);
Font LoadFontFromMemory(const char * fileType, const unsigned char * fileData, int dataSize, int fontSize, int * fontChars, int charsCount);
CharInfo * LoadFontData(const unsigned char * fileData, int dataSize, int fontSize, int * fontChars, int charsCount, int type);
Image GenImageFontAtlas(const CharInfo * chars, Rectangle ** recs, int charsCount, int fontSize, int padding, int packMethod);
void UnloadFontData(CharInfo * chars, int charsCount);
void UnloadFont(Font font);
void DrawFPS(int posX, int posY);
void DrawText(const char * text, int posX, int posY, int fontSize, Color color);
void DrawTextEx(Font font, const char * text, Vector2 position, float fontSize, float spacing, Color tint);
void DrawTextRec(Font font, const char * text, Rectangle rec, float fontSize, float spacing, _Bool wordWrap, Color tint);
void DrawTextRecEx(Font font, const char * text, Rectangle rec, float fontSize, float spacing, _Bool wordWrap, Color tint, int selectStart, int selectLength, Color selectTint, Color selectBackTint);
void DrawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint);
int MeasureText(const char * text, int fontSize);
Vector2 MeasureTextEx(Font font, const char * text, float fontSize, float spacing);
int GetGlyphIndex(Font font, int codepoint);
int TextCopy(char * dst, const char * src);
_Bool TextIsEqual(const char * text1, const char * text2);
unsigned int TextLength(const char * text);
const char * TextFormat(const char * text);
const char * TextSubtext(const char * text, int position, int length);
char * TextReplace(char * text, const char * replace, const char * by);
char * TextInsert(const char * text, const char * insert, int position);
const char * TextJoin(const char ** textList, int count, const char * delimiter);
const char ** TextSplit(const char * text, char delimiter, int * count);
void TextAppend(char * text, const char * append, int * position);
int TextFindIndex(const char * text, const char * find);
const char * TextToUpper(const char * text);
const char * TextToLower(const char * text);
const char * TextToPascal(const char * text);
int TextToInteger(const char * text);
char * TextToUtf8(int * codepoints, int length);
int * GetCodepoints(const char * text, int * count);
int GetCodepointsCount(const char * text);
int GetNextCodepoint(const char * text, int * bytesProcessed);
const char * CodepointToUtf8(int codepoint, int * byteLength);
void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);
void DrawPoint3D(Vector3 position, Color color);
void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color);
void DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color);
void DrawTriangleStrip3D(Vector3 * points, int pointsCount, Color color);
void DrawCube(Vector3 position, float width, float height, float length, Color color);
void DrawCubeV(Vector3 position, Vector3 size, Color color);
void DrawCubeWires(Vector3 position, float width, float height, float length, Color color);
void DrawCubeWiresV(Vector3 position, Vector3 size, Color color);
void DrawCubeTexture(Texture2D texture, Vector3 position, float width, float height, float length, Color color);
void DrawSphere(Vector3 centerPos, float radius, Color color);
void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color);
void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color);
void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
void DrawPlane(Vector3 centerPos, Vector2 size, Color color);
void DrawRay(Ray ray, Color color);
void DrawGrid(int slices, float spacing);
void DrawGizmo(Vector3 position);
Model LoadModel(const char * fileName);
Model LoadModelFromMesh(Mesh mesh);
void UnloadModel(Model model);
void UnloadModelKeepMeshes(Model model);
Mesh * LoadMeshes(const char * fileName, int * meshCount);
void UnloadMesh(Mesh mesh);
_Bool ExportMesh(Mesh mesh, const char * fileName);
Material * LoadMaterials(const char * fileName, int * materialCount);
Material LoadMaterialDefault();
void UnloadMaterial(Material material);
void SetMaterialTexture(Material * material, int mapType, Texture2D texture);
void SetModelMeshMaterial(Model * model, int meshId, int materialId);
ModelAnimation * LoadModelAnimations(const char * fileName, int * animsCount);
void UpdateModelAnimation(Model model, ModelAnimation anim, int frame);
void UnloadModelAnimation(ModelAnimation anim);
_Bool IsModelAnimationValid(Model model, ModelAnimation anim);
Mesh GenMeshPoly(int sides, float radius);
Mesh GenMeshPlane(float width, float length, int resX, int resZ);
Mesh GenMeshCube(float width, float height, float length);
Mesh GenMeshSphere(float radius, int rings, int slices);
Mesh GenMeshHemiSphere(float radius, int rings, int slices);
Mesh GenMeshCylinder(float radius, float height, int slices);
Mesh GenMeshTorus(float radius, float size, int radSeg, int sides);
Mesh GenMeshKnot(float radius, float size, int radSeg, int sides);
Mesh GenMeshHeightmap(Image heightmap, Vector3 size);
Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);
BoundingBox MeshBoundingBox(Mesh mesh);
void MeshTangents(Mesh * mesh);
void MeshBinormals(Mesh * mesh);
void MeshNormalsSmooth(Mesh * mesh);
void DrawModel(Model model, Vector3 position, float scale, Color tint);
void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
void DrawModelWires(Model model, Vector3 position, float scale, Color tint);
void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
void DrawBoundingBox(BoundingBox box, Color color);
void DrawBillboard(Camera camera, Texture2D texture, Vector3 center, float size, Color tint);
void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 center, float size, Color tint);
_Bool CheckCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2);
_Bool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);
_Bool CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius);
_Bool CheckCollisionRaySphere(Ray ray, Vector3 center, float radius);
_Bool CheckCollisionRaySphereEx(Ray ray, Vector3 center, float radius, Vector3 * collisionPoint);
_Bool CheckCollisionRayBox(Ray ray, BoundingBox box);
RayHitInfo GetCollisionRayMesh(Ray ray, Mesh mesh, Matrix transform);
RayHitInfo GetCollisionRayModel(Ray ray, Model model);
RayHitInfo GetCollisionRayTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);
RayHitInfo GetCollisionRayGround(Ray ray, float groundHeight);
Shader LoadShader(const char * vsFileName, const char * fsFileName);
Shader LoadShaderCode(const char * vsCode, const char * fsCode);
void UnloadShader(Shader shader);
Shader GetShaderDefault();
Texture2D GetTextureDefault();
Texture2D GetShapesTexture();
Rectangle GetShapesTextureRec();
void SetShapesTexture(Texture2D texture, Rectangle source);
int GetShaderLocation(Shader shader, const char * uniformName);
int GetShaderLocationAttrib(Shader shader, const char * attribName);
void SetShaderValue(Shader shader, int uniformLoc, const void * value, int uniformType);
void SetShaderValueV(Shader shader, int uniformLoc, const void * value, int uniformType, int count);
void SetShaderValueMatrix(Shader shader, int uniformLoc, Matrix mat);
void SetShaderValueTexture(Shader shader, int uniformLoc, Texture2D texture);
void SetMatrixProjection(Matrix proj);
void SetMatrixModelview(Matrix view);
Matrix GetMatrixModelview();
Matrix GetMatrixProjection();
TextureCubemap GenTextureCubemap(Shader shader, Texture2D panorama, int size, int format);
TextureCubemap GenTextureIrradiance(Shader shader, TextureCubemap cubemap, int size);
TextureCubemap GenTexturePrefilter(Shader shader, TextureCubemap cubemap, int size);
Texture2D GenTextureBRDF(Shader shader, int size);
void BeginShaderMode(Shader shader);
void EndShaderMode();
void BeginBlendMode(int mode);
void EndBlendMode();
void InitVrSimulator();
void CloseVrSimulator();
void UpdateVrTracking(Camera * camera);
void SetVrConfiguration(VrDeviceInfo info, Shader distortion);
_Bool IsVrSimulatorReady();
void ToggleVrMode();
void BeginVrDrawing();
void EndVrDrawing();
void InitAudioDevice();
void CloseAudioDevice();
_Bool IsAudioDeviceReady();
void SetMasterVolume(float volume);
Wave LoadWave(const char * fileName);
Wave LoadWaveFromMemory(const char * fileType, const unsigned char * fileData, int dataSize);
Sound LoadSound(const char * fileName);
Sound LoadSoundFromWave(Wave wave);
void UpdateSound(Sound sound, const void * data, int samplesCount);
void UnloadWave(Wave wave);
void UnloadSound(Sound sound);
_Bool ExportWave(Wave wave, const char * fileName);
_Bool ExportWaveAsCode(Wave wave, const char * fileName);
void PlaySound(Sound sound);
void StopSound(Sound sound);
void PauseSound(Sound sound);
void ResumeSound(Sound sound);
void PlaySoundMulti(Sound sound);
void StopSoundMulti();
int GetSoundsPlaying();
_Bool IsSoundPlaying(Sound sound);
void SetSoundVolume(Sound sound, float volume);
void SetSoundPitch(Sound sound, float pitch);
void WaveFormat(Wave * wave, int sampleRate, int sampleSize, int channels);
Wave WaveCopy(Wave wave);
void WaveCrop(Wave * wave, int initSample, int finalSample);
float * LoadWaveSamples(Wave wave);
void UnloadWaveSamples(float * samples);
Music LoadMusicStream(const char * fileName);
void UnloadMusicStream(Music music);
void PlayMusicStream(Music music);
void UpdateMusicStream(Music music);
void StopMusicStream(Music music);
void PauseMusicStream(Music music);
void ResumeMusicStream(Music music);
_Bool IsMusicPlaying(Music music);
void SetMusicVolume(Music music, float volume);
void SetMusicPitch(Music music, float pitch);
float GetMusicTimeLength(Music music);
float GetMusicTimePlayed(Music music);
AudioStream InitAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels);
void UpdateAudioStream(AudioStream stream, const void * data, int samplesCount);
void CloseAudioStream(AudioStream stream);
_Bool IsAudioStreamProcessed(AudioStream stream);
void PlayAudioStream(AudioStream stream);
void PauseAudioStream(AudioStream stream);
void ResumeAudioStream(AudioStream stream);
_Bool IsAudioStreamPlaying(AudioStream stream);
void StopAudioStream(AudioStream stream);
void SetAudioStreamVolume(AudioStream stream, float volume);
void SetAudioStreamPitch(AudioStream stream, float pitch);
void SetAudioStreamBufferSizeDefault(int size);
]=]

local c_lib = ffi.load('raylib')
local lua_lib = setmetatable({ c_lib = c_lib }, { __index = c_lib })
lua_lib.Vector2 = ffi.metatype('struct Vector2', {
  __name = 'Vector2',
  __tostring = function(self)
    return string.format('Vector2(%g, %g)', self.x, self.y)
  end,
  __add = function(a, b)
    return lua_lib.Vector2(a.x + b.x, a.y + b.y)
  end,
  __sub = function(a, b)
    return lua_lib.Vector2(a.x - b.x, a.y - b.y)
  end,
  __unm = function(self)
    return lua_lib.Vector2(-self.x, -self.y)
  end,
  __index = {
    GetMouseRay = c_lib.GetMouseRay,
    GetWorldToScreen2D = c_lib.GetWorldToScreen2D,
    GetScreenToWorld2D = c_lib.GetScreenToWorld2D,
    DrawPixelV = c_lib.DrawPixelV,
    DrawLineV = c_lib.DrawLineV,
    DrawLineEx = c_lib.DrawLineEx,
    DrawLineBezier = c_lib.DrawLineBezier,
    DrawLineStrip = c_lib.DrawLineStrip,
    DrawCircleSector = c_lib.DrawCircleSector,
    DrawCircleSectorLines = c_lib.DrawCircleSectorLines,
    DrawCircleV = c_lib.DrawCircleV,
    DrawRing = c_lib.DrawRing,
    DrawRingLines = c_lib.DrawRingLines,
    DrawRectangleV = c_lib.DrawRectangleV,
    DrawTriangle = c_lib.DrawTriangle,
    DrawTriangleLines = c_lib.DrawTriangleLines,
    DrawTriangleFan = c_lib.DrawTriangleFan,
    DrawTriangleStrip = c_lib.DrawTriangleStrip,
    DrawPoly = c_lib.DrawPoly,
    DrawPolyLines = c_lib.DrawPolyLines,
    CheckCollisionCircles = c_lib.CheckCollisionCircles,
    CheckCollisionCircleRec = c_lib.CheckCollisionCircleRec,
    CheckCollisionPointRec = c_lib.CheckCollisionPointRec,
    CheckCollisionPointCircle = c_lib.CheckCollisionPointCircle,
    CheckCollisionPointTriangle = c_lib.CheckCollisionPointTriangle,
    CheckCollisionLines = c_lib.CheckCollisionLines,
  },
})
lua_lib.Vector3 = ffi.metatype('struct Vector3', {
  __name = 'Vector3',
  __tostring = function(self)
    return string.format('Vector3(%g, %g, %g)', self.x, self.y, self.z)
  end,
  __add = function(a, b)
    return lua_lib.Vector3(a.x + b.x, a.y + b.y, a.z + b.z)
  end,
  __sub = function(a, b)
    return lua_lib.Vector3(a.x - b.x, a.y - b.y, a.z - b.z)
  end,
  __unm = function(self)
    return lua_lib.Vector3(-self.x, -self.y, -self.z)
  end,
  __index = {
    GetWorldToScreen = c_lib.GetWorldToScreen,
    GetWorldToScreenEx = c_lib.GetWorldToScreenEx,
    DrawLine3D = c_lib.DrawLine3D,
    DrawPoint3D = c_lib.DrawPoint3D,
    DrawCircle3D = c_lib.DrawCircle3D,
    DrawTriangle3D = c_lib.DrawTriangle3D,
    DrawTriangleStrip3D = c_lib.DrawTriangleStrip3D,
    DrawCube = c_lib.DrawCube,
    DrawCubeV = c_lib.DrawCubeV,
    DrawCubeWires = c_lib.DrawCubeWires,
    DrawCubeWiresV = c_lib.DrawCubeWiresV,
    DrawSphere = c_lib.DrawSphere,
    DrawSphereEx = c_lib.DrawSphereEx,
    DrawSphereWires = c_lib.DrawSphereWires,
    DrawCylinder = c_lib.DrawCylinder,
    DrawCylinderWires = c_lib.DrawCylinderWires,
    DrawPlane = c_lib.DrawPlane,
    DrawGizmo = c_lib.DrawGizmo,
    CheckCollisionSpheres = c_lib.CheckCollisionSpheres,
  },
})
lua_lib.Vector4 = ffi.metatype('struct Vector4', {
  __name = 'Vector4',
  __tostring = function(self)
    return string.format('Vector4(%g, %g, %g, %g)', self.x, self.y, self.z, self.w)
  end,
  __add = function(a, b)
    return lua_lib.Vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w)
  end,
  __sub = function(a, b)
    return lua_lib.Vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w)
  end,
  __unm = function(self)
    return lua_lib.Vector4(-self.x, -self.y, -self.z, -self.w)
  end,
  __index = {
    ColorFromNormalized = c_lib.ColorFromNormalized,
  },
})
lua_lib.Matrix = ffi.metatype('struct Matrix', {
  __name = 'Matrix',
  __index = {
    SetProjection = c_lib.SetMatrixProjection,
    SetModelview = c_lib.SetMatrixModelview,
  },
})
lua_lib.Color = ffi.metatype('struct Color', {
  __name = 'Color',
  __tostring = function(self)
    return string.format('Color(%d, %d, %d, %d)', self.r, self.g, self.b, self.a)
  end,
  __index = {
    ClearBackground = c_lib.ClearBackground,
    Fade = c_lib.Fade,
    ToInt = c_lib.ColorToInt,
    Normalize = c_lib.ColorNormalize,
    ToHSV = c_lib.ColorToHSV,
    Alpha = c_lib.ColorAlpha,
    AlphaBlend = c_lib.ColorAlphaBlend,
  },
})
lua_lib.Rectangle = ffi.metatype('struct Rectangle', {
  __name = 'Rectangle',
  __tostring = function(self)
    return string.format('Rectangle{ x = %g, y = %g, width = %g, height = %g }', self.x, self.y, self.width, self.height)
  end,
  __index = {
    DrawRec = c_lib.DrawRectangleRec,
    DrawPro = c_lib.DrawRectanglePro,
    DrawGradientEx = c_lib.DrawRectangleGradientEx,
    DrawLinesEx = c_lib.DrawRectangleLinesEx,
    DrawRounded = c_lib.DrawRectangleRounded,
    DrawRoundedLines = c_lib.DrawRectangleRoundedLines,
    CheckCollisionRecs = c_lib.CheckCollisionRecs,
    GetCollisionRec = c_lib.GetCollisionRec,
  },
})
lua_lib.Image = ffi.metatype('struct Image', {
  __name = 'Image',
  __gc = c_lib.UnloadImage,
  __index = {
    SetWindowIcon = c_lib.SetWindowIcon,
    Export = c_lib.ExportImage,
    ExportAsCode = c_lib.ExportImageAsCode,
    Copy = c_lib.ImageCopy,
    FromImage = c_lib.ImageFromImage,
    Format = c_lib.ImageFormat,
    ToPOT = c_lib.ImageToPOT,
    Crop = c_lib.ImageCrop,
    AlphaCrop = c_lib.ImageAlphaCrop,
    AlphaClear = c_lib.ImageAlphaClear,
    AlphaMask = c_lib.ImageAlphaMask,
    AlphaPremultiply = c_lib.ImageAlphaPremultiply,
    Resize = c_lib.ImageResize,
    ResizeNN = c_lib.ImageResizeNN,
    ResizeCanvas = c_lib.ImageResizeCanvas,
    Mipmaps = c_lib.ImageMipmaps,
    Dither = c_lib.ImageDither,
    FlipVertical = c_lib.ImageFlipVertical,
    FlipHorizontal = c_lib.ImageFlipHorizontal,
    RotateCW = c_lib.ImageRotateCW,
    RotateCCW = c_lib.ImageRotateCCW,
    ColorTint = c_lib.ImageColorTint,
    ColorInvert = c_lib.ImageColorInvert,
    ColorGrayscale = c_lib.ImageColorGrayscale,
    ColorContrast = c_lib.ImageColorContrast,
    ColorBrightness = c_lib.ImageColorBrightness,
    ColorReplace = c_lib.ImageColorReplace,
    LoadColors = c_lib.LoadImageColors,
    LoadPalette = c_lib.LoadImagePalette,
    GetAlphaBorder = c_lib.GetImageAlphaBorder,
    ClearBackground = c_lib.ImageClearBackground,
    DrawPixel = c_lib.ImageDrawPixel,
    DrawPixelV = c_lib.ImageDrawPixelV,
    DrawLine = c_lib.ImageDrawLine,
    DrawLineV = c_lib.ImageDrawLineV,
    DrawCircle = c_lib.ImageDrawCircle,
    DrawCircleV = c_lib.ImageDrawCircleV,
    DrawRectangle = c_lib.ImageDrawRectangle,
    DrawRectangleV = c_lib.ImageDrawRectangleV,
    DrawRectangleRec = c_lib.ImageDrawRectangleRec,
    DrawRectangleLines = c_lib.ImageDrawRectangleLines,
    Draw = c_lib.ImageDraw,
    DrawText = c_lib.ImageDrawText,
    DrawTextEx = c_lib.ImageDrawTextEx,
    LoadTextureFrom = c_lib.LoadTextureFromImage,
    LoadTextureCubemap = c_lib.LoadTextureCubemap,
    LoadFontFrom = c_lib.LoadFontFromImage,
    GenMeshHeightmap = c_lib.GenMeshHeightmap,
    GenMeshCubicmap = c_lib.GenMeshCubicmap,
  },
})
lua_lib.Texture = ffi.metatype('struct Texture', {
  __name = 'Texture',
  __gc = c_lib.UnloadTexture,
  __index = {
    Update = c_lib.UpdateTexture,
    UpdateRec = c_lib.UpdateTextureRec,
    GetData = c_lib.GetTextureData,
    GenMipmaps = c_lib.GenTextureMipmaps,
    SetFilter = c_lib.SetTextureFilter,
    SetWrap = c_lib.SetTextureWrap,
    Draw = c_lib.DrawTexture,
    DrawV = c_lib.DrawTextureV,
    DrawEx = c_lib.DrawTextureEx,
    DrawRec = c_lib.DrawTextureRec,
    DrawQuad = c_lib.DrawTextureQuad,
    DrawTiled = c_lib.DrawTextureTiled,
    DrawPro = c_lib.DrawTexturePro,
    DrawNPatch = c_lib.DrawTextureNPatch,
    DrawCube = c_lib.DrawCubeTexture,
    SetShapes = c_lib.SetShapesTexture,
  },
})
lua_lib.RenderTexture = ffi.metatype('struct RenderTexture', {
  __name = 'RenderTexture',
  __gc = c_lib.UnloadRenderTexture,
  __index = {
    BeginTextureMode = c_lib.BeginTextureMode,
  },
})
lua_lib.NPatchInfo = ffi.metatype('struct NPatchInfo', {
  __name = 'NPatchInfo',
})
lua_lib.CharInfo = ffi.metatype('struct CharInfo', {
  __name = 'CharInfo',
  __index = {
    GenImageFontAtlas = c_lib.GenImageFontAtlas,
    UnloadFontData = c_lib.UnloadFontData,
  },
})
lua_lib.Font = ffi.metatype('struct Font', {
  __name = 'Font',
  __gc = c_lib.UnloadFont,
  __index = {
    ImageTextEx = c_lib.ImageTextEx,
    DrawTextEx = c_lib.DrawTextEx,
    DrawTextRec = c_lib.DrawTextRec,
    DrawTextRecEx = c_lib.DrawTextRecEx,
    DrawTextCodepoint = c_lib.DrawTextCodepoint,
    MeasureTextEx = c_lib.MeasureTextEx,
    GetGlyphIndex = c_lib.GetGlyphIndex,
  },
})
lua_lib.Camera3D = ffi.metatype('struct Camera3D', {
  __name = 'Camera3D',
  __index = {
    BeginMode3D = c_lib.BeginMode3D,
    GetCameraMatrix = c_lib.GetCameraMatrix,
    SetCameraMode = c_lib.SetCameraMode,
    UpdateCamera = c_lib.UpdateCamera,
    DrawBillboard = c_lib.DrawBillboard,
    DrawBillboardRec = c_lib.DrawBillboardRec,
    UpdateVrTracking = c_lib.UpdateVrTracking,
  },
})
lua_lib.Camera2D = ffi.metatype('struct Camera2D', {
  __name = 'Camera2D',
  __index = {
    BeginMode2D = c_lib.BeginMode2D,
    GetCameraMatrix2D = c_lib.GetCameraMatrix2D,
  },
})
lua_lib.Mesh = ffi.metatype('struct Mesh', {
  __name = 'Mesh',
  __gc = c_lib.UnloadMesh,
  __index = {
    LoadModelFrom = c_lib.LoadModelFromMesh,
    Export = c_lib.ExportMesh,
    BoundingBox = c_lib.MeshBoundingBox,
    Tangents = c_lib.MeshTangents,
    Binormals = c_lib.MeshBinormals,
    NormalsSmooth = c_lib.MeshNormalsSmooth,
  },
})
lua_lib.Shader = ffi.metatype('struct Shader', {
  __name = 'Shader',
  __gc = c_lib.UnloadShader,
  __index = {
    GetLocation = c_lib.GetShaderLocation,
    GetLocationAttrib = c_lib.GetShaderLocationAttrib,
    SetValue = c_lib.SetShaderValue,
    SetValueV = c_lib.SetShaderValueV,
    SetValueMatrix = c_lib.SetShaderValueMatrix,
    SetValueTexture = c_lib.SetShaderValueTexture,
    GenTextureCubemap = c_lib.GenTextureCubemap,
    GenTextureIrradiance = c_lib.GenTextureIrradiance,
    GenTexturePrefilter = c_lib.GenTexturePrefilter,
    GenTextureBRDF = c_lib.GenTextureBRDF,
    BeginMode = c_lib.BeginShaderMode,
  },
})
lua_lib.MaterialMap = ffi.metatype('struct MaterialMap', {
  __name = 'MaterialMap',
})
lua_lib.Material = ffi.metatype('struct Material', {
  __name = 'Material',
  __gc = c_lib.UnloadMaterial,
  __index = {
    SetTexture = c_lib.SetMaterialTexture,
  },
})
lua_lib.Transform = ffi.metatype('struct Transform', {
  __name = 'Transform',
})
lua_lib.BoneInfo = ffi.metatype('struct BoneInfo', {
  __name = 'BoneInfo',
})
lua_lib.Model = ffi.metatype('struct Model', {
  __name = 'Model',
  __gc = c_lib.UnloadModelKeepMeshes,
  __index = {
    SetMeshMaterial = c_lib.SetModelMeshMaterial,
    UpdateAnimation = c_lib.UpdateModelAnimation,
    IsAnimationValid = c_lib.IsModelAnimationValid,
    Draw = c_lib.DrawModel,
    DrawEx = c_lib.DrawModelEx,
    DrawWires = c_lib.DrawModelWires,
    DrawWiresEx = c_lib.DrawModelWiresEx,
  },
})
lua_lib.ModelAnimation = ffi.metatype('struct ModelAnimation', {
  __name = 'ModelAnimation',
  __gc = c_lib.UnloadModelAnimation,
})
lua_lib.Ray = ffi.metatype('struct Ray', {
  __name = 'Ray',
  __index = {
    Draw = c_lib.DrawRay,
    CheckCollisionSphere = c_lib.CheckCollisionRaySphere,
    CheckCollisionSphereEx = c_lib.CheckCollisionRaySphereEx,
    CheckCollisionBox = c_lib.CheckCollisionRayBox,
    GetCollisionMesh = c_lib.GetCollisionRayMesh,
    GetCollisionModel = c_lib.GetCollisionRayModel,
    GetCollisionTriangle = c_lib.GetCollisionRayTriangle,
    GetCollisionGround = c_lib.GetCollisionRayGround,
  },
})
lua_lib.RayHitInfo = ffi.metatype('struct RayHitInfo', {
  __name = 'RayHitInfo',
})
lua_lib.BoundingBox = ffi.metatype('struct BoundingBox', {
  __name = 'BoundingBox',
  __index = {
    Draw = c_lib.DrawBoundingBox,
    CheckCollisionBoxes = c_lib.CheckCollisionBoxes,
    CheckCollisionBoxSphere = c_lib.CheckCollisionBoxSphere,
  },
})
lua_lib.Wave = ffi.metatype('struct Wave', {
  __name = 'Wave',
  __gc = c_lib.UnloadWave,
  __index = {
    LoadSoundFrom = c_lib.LoadSoundFromWave,
    Export = c_lib.ExportWave,
    ExportAsCode = c_lib.ExportWaveAsCode,
    Format = c_lib.WaveFormat,
    Copy = c_lib.WaveCopy,
    Crop = c_lib.WaveCrop,
    LoadSamples = c_lib.LoadWaveSamples,
  },
})
lua_lib.rAudioBuffer = ffi.metatype('struct rAudioBuffer', {
  __name = 'rAudioBuffer',
})
lua_lib.AudioStream = ffi.metatype('struct AudioStream', {
  __name = 'AudioStream',
  __gc = c_lib.CloseAudioStream,
  __index = {
    Update = c_lib.UpdateAudioStream,
    IsProcessed = c_lib.IsAudioStreamProcessed,
    Play = c_lib.PlayAudioStream,
    Pause = c_lib.PauseAudioStream,
    Resume = c_lib.ResumeAudioStream,
    IsPlaying = c_lib.IsAudioStreamPlaying,
    Stop = c_lib.StopAudioStream,
    SetVolume = c_lib.SetAudioStreamVolume,
    SetPitch = c_lib.SetAudioStreamPitch,
  },
})
lua_lib.Sound = ffi.metatype('struct Sound', {
  __name = 'Sound',
  __gc = c_lib.UnloadSound,
  __index = {
    Update = c_lib.UpdateSound,
    Play = c_lib.PlaySound,
    Stop = c_lib.StopSound,
    Pause = c_lib.PauseSound,
    Resume = c_lib.ResumeSound,
    PlayMulti = c_lib.PlaySoundMulti,
    IsPlaying = c_lib.IsSoundPlaying,
    SetVolume = c_lib.SetSoundVolume,
    SetPitch = c_lib.SetSoundPitch,
  },
})
lua_lib.Music = ffi.metatype('struct Music', {
  __name = 'Music',
  __gc = c_lib.UnloadMusicStream,
  __index = {
    PlayStream = c_lib.PlayMusicStream,
    UpdateStream = c_lib.UpdateMusicStream,
    StopStream = c_lib.StopMusicStream,
    PauseStream = c_lib.PauseMusicStream,
    ResumeStream = c_lib.ResumeMusicStream,
    IsPlaying = c_lib.IsMusicPlaying,
    SetVolume = c_lib.SetMusicVolume,
    SetPitch = c_lib.SetMusicPitch,
    GetTimeLength = c_lib.GetMusicTimeLength,
    GetTimePlayed = c_lib.GetMusicTimePlayed,
  },
})
lua_lib.VrDeviceInfo = ffi.metatype('struct VrDeviceInfo', {
  __name = 'VrDeviceInfo',
  __index = {
    SetVrConfiguration = c_lib.SetVrConfiguration,
  },
})

return lua_lib

